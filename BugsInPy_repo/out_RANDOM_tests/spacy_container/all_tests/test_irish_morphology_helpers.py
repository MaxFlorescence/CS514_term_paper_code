# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import irish_morphology_helpers as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_1():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False


def test_case_2():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False


def test_case_3():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(bytes_1)
    assert var_6 is False


def test_case_4():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    str_0 = "&6|"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False


def test_case_5():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False


def test_case_6():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False


def test_case_7():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)


def test_case_8():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.deduplicate(var_8)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_9():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False


def test_case_10():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False


def test_case_11():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.devoice(var_12)


def test_case_12():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False


def test_case_13():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)


def test_case_14():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    var_14 = module_0.ends_with_vowel(var_0)
    assert var_14 is False


def test_case_15():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_16():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_17():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    str_0 = "1X,mBK\\"
    var_17 = module_0.devoice(str_0)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_6)
    assert var_26 is False


def test_case_18():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.devoice(var_9)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    str_0 = "1X,mBK\\"
    var_17 = module_0.devoice(str_0)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.devoice(var_0)


def test_case_19():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_8)
    str_0 = "1X,mBK\\"
    var_24 = module_0.devoice(str_0)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_13)
    assert var_26 is False


def test_case_20():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.devoice(var_18)
    var_25 = module_0.ends_with_vowel(var_13)
    assert var_25 is False


def test_case_21():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_22():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_5)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.devoice(bytes_0)


def test_case_23():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    int_0 = 2045
    tuple_0 = (int_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False


def test_case_24():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    var_15 = module_0.devoice(var_4)


def test_case_25():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.devoice(var_15)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_8)
    assert var_27 is False


def test_case_26():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.devoice(var_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    var_15 = module_0.deduplicate(var_2)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_27():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False


def test_case_28():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.devoice(var_15)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.ends_dentals(bytes_7)
    assert var_27 is False


def test_case_29():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.devoice(var_18)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    str_0 = "1X,mBK\\"
    var_31 = module_0.devoice(str_0)
    var_32 = module_0.deduplicate(var_20)
    assert var_32 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_30():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_7)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_dentals(var_3)
    assert var_32 is False


def test_case_31():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(bytes_5)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.devoice(var_21)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.starts_with_vowel(var_9)
    assert var_33 is False


def test_case_32():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False


def test_case_33():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_7)
    var_14 = module_0.starts_with_vowel(bytes_0)
    assert var_14 is False


def test_case_34():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False


def test_case_35():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_12)
    assert var_15 is False


def test_case_36():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.devoice(var_14)
    str_1 = "1X,mBK\\"
    var_21 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_8)
    assert var_27 is False


def test_case_37():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    str_0 = "1X,mBK\\"
    var_16 = module_0.devoice(str_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_16)
    assert var_21 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_1)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(bytes_11)
    assert var_36 is False
    str_2 = "1X,mBK\\"
    var_37 = module_0.devoice(str_2)
    var_38 = module_0.ends_with_vowel(var_16)
    assert var_38 is False


def test_case_38():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_0)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_9)
    assert var_30 is False
    str_1 = "1X,mBK\\"
    var_31 = module_0.devoice(str_1)
    str_2 = "1X,mBK\\"
    var_32 = module_0.devoice(str_2)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    var_36 = module_0.starts_with_vowel(var_33)
    assert var_36 is False
    var_37 = module_0.starts_with_vowel(var_32)
    assert var_37 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_13)
    var_39 = module_0.deduplicate(var_35)
    assert var_39 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_39():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.devoice(var_13)
    var_20 = module_0.starts_with_vowel(var_15)
    assert var_20 is False


def test_case_40():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False


def test_case_41():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.devoice(var_2)
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_9)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_7)
    assert var_25 is False
    str_2 = "1X,mBK\\"
    var_26 = module_0.devoice(str_2)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_13)
    var_38 = module_0.starts_with_vowel(var_35)
    assert var_38 is False
    var_39 = module_0.deduplicate(bytes_2)
    assert var_39 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_42():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    str_1 = "1X,mBK\\"
    var_23 = module_0.devoice(str_1)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_23)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    str_2 = "1X,mBK\\"
    var_35 = module_0.devoice(str_2)
    var_36 = module_0.starts_with_vowel(var_14)
    assert var_36 is False


def test_case_43():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_6)
    assert var_21 is False
    str_1 = "1X,mBK\\"
    var_22 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    var_27 = module_0.deduplicate(str_1)
    assert var_27 == "1X,mBK\\"


def test_case_44():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_14)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_2)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_0)
    assert var_30 is False


def test_case_45():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.deduplicate(var_16)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_46():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.devoice(var_12)
    var_19 = module_0.ends_dentals(var_12)
    assert var_19 is False


def test_case_47():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_13)
    assert var_18 is False
    set_0 = {var_18, var_8, var_5}
    var_19 = module_0.deduplicate(set_0)


def test_case_48():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    var_33 = module_0.ends_dentals(var_31)
    assert var_33 is False
    var_34 = module_0.starts_with_vowel(bytes_9)
    assert var_34 is False


def test_case_49():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    var_13 = module_0.deduplicate(var_3)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_50():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.devoice(var_25)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_32 = module_0.ends_with_vowel(str_1)
    assert var_32 is False
    str_2 = "1X,mBK\\"
    var_33 = module_0.devoice(str_2)
    var_34 = module_0.ends_dentals(var_25)
    assert var_34 is False


def test_case_51():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.devoice(var_13)
    str_0 = "1X,mBK\\"
    var_20 = module_0.devoice(str_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    str_1 = "1X,mBK\\"
    var_27 = module_0.devoice(str_1)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(var_27)
    assert var_32 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_33 = module_0.ends_with_vowel(str_2)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    var_37 = module_0.ends_dentals(var_35)
    assert var_37 is False
    var_38 = module_0.devoice(bytes_1)


def test_case_52():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    var_10 = module_0.devoice(var_6)


def test_case_53():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_2)
    assert var_12 is False


def test_case_54():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False


def test_case_55():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_9)
    assert var_14 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_5)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_9)
    str_2 = "1X,mBK\\"
    var_29 = module_0.devoice(str_2)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    var_38 = module_0.ends_dentals(var_36)
    assert var_38 is False
    var_39 = module_0.ends_dentals(bytes_3)
    assert var_39 is False


def test_case_56():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    var_19 = module_0.ends_dentals(var_8)
    assert var_19 is False


def test_case_57():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False


def test_case_58():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_6)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.devoice(var_23)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    var_35 = module_0.ends_dentals(bytes_10)
    assert var_35 is False


def test_case_59():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\xb4Q@\xe6n`\xfe\x8dM"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False


def test_case_60():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    str_2 = "1X,mBK\\"
    var_24 = module_0.devoice(str_2)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(bytes_9)
    assert var_30 is False


def test_case_61():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_9)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    var_34 = module_0.ends_dentals(var_32)
    assert var_34 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.deduplicate(var_25)
    assert var_36 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_62():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_63():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_1)
    assert var_8 is False


def test_case_64():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(var_6)


def test_case_65():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_66():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.devoice(var_4)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(bytes_5)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    str_1 = "1X,mBK\\"
    var_36 = module_0.devoice(str_1)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_15)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    var_41 = module_0.starts_with_vowel(var_36)
    assert var_41 is False
    var_42 = module_0.ends_dentals(var_36)
    assert var_42 is False


def test_case_67():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    str_2 = "1X,mBK\\"
    var_20 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_20)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_28)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.ends_dentals(var_7)
    assert var_37 is False


def test_case_68():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(var_6)


def test_case_69():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    str_1 = "1X,mBK\\"
    var_28 = module_0.devoice(str_1)
    var_29 = module_0.ends_dentals(var_18)
    assert var_29 is False


def test_case_70():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.devoice(var_27)


def test_case_71():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False


def test_case_72():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(var_5)


def test_case_73():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(bytes_1)
    assert var_17 is False


def test_case_74():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False


def test_case_75():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_76():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_0)
    assert var_13 is False


def test_case_77():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_5)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(bytes_4)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_0)
    assert var_27 is False
    str_1 = "K3A!V\x0c#87"
    var_28 = module_0.starts_with_vowel(str_1)
    assert var_28 is False
    var_29 = module_0.deduplicate(bytes_3)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_78():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.devoice(var_26)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.starts_with_vowel(var_33)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_35)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(bytes_12)
    assert var_38 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_14)
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_40 = module_0.devoice(bytes_15)
    var_41 = module_0.ends_with_vowel(var_40)
    assert var_41 is False
    var_42 = module_0.ends_dentals(var_40)
    assert var_42 is False
    var_43 = module_0.deduplicate(bytes_15)
    assert var_43 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_79():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    str_1 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_3)
    assert var_11 is False


def test_case_80():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False


def test_case_81():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_2)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_0)


def test_case_82():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    str_2 = "1X,mBK\\"
    var_24 = module_0.devoice(str_2)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_24)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(bytes_1)
    assert var_30 is False


def test_case_83():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    str_1 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_1)
    assert var_27 is False
    str_2 = "1X,mBK\\"
    var_28 = module_0.devoice(str_2)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.starts_with_vowel(var_28)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False


def test_case_84():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_1)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_4)


def test_case_85():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_0)


def test_case_86():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.devoice(var_23)
    str_0 = "K3A!V\x0c#87"
    var_30 = module_0.starts_with_vowel(str_0)
    assert var_30 is False
    str_1 = "1X,mBK\\"
    var_31 = module_0.devoice(str_1)
    var_32 = module_0.deduplicate(str_1)
    assert var_32 == "1X,mBK\\"


def test_case_87():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(bytes_2)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_88():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_17)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.deduplicate(bytes_4)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_89():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(bytes_5)
    assert var_16 is False


def test_case_90():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    var_14 = module_0.devoice(var_0)


def test_case_91():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_8)
    assert var_24 is False
    str_1 = "1X,mBK\\"
    var_25 = module_0.devoice(str_1)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(str_1)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.starts_with_vowel(var_18)
    assert var_34 is False


def test_case_92():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_17)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    str_2 = "1X,mBK\\"
    var_28 = module_0.devoice(str_2)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.starts_with_vowel(var_28)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.starts_with_vowel(var_35)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_37)
    assert var_39 is False
    var_40 = module_0.ends_with_vowel(bytes_13)
    assert var_40 is False
    var_41 = module_0.devoice(var_6)


def test_case_93():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.devoice(str_0)


def test_case_94():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(str_0)
    assert var_21 is False


def test_case_95():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False


def test_case_96():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.starts_with_vowel(var_4)
    assert var_16 is False


def test_case_97():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    str_1 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_2)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_3)
    assert var_24 is False
    str_4 = "C\x0b+"
    var_25 = module_0.ends_with_vowel(str_4)
    assert var_25 is False


def test_case_98():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    var_22 = module_0.deduplicate(var_20)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_99():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_0)
    assert var_24 is False
    str_1 = "1X,mBK\\"
    var_25 = module_0.devoice(str_1)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_27)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_11)
    assert var_30 is False


def test_case_100():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    str_0 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_0)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(var_15)


def test_case_101():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_102():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.devoice(var_6)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_1)


def test_case_103():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    dict_0 = {var_6: var_13, var_15: var_5}
    var_16 = module_0.devoice(dict_0)


def test_case_104():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_2)
    assert var_20 is False
    str_3 = "1X,mBK\\"
    var_21 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.devoice(var_27)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_12)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(var_36)
    assert var_38 is False
    str_4 = "1X,mBK\\"
    var_39 = module_0.devoice(str_4)
    var_40 = module_0.ends_with_vowel(var_2)
    assert var_40 is False


def test_case_105():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.devoice(var_17)
    var_24 = module_0.devoice(bytes_8)


def test_case_106():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_5)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_10)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_2)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(str_0)
    assert var_32 is False


def test_case_107():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_5)
    assert var_17 is False
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    str_1 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_1)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    str_2 = "1X,mBK\\"
    var_29 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_30 = module_0.starts_with_vowel(str_3)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    var_33 = module_0.starts_with_vowel(str_3)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_27)
    assert var_34 is False


def test_case_108():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_109():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_0)
    assert var_13 is False


def test_case_110():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_3)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_4)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(bytes_3)
    assert var_8 is False


def test_case_111():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_12)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.devoice(var_24)
    str_1 = "1X,mBK\\"
    var_31 = module_0.devoice(str_1)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(str_1)
    assert var_34 is False
    tuple_0 = (var_4,)
    var_35 = module_0.ends_with_vowel(tuple_0)
    assert var_35 is False


def test_case_112():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    var_25 = module_0.deduplicate(var_8)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_113():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    str_1 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_5)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.deduplicate(bytes_9)
    assert var_27 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.deduplicate(bytes_10)
    assert var_28 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.starts_with_vowel(var_9)
    assert var_29 is False


def test_case_114():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(var_10)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_115():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    str_2 = "1X,mBK\\"
    var_14 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_2)
    assert var_17 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\xca\xd0\xf0p\x1e\x8e\xa9b"
    var_26 = module_0.ends_dentals(bytes_10)
    assert var_26 is False


def test_case_116():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_12)
    assert var_17 is False
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_1)
    assert var_21 is False
    str_2 = "K3A!V\x0c#87"
    var_22 = module_0.starts_with_vowel(str_2)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_12)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(bytes_11)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_14)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(var_36)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_19)
    assert var_39 is False


def test_case_117():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_2)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_2)
    assert var_22 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_3 = "1X,mBK\\"
    var_24 = module_0.devoice(str_3)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_24)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    str_4 = "1X,mBK\\"
    var_34 = module_0.devoice(str_4)
    var_35 = module_0.ends_with_vowel(var_25)
    assert var_35 is False


def test_case_118():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False


def test_case_119():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False


def test_case_120():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_4)
    assert var_18 is False
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_2)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    str_3 = "K3A!V\x0c#87"
    var_36 = module_0.starts_with_vowel(str_3)
    assert var_36 is False
    bytes_12 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_37 = module_0.deduplicate(bytes_12)
    assert var_37 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_38 = module_0.ends_with_vowel(bytes_6)
    assert var_38 is False


def test_case_121():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.devoice(var_8)
    str_1 = "1X,mBK\\"
    var_15 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_6)
    assert var_21 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(var_8)
    assert var_23 is False


def test_case_122():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.devoice(var_20)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.deduplicate(bytes_12)
    assert var_31 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_32 = module_0.ends_dentals(bytes_11)
    assert var_32 is False
    str_1 = "1X,mBK\\"
    var_33 = module_0.devoice(str_1)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_14)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.starts_with_vowel(var_33)
    assert var_38 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_15)
    var_40 = module_0.deduplicate(var_22)
    assert var_40 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_123():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_0)
    assert var_22 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_10)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_11)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(bytes_12)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.ends_dentals(bytes_11)
    assert var_28 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_13)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_14)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.devoice(bytes_14)
    str_1 = "1X,mBK\\"
    var_35 = module_0.devoice(str_1)
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_15)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(str_1)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_27)
    assert var_39 is False


def test_case_124():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.devoice(var_0)


def test_case_125():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_5)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_0)
    assert var_11 is False


def test_case_126():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.devoice(var_18)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.deduplicate(bytes_10)
    assert var_29 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.ends_dentals(bytes_9)
    assert var_30 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_1)
    assert var_31 is False
    var_32 = module_0.devoice(var_14)


def test_case_127():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False


def test_case_128():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_3)
    assert var_12 is False


def test_case_129():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_1)


def test_case_130():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.devoice(var_4)
    var_11 = module_0.starts_with_vowel(bytes_2)
    assert var_11 is False


def test_case_131():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    str_0 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_12)
    assert var_16 is False


def test_case_132():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_1)
    assert var_21 is False
    str_2 = "1X,mBK\\"
    var_22 = module_0.devoice(str_2)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(str_2)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_12)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_13)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.devoice(var_30)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_15)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    var_41 = module_0.ends_with_vowel(var_39)
    assert var_41 is False
    var_42 = module_0.ends_with_vowel(bytes_14)
    assert var_42 is False
    var_43 = module_0.ends_dentals(var_13)
    assert var_43 is False


def test_case_133():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False


def test_case_134():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_2)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    var_23 = module_0.deduplicate(var_15)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_135():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_3)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_2)
    assert var_9 is False


def test_case_136():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "a"
    var_8 = module_0.devoice(str_1)
    assert var_8 == "a"


def test_case_137():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.devoice(var_8)


def test_case_138():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)


def test_case_139():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.devoice(var_15)
    str_0 = "1X,mBK\\"
    var_17 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_1)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_1)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.deduplicate(bytes_7)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.deduplicate(bytes_9)
    assert var_28 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.deduplicate(bytes_10)
    assert var_29 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "1X,mBK\\"
    var_30 = module_0.devoice(str_2)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(str_2)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(var_36)
    assert var_38 is False
    var_39 = module_0.devoice(bytes_13)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_40 = module_0.devoice(bytes_14)
    var_41 = module_0.ends_with_vowel(var_40)
    assert var_41 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_42 = module_0.devoice(bytes_15)
    var_43 = module_0.starts_with_vowel(var_40)
    assert var_43 is False
    bytes_16 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_44 = module_0.deduplicate(bytes_16)
    assert var_44 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_45 = module_0.ends_dentals(bytes_15)
    assert var_45 is False
    var_46 = module_0.devoice(var_7)


def test_case_140():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.deduplicate(bytes_7)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(bytes_9)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_7)
    assert var_30 is False


def test_case_141():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.devoice(var_14)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_1)
    assert var_18 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_7)
    assert var_24 is False


def test_case_142():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False


def test_case_143():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_11)
    assert var_16 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(bytes_9)
    assert var_27 is False
    tuple_0 = (var_26, var_9, var_13)
    var_28 = module_0.deduplicate(tuple_0)


def test_case_144():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.devoice(var_4)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(bytes_9)
    assert var_29 is False


def test_case_145():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.devoice(var_16)
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_0)
    assert var_24 is False


def test_case_146():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(bytes_5)
    assert var_20 is False
    str_1 = "1X,mBK\\"
    var_21 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.devoice(var_27)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_34 = module_0.ends_with_vowel(str_2)
    assert var_34 is False
    var_35 = module_0.starts_with_vowel(str_2)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_21)
    assert var_36 is False


def test_case_147():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.devoice(var_4)
    var_11 = module_0.devoice(var_9)


def test_case_148():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_7)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    bytes_13 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_35 = module_0.deduplicate(bytes_13)
    assert var_35 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_36 = module_0.ends_dentals(bytes_12)
    assert var_36 is False
    var_37 = module_0.ends_dentals(bytes_10)
    assert var_37 is False


def test_case_149():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_1)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_dentals(bytes_4)
    assert var_15 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    str_2 = "1X,mBK\\"
    var_23 = module_0.devoice(str_2)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_25)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_18)
    assert var_28 is False


def test_case_150():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.devoice(var_18)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_9)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.ends_dentals(bytes_8)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_27)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_27)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_13)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_14)
    var_35 = module_0.ends_dentals(var_32)
    assert var_35 is False
    var_36 = module_0.ends_dentals(bytes_13)
    assert var_36 is False
    var_37 = module_0.starts_with_vowel(bytes_10)
    assert var_37 is False


def test_case_151():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_1 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_8)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_9)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.ends_with_vowel(bytes_5)
    assert var_23 is False


def test_case_152():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    str_3 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_3)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_4)
    assert var_18 is False


def test_case_153():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(bytes_6)
    assert var_19 is False
    str_2 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_2)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_23)
    assert var_25 is False


def test_case_154():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_4)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(bytes_3)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(bytes_3)
    assert var_23 is False


def test_case_155():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_0)
    assert var_13 is False


def test_case_156():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    str_1 = "1X,mBK\\"
    var_17 = module_0.devoice(str_1)
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_2)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.devoice(var_27)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(bytes_9)
    assert var_34 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_11)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_dentals(var_35)
    assert var_38 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_13)
    var_40 = module_0.ends_with_vowel(var_9)
    assert var_40 is False


def test_case_157():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_12)
    assert var_16 is False


def test_case_158():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    str_4 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_4)
    assert var_10 is False
    str_5 = "1X,mBK\\"
    var_11 = module_0.devoice(str_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_5)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_3)
    assert var_19 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(var_5)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_159():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_3)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.devoice(var_25)
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(bytes_9)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.deduplicate(str_3)
    assert var_28 == "Kd tt@\x0c9{k:|lpK9"


def test_case_160():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_1)
    assert var_11 is False


def test_case_161():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False


def test_case_162():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_dentals(bytes_4)
    assert var_15 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_12)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_13)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.devoice(var_29)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_14)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    var_38 = module_0.devoice(var_5)


def test_case_163():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.devoice(var_15)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_dentals(bytes_6)
    assert var_21 is False
    var_22 = module_0.deduplicate(bytes_4)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_164():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_3)
    str_1 = "1X,mBK\\"
    var_15 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_15)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.deduplicate(bytes_6)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.deduplicate(bytes_10)
    assert var_31 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_32 = module_0.ends_dentals(bytes_9)
    assert var_32 is False
    str_2 = "K3A!V\x0c#87"
    var_33 = module_0.starts_with_vowel(str_2)
    assert var_33 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_12)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_dentals(var_15)
    assert var_38 is False


def test_case_165():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.devoice(var_9)
    str_0 = "1X,mBK\\"
    var_16 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    str_2 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_2)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_dentals(var_27)
    assert var_30 is False
    var_31 = module_0.ends_dentals(bytes_9)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    var_35 = module_0.ends_dentals(var_33)
    assert var_35 is False
    var_36 = module_0.starts_with_vowel(var_33)
    assert var_36 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_13)
    dict_0 = {var_6: var_28, var_15: var_3, var_30: var_29}
    var_38 = module_0.devoice(dict_0)


def test_case_166():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_8)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.ends_dentals(bytes_7)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False


def test_case_167():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_168():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_7)
    str_1 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.devoice(var_23)
    var_30 = module_0.devoice(var_3)


def test_case_169():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.starts_with_vowel(bytes_3)
    assert var_16 is False


def test_case_170():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_2)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    str_4 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_4)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_14)
    assert var_18 is False


def test_case_171():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    str_1 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_1)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_2)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(str_2)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.deduplicate(str_2)
    assert var_29 == "Kd tt@\x0c9{k:|lpK9"


def test_case_172():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    str_0 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_0)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_dentals(bytes_6)
    assert var_21 is False
    var_22 = module_0.deduplicate(var_13)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_173():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False


def test_case_174():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_0)
    assert var_14 == "Kd tt@\x0c9{k:|lpK9"


def test_case_175():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_6)
    assert var_18 is False


def test_case_176():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_6)
    str_3 = "1X,mBK\\"
    var_21 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_3)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(bytes_2)
    assert var_25 is False


def test_case_177():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_7)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    str_0 = "1X,mBK\\"
    var_19 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_1)
    assert var_23 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.devoice(var_24)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_2)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(str_2)
    assert var_32 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.starts_with_vowel(var_33)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_35)
    assert var_37 is False
    var_38 = module_0.devoice(bytes_13)
    var_39 = module_0.ends_with_vowel(bytes_9)
    assert var_39 is False


def test_case_178():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.devoice(var_2)


def test_case_179():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False


def test_case_180():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_7)
    str_0 = "1X,mBK\\"
    var_19 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_20 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_dentals(bytes_9)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.deduplicate(bytes_9)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_181():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_182():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_12)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.deduplicate(bytes_5)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.starts_with_vowel(var_18)
    assert var_24 is False


def test_case_183():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.devoice(var_14)
    var_21 = module_0.deduplicate(var_7)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_184():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_0)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_0)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.devoice(var_26)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(bytes_10)
    assert var_37 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_12)
    var_39 = module_0.ends_with_vowel(var_38)
    assert var_39 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_40 = module_0.devoice(bytes_13)
    var_41 = module_0.starts_with_vowel(var_38)
    assert var_41 is False
    var_42 = module_0.ends_with_vowel(var_40)
    assert var_42 is False
    var_43 = module_0.deduplicate(bytes_12)
    assert var_43 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_44 = module_0.devoice(bytes_14)
    var_45 = module_0.ends_with_vowel(var_44)
    assert var_45 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_46 = module_0.devoice(bytes_15)
    var_47 = module_0.ends_dentals(var_44)
    assert var_47 is False
    str_1 = "1X,mBK\\"
    var_48 = module_0.devoice(str_1)
    bytes_16 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_49 = module_0.devoice(bytes_16)
    var_50 = module_0.ends_with_vowel(var_49)
    assert var_50 is False
    var_51 = module_0.ends_with_vowel(str_1)
    assert var_51 is False
    var_52 = module_0.ends_dentals(bytes_14)
    assert var_52 is False


def test_case_185():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.devoice(var_11)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_2)


def test_case_186():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_7)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.devoice(var_31)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_34)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_1)
    assert var_37 is False


def test_case_187():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_6)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_2)
    assert var_21 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_3 = "1X,mBK\\"
    var_23 = module_0.devoice(str_3)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_23)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.deduplicate(bytes_10)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_13)
    var_38 = module_0.ends_dentals(var_35)
    assert var_38 is False
    var_39 = module_0.ends_dentals(bytes_12)
    assert var_39 is False
    var_40 = module_0.devoice(bytes_2)


def test_case_188():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.devoice(var_17)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    str_3 = "K3A!V\x0c#87"
    var_28 = module_0.starts_with_vowel(str_3)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_dentals(var_30)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    var_36 = module_0.ends_dentals(var_33)
    assert var_36 is False
    var_37 = module_0.ends_dentals(bytes_1)
    assert var_37 is False


def test_case_189():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.deduplicate(bytes_1)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_190():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_14)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(bytes_6)
    assert var_20 is False


def test_case_191():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_6)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_3)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    str_3 = "1X,mBK\\"
    var_17 = module_0.devoice(str_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(str_3)
    assert var_20 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    dict_0 = {str_0: var_19}
    var_22 = module_0.deduplicate(dict_0)


def test_case_192():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_11)
    var_18 = module_0.starts_with_vowel(bytes_2)
    assert var_18 is False


def test_case_193():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_11)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_2)
    assert var_19 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_3 = "1X,mBK\\"
    var_21 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_3)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.deduplicate(var_27)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_4)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_36 = module_0.deduplicate(bytes_12)
    assert var_36 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_37 = module_0.ends_dentals(bytes_11)
    assert var_37 is False
    var_38 = module_0.deduplicate(var_2)
    assert var_38 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_194():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_9)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    str_3 = "1X,mBK\\"
    var_25 = module_0.devoice(str_3)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_25)
    assert var_30 is False
    var_31 = module_0.devoice(var_0)


def test_case_195():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_16)
    var_18 = module_0.ends_with_vowel(bytes_1)
    assert var_18 is False


def test_case_196():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_0)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(str_0)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_32 = module_0.deduplicate(bytes_12)
    assert var_32 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_33 = module_0.ends_dentals(bytes_11)
    assert var_33 is False
    str_1 = "1X,mBK\\"
    var_34 = module_0.devoice(str_1)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(str_1)
    assert var_37 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_14)
    var_39 = module_0.ends_with_vowel(var_38)
    assert var_39 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_40 = module_0.devoice(bytes_15)
    var_41 = module_0.ends_with_vowel(var_40)
    assert var_41 is False
    bytes_16 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_42 = module_0.devoice(bytes_16)
    var_43 = module_0.starts_with_vowel(var_40)
    assert var_43 is False
    var_44 = module_0.ends_with_vowel(var_42)
    assert var_44 is False
    var_45 = module_0.deduplicate(var_42)
    assert var_45 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_46 = module_0.ends_dentals(bytes_0)
    assert var_46 is False


def test_case_197():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    str_3 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_3)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.devoice(var_21)
    str_4 = "1X,mBK\\"
    var_28 = module_0.devoice(str_4)
    var_29 = module_0.deduplicate(var_6)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_198():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(var_12)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.ends_with_vowel(var_18)
    assert var_23 is False


def test_case_199():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_12)
    assert var_16 is False


def test_case_200():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False


def test_case_201():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    var_25 = module_0.ends_dentals(bytes_8)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(str_1)
    assert var_26 is False


def test_case_202():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.ends_with_vowel(var_4)
    assert var_9 is False


def test_case_203():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.devoice(bytes_2)


def test_case_204():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_6)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    str_0 = "1X,mBK\\"
    var_24 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_25 = module_0.starts_with_vowel(str_1)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(str_1)
    assert var_28 is False
    str_2 = "K3A!V\x0c#87"
    var_29 = module_0.starts_with_vowel(str_2)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_26)
    assert var_30 is False


def test_case_205():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.devoice(var_12)
    str_2 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_2)
    assert var_19 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    str_3 = "1X,mBK\\"
    var_25 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_25)
    assert var_30 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_9)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_10)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    bytes_11 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_35 = module_0.deduplicate(bytes_11)
    assert var_35 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_36 = module_0.ends_dentals(bytes_10)
    assert var_36 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_13)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    var_41 = module_0.ends_with_vowel(var_39)
    assert var_41 is False
    var_42 = module_0.deduplicate(bytes_12)
    assert var_42 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_43 = module_0.devoice(bytes_14)
    var_44 = module_0.ends_with_vowel(var_43)
    assert var_44 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_45 = module_0.devoice(bytes_15)
    var_46 = module_0.ends_dentals(var_43)
    assert var_46 is False
    var_47 = module_0.ends_dentals(bytes_14)
    assert var_47 is False
    var_48 = module_0.starts_with_vowel(var_12)
    assert var_48 is False


def test_case_206():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_207():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_208():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_22)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.deduplicate(var_30)
    assert var_33 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_26)
    assert var_36 is False


def test_case_209():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(var_5)


def test_case_210():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.devoice(var_15)
    var_17 = module_0.ends_with_vowel(var_12)
    assert var_17 is False


def test_case_211():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.devoice(var_18)
    var_20 = module_0.starts_with_vowel(bytes_1)
    assert var_20 is False


def test_case_212():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_3)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_3)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    var_22 = module_0.ends_dentals(bytes_6)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.deduplicate(bytes_8)
    assert var_28 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.starts_with_vowel(bytes_5)
    assert var_29 is False


def test_case_213():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_0)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.devoice(var_14)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_5)
    assert var_25 is False


def test_case_214():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.deduplicate(var_5)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(var_3)
    assert var_14 is False


def test_case_215():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(bytes_4)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.devoice(var_19)
    var_26 = module_0.ends_dentals(var_10)
    assert var_26 is False


def test_case_216():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.deduplicate(var_5)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    str_2 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_2)
    assert var_19 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_3)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_3)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(bytes_8)
    assert var_32 is False
    var_33 = module_0.deduplicate(bytes_0)
    assert var_33 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_217():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False


def test_case_218():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_5)
    assert var_10 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_11 = module_0.starts_with_vowel(tuple_0)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_3)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_6)
    assert var_15 is False


def test_case_219():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.devoice(var_9)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_0)
    assert var_21 is False


def test_case_220():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    var_13 = module_0.ends_dentals(var_3)
    assert var_13 is False


def test_case_221():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.deduplicate(var_10)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_222():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_0)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_0)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    var_25 = module_0.ends_dentals(bytes_6)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_27)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    list_0 = [var_30]
    tuple_0 = (var_1, var_17, list_0, var_1)
    var_31 = module_0.devoice(tuple_0)


def test_case_223():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.deduplicate(var_5)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.devoice(var_18)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(bytes_9)
    assert var_35 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_11)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_12)
    var_39 = module_0.ends_dentals(var_36)
    assert var_39 is False
    var_40 = module_0.deduplicate(var_27)
    assert var_40 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_224():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False


def test_case_225():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.deduplicate(var_24)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.deduplicate(var_21)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_226():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.ends_with_vowel(bytes_0)
    assert var_8 is False


def test_case_227():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)


def test_case_228():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_6)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_14)
    assert var_19 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_1)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_10)
    assert var_25 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.ends_dentals(bytes_9)
    assert var_26 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_2)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(str_2)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(bytes_6)
    assert var_29 is False


def test_case_229():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.deduplicate(var_11)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_9)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_10)
    var_24 = module_0.ends_dentals(var_7)
    assert var_24 is False


def test_case_230():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_15)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.devoice(var_30)
    var_32 = module_0.deduplicate(var_15)
    assert var_32 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_231():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_3)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_4)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_6)
    assert var_9 is False


def test_case_232():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.devoice(var_12)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_8)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.starts_with_vowel(var_20)
    assert var_21 is False
    str_0 = "1X,mBK\\"
    var_22 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_23 = module_0.starts_with_vowel(str_1)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(str_1)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.deduplicate(bytes_12)
    assert var_31 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_32 = module_0.ends_dentals(bytes_11)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_14)
    var_36 = module_0.starts_with_vowel(var_33)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_35)
    assert var_37 is False
    var_38 = module_0.deduplicate(var_35)
    assert var_38 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_15)
    var_40 = module_0.ends_with_vowel(var_39)
    assert var_40 is False
    bytes_16 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_41 = module_0.devoice(bytes_16)
    var_42 = module_0.ends_dentals(var_39)
    assert var_42 is False
    var_43 = module_0.ends_with_vowel(var_41)
    assert var_43 is False
    var_44 = module_0.starts_with_vowel(var_19)
    assert var_44 is False


def test_case_233():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.devoice(var_8)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.deduplicate(var_16)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.starts_with_vowel(var_16)
    assert var_23 is False


def test_case_234():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.devoice(var_9)
    var_16 = module_0.devoice(var_14)


def test_case_235():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_9)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_4)
    assert var_18 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.starts_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_21)
    assert var_26 is False


def test_case_236():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    str_1 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.devoice(var_15)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.starts_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_2)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_237():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.starts_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.devoice(var_16)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.deduplicate(var_25)
    assert var_28 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.deduplicate(bytes_3)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_238():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.deduplicate(var_7)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_239():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_240():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_6)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_7)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.devoice(var_2)


def test_case_241():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_9)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_10)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_11)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.devoice(var_27)
    var_29 = module_0.devoice(bytes_9)


def test_case_242():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_243():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_244():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.starts_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_8)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_10)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    bytes_11 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_11)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.devoice(bytes_11)
    str_1 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_1)
    assert var_27 is False
    str_2 = "Ba"
    var_28 = module_0.devoice(str_2)


def test_case_245():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_6)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_6)
    assert var_17 is False


def test_case_246():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_2)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_5)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_6)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_7)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_17 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.deduplicate(var_24)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.starts_with_vowel(var_29)
    assert var_31 is False


def test_case_247():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(bytes_4)
    assert var_18 is False


def test_case_248():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_0)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_0)
    assert var_23 is False
    str_1 = "`<)4H\rS\x0c"
    var_24 = module_0.ends_dentals(str_1)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.deduplicate(bytes_10)
    assert var_29 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.ends_dentals(bytes_9)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    var_34 = module_0.ends_dentals(var_32)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_13)
    assert var_35 is False


def test_case_249():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.devoice(var_18)
    var_20 = module_0.devoice(var_13)


def test_case_250():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.deduplicate(var_14)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    str_0 = "\\Z8@Jg"
    var_26 = module_0.ends_with_vowel(str_0)
    assert var_26 is False
    var_27 = module_0.ends_dentals(bytes_1)
    assert var_27 is False


def test_case_251():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False


def test_case_252():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_8)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_10)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    str_0 = "1X,mBK\\"
    var_23 = module_0.devoice(str_0)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_11)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_12)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_23)
    assert var_28 is False
    var_29 = module_0.devoice(var_24)


def test_case_253():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_2)
    assert var_8 is False
    str_3 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_2)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False


def test_case_254():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.devoice(var_21)
    var_23 = module_0.starts_with_vowel(var_16)
    assert var_23 is False


def test_case_255():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_7)
    assert var_13 is False


def test_case_256():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_2)
    assert var_7 is False


def test_case_257():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    str_1 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_9)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.ends_dentals(bytes_8)
    assert var_25 is False
    var_26 = module_0.deduplicate(str_1)
    assert var_26 == "`<)4H\rS\x0c"


def test_case_258():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.devoice(var_22)
    str_1 = "\\Z8@Jg"
    var_24 = module_0.ends_with_vowel(str_1)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_5)
    assert var_25 is False


def test_case_259():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_1)
    str_0 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    str_2 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.devoice(var_19)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.devoice(bytes_8)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_3)
    assert var_27 is False
    bytes_9 = b"^\xd5\xd00{J"
    var_28 = module_0.starts_with_vowel(bytes_9)
    assert var_28 is False


def test_case_260():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_0)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_0)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(var_21)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_dentals(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_34 = module_0.ends_with_vowel(str_1)
    assert var_34 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.starts_with_vowel(var_35)
    assert var_38 is False
    str_2 = "1X,mBK\\"
    var_39 = module_0.devoice(str_2)
    var_40 = module_0.ends_dentals(str_2)
    assert var_40 is False
    var_41 = module_0.ends_dentals(str_1)
    assert var_41 is False


def test_case_261():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"


def test_case_262():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    str_0 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_7)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_25 = module_0.devoice(str_1)
    var_26 = module_0.ends_dentals(str_1)
    assert var_26 is False
    var_27 = module_0.ends_dentals(bytes_2)
    assert var_27 is False


def test_case_263():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False


def test_case_264():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_265():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_0)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    str_1 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.deduplicate(bytes_7)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(bytes_9)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    var_36 = module_0.ends_dentals(var_33)
    assert var_36 is False
    bytes_13 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_37 = module_0.deduplicate(bytes_13)
    assert var_37 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_38 = module_0.devoice(bytes_13)
    str_2 = "1X,mBK\\"
    var_39 = module_0.devoice(str_2)
    var_40 = module_0.ends_dentals(str_2)
    assert var_40 is False
    var_41 = module_0.ends_dentals(var_39)
    assert var_41 is False


def test_case_266():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.deduplicate(var_5)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_267():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_dentals(var_2)
    assert var_6 is False


def test_case_268():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_4)
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_8)
    assert var_18 is False


def test_case_269():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False


def test_case_270():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_6 = module_0.deduplicate(dict_0)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_7)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_2)
    assert var_26 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.deduplicate(bytes_8)
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.ends_dentals(var_16)
    assert var_29 is False


def test_case_271():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_9)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(bytes_8)
    assert var_23 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_10)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.deduplicate(var_24)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.ends_dentals(var_31)
    assert var_34 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_14)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_15)
    var_38 = module_0.ends_dentals(var_35)
    assert var_38 is False
    bytes_16 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_39 = module_0.deduplicate(bytes_16)
    assert var_39 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_40 = module_0.devoice(bytes_16)
    var_41 = module_0.ends_with_vowel(var_10)
    assert var_41 is False


def test_case_272():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False


def test_case_273():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_7)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_8)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_11)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.deduplicate(var_27)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.ends_dentals(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_31)
    assert var_36 is False


def test_case_274():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_1)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_6)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.devoice(var_24)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.devoice(bytes_11)
    var_37 = module_0.deduplicate(var_31)
    assert var_37 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.deduplicate(bytes_0)
    assert var_38 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_275():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_12 = module_0.starts_with_vowel(tuple_1)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(tuple_1)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_1)


def test_case_276():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.deduplicate(var_6)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.devoice(var_18)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_22 = module_0.starts_with_vowel(tuple_0)
    assert var_22 is False
    str_0 = "\\Z8@Jg"
    var_23 = module_0.ends_with_vowel(str_0)
    assert var_23 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.starts_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.devoice(var_18)


def test_case_277():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_7)
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    var_15 = module_0.ends_dentals(str_0)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_5)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_6)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.deduplicate(bytes_7)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_34 = module_0.starts_with_vowel(tuple_0)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(tuple_0)
    assert var_35 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_11)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_12)
    var_39 = module_0.starts_with_vowel(var_36)
    assert var_39 is False
    var_40 = module_0.ends_with_vowel(var_38)
    assert var_40 is False
    var_41 = module_0.devoice(bytes_12)
    var_42 = module_0.deduplicate(var_36)
    assert var_42 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_43 = module_0.ends_with_vowel(str_1)
    assert var_43 is False
    var_44 = module_0.starts_with_vowel(str_1)
    assert var_44 is False
    var_45 = module_0.ends_with_vowel(var_6)
    assert var_45 is False


def test_case_278():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_8)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_279():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_1)
    assert var_7 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_dentals(bytes_4)
    assert var_15 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_16 = module_0.starts_with_vowel(tuple_0)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_14)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_280():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"


def test_case_281():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_282():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_0)
    assert var_10 is False


def test_case_283():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_12 = module_0.devoice(tuple_0)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_0)
    assert var_14 == "K3A!V\x0c#87"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(bytes_6)
    assert var_25 is False


def test_case_284():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_285():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_6)
    assert var_12 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_0)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_14)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(bytes_8)
    assert var_20 is False


def test_case_286():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False


def test_case_287():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_288():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_3)
    assert var_21 is False


def test_case_289():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_4)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_0)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_290():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    dict_0 = {}
    var_5 = module_0.deduplicate(dict_0)
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_2)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    str_3 = "%OJ<'vPCn@4"
    var_11 = module_0.deduplicate(str_3)
    var_12 = module_0.ends_dentals(str_3)
    assert var_12 is False


def test_case_291():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    str_0 = "`<)4H\rS\x0c"
    var_5 = module_0.ends_dentals(str_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_292():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_1)
    assert var_5 is False
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.deduplicate(dict_0)
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.devoice(var_17)
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    str_4 = "1X,mBK\\"
    var_25 = module_0.devoice(str_4)
    var_26 = module_0.ends_dentals(str_4)
    assert var_26 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_5)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(str_5)
    assert var_28 is False
    str_6 = "\\Z8@Jg"
    var_29 = module_0.ends_with_vowel(str_6)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_18)
    assert var_30 is False


def test_case_293():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_5)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_6)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_7)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    str_0 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_0)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_5)
    assert var_16 is False


def test_case_294():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_17)
    str_2 = "1X,mBK\\"
    var_24 = module_0.devoice(str_2)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(str_2)
    assert var_27 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_28 = module_0.ends_with_vowel(bytes_9)
    assert var_28 is False
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.deduplicate(bytes_10)
    assert var_29 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    str_3 = "K3A!V\x0c#87"
    var_32 = module_0.starts_with_vowel(str_3)
    assert var_32 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_33 = module_0.ends_with_vowel(str_4)
    assert var_33 is False
    var_34 = module_0.ends_dentals(str_3)
    assert var_34 is False
    var_35 = module_0.devoice(var_3)


def test_case_295():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    str_0 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    str_1 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_1)
    assert var_5 == "%OJ<'vPCn@4"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    var_16 = module_0.ends_dentals(str_3)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.deduplicate(var_19)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_dentals(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.devoice(bytes_11)
    var_37 = module_0.devoice(var_36)
    var_38 = module_0.deduplicate(var_7)
    assert var_38 == "1X,mBK\\"


def test_case_296():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_5)
    assert var_11 is False
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    var_27 = module_0.devoice(var_2)


def test_case_297():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_1)
    dict_0 = {}
    var_7 = module_0.deduplicate(dict_0)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False
    str_3 = "1X,mBK\\"
    var_20 = module_0.devoice(str_3)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.devoice(var_21)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.devoice(var_21)


def test_case_298():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    str_2 = "\\Z8@Jg"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_17)
    var_24 = module_0.devoice(var_13)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_299():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_1)


def test_case_300():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.devoice(var_16)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_0)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_0)
    assert var_19 is False
    str_1 = "\\Z8@Jg"
    var_20 = module_0.ends_with_vowel(str_1)
    assert var_20 is False
    var_21 = module_0.devoice(var_3)


def test_case_301():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_0)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_1)
    var_12 = module_0.devoice(tuple_0)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    str_4 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_4)
    assert var_14 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_3)
    var_21 = module_0.devoice(var_15)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_4)
    var_23 = module_0.devoice(bytes_4)
    var_24 = module_0.deduplicate(bytes_1)


def test_case_302():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    str_3 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_3)
    assert var_6 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_7 = module_0.devoice(tuple_0)
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    str_5 = "1X,mBK\\"
    var_9 = module_0.devoice(str_5)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_5)
    assert var_12 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_4)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_4)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_5)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.devoice(var_27)
    str_6 = "1X,mBK\\"
    var_29 = module_0.devoice(str_6)
    var_30 = module_0.deduplicate(bytes_7)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_303():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    str_2 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_2)
    assert var_24 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_25 = module_0.devoice(tuple_0)
    var_26 = module_0.ends_dentals(var_25)
    assert var_26 is False
    var_27 = module_0.deduplicate(str_2)
    assert var_27 == "K3A!V\x0c#87"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.devoice(var_15)


def test_case_304():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_1)
    assert var_12 is False


def test_case_305():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_3 = module_0.devoice(dict_0)
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    str_3 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_3)
    assert var_12 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_1)
    var_13 = module_0.devoice(tuple_0)
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    var_15 = module_0.deduplicate(str_3)
    assert var_15 == "K3A!V\x0c#87"
    str_5 = "`<)4H\rS\x0c"
    var_16 = module_0.ends_dentals(str_5)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(tuple_0)
    assert var_19 is False


def test_case_306():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    var_22 = module_0.ends_dentals(bytes_7)
    assert var_22 is False
    dict_0 = {}
    var_23 = module_0.devoice(dict_0)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.deduplicate(var_24)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_31 = module_0.devoice(str_1)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    var_34 = module_0.deduplicate(bytes_3)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_307():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_3)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_6)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_dentals(var_25)
    assert var_28 is False
    var_29 = module_0.ends_dentals(bytes_8)
    assert var_29 is False
    str_3 = "K3A!V\x0c#87"
    var_30 = module_0.starts_with_vowel(str_3)
    assert var_30 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_31 = module_0.devoice(tuple_0)
    var_32 = module_0.ends_dentals(var_31)
    assert var_32 is False
    var_33 = module_0.deduplicate(str_3)
    assert var_33 == "K3A!V\x0c#87"
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.deduplicate(bytes_10)
    assert var_34 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_35 = module_0.starts_with_vowel(var_34)
    assert var_35 is False
    str_5 = "`<)4H\rS\x0c"
    var_36 = module_0.ends_dentals(str_5)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_33)
    assert var_37 is False


def test_case_308():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.deduplicate(var_22)
    assert var_28 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_dentals(var_30)
    assert var_32 is False
    var_33 = module_0.deduplicate(var_27)
    assert var_33 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_309():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "K3A!V\x0c#87"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.devoice(var_11)
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_6)
    str_3 = "%OJ<'vPCn@4"
    var_27 = module_0.deduplicate(str_3)
    assert var_27 == "%OJ<'vPCn@4"
    list_0 = [var_6, bytes_0, bytes_5, var_8]
    var_28 = module_0.deduplicate(list_0)


def test_case_310():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.starts_with_vowel(var_2)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    str_2 = "\\Z8@Jg"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_1)
    assert var_10 is False


def test_case_311():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_13)
    assert var_18 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_19 = module_0.devoice(tuple_0)
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    str_3 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_3)
    assert var_21 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.ends_dentals(str_3)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.starts_with_vowel(var_1)
    assert var_25 is False


def test_case_312():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.devoice(str_1)


def test_case_313():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    str_0 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.ends_with_vowel(str_0)
    assert var_18 is False


def test_case_314():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_5)


def test_case_315():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    str_2 = "%OJ<'vPCn@4"
    var_4 = module_0.deduplicate(str_2)
    assert var_4 == "%OJ<'vPCn@4"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    str_3 = "`<)4H\rS\x0c"
    var_10 = module_0.ends_dentals(str_3)
    assert var_10 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_11 = module_0.starts_with_vowel(tuple_1)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(tuple_1)
    assert var_12 is False
    dict_1 = {}
    var_13 = module_0.devoice(dict_1)
    str_4 = "1X,mBK\\"
    var_14 = module_0.devoice(str_4)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_14)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_5)
    var_26 = module_0.deduplicate(var_20)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_5 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_5)
    assert var_27 is False
    var_28 = module_0.devoice(var_13)


def test_case_316():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_1)
    assert var_9 is False
    str_2 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_3)
    assert var_11 is False
    str_4 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_4)
    assert var_12 is False
    var_13 = module_0.devoice(var_5)


def test_case_317():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_1)
    assert var_8 is False


def test_case_318():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.deduplicate(dict_0)
    dict_1 = {}
    var_8 = module_0.devoice(dict_1)
    var_9 = module_0.ends_dentals(var_2)
    assert var_9 is False


def test_case_319():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    var_24 = module_0.devoice(var_19)


def test_case_320():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_321():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_12 = module_0.devoice(tuple_0)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_0)
    assert var_14 == "K3A!V\x0c#87"
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_15)
    assert var_20 is False
    var_21 = module_0.deduplicate(var_12)


def test_case_322():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_323():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_7)
    assert var_19 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_20 = module_0.starts_with_vowel(tuple_0)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(tuple_0)
    assert var_21 is False
    var_22 = module_0.deduplicate(bytes_1)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_324():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    str_0 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_0)
    assert var_16 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_1 = (str_1, bool_0, dict_0)
    var_17 = module_0.devoice(tuple_1)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(str_0)
    assert var_19 == "K3A!V\x0c#87"
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.starts_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.devoice(var_5)


def test_case_325():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(var_12)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.deduplicate(var_9)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_326():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_327():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    str_1 = "\\Z8@Jg"
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_5)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_328():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_0)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_7)
    assert var_16 is False


def test_case_329():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_1)
    assert var_3 is False
    str_1 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.devoice(str_0)
    assert var_5 == "Kd tt@\x0c9{k:|lpK9"


def test_case_330():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.devoice(var_2)


def test_case_331():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.deduplicate(str_1)
    assert var_8 == "K3A!V\x0c#87"


def test_case_332():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_2 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_2)
    assert var_6 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_3)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_dentals(var_2)
    assert var_11 is False


def test_case_333():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.deduplicate(var_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    str_3 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_3)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_6)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_1)
    assert var_25 is False


def test_case_334():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    dict_1 = {}
    var_5 = module_0.devoice(dict_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    str_1 = "1X,mBK\\"
    var_11 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_4)
    assert var_16 is False


def test_case_335():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_0)
    assert var_8 is False


def test_case_336():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    str_1 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_18 = module_0.starts_with_vowel(tuple_0)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(tuple_0)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_25 = module_0.starts_with_vowel(tuple_1)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_20)
    assert var_26 is False


def test_case_337():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    str_2 = "\\Z8@Jg"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    str_3 = "%OJ<'vPCn@4"
    var_17 = module_0.deduplicate(str_3)
    assert var_17 == "%OJ<'vPCn@4"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.deduplicate(var_18)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_0)
    assert var_28 is False


def test_case_338():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_2)
    assert var_4 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_5 = module_0.ends_with_vowel(tuple_0)
    assert var_5 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    str_3 = "1X,mBK\\"
    var_11 = module_0.devoice(str_3)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_3)
    str_4 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_4)
    assert var_16 is False
    str_5 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_5: bool_0, bool_0: str_5}
    tuple_1 = (str_5, bool_0, dict_0)
    var_17 = module_0.devoice(tuple_1)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(str_4)
    assert var_19 == "K3A!V\x0c#87"
    var_20 = module_0.deduplicate(str_2)
    assert var_20 == "K3A!V\x0c#87"


def test_case_339():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False


def test_case_340():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"


def test_case_341():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_2)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_3)
    assert var_4 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    str_4 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_4)
    assert var_9 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(bytes_0)
    assert var_13 is False


def test_case_342():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_9)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_2)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_2)
    assert var_23 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.devoice(bytes_8)
    str_3 = "1X,mBK\\"
    var_26 = module_0.devoice(str_3)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.starts_with_vowel(var_26)
    assert var_31 is False
    bytes_11 = b"`\xf7}\x8aT\x95\xd34\xa69\xaa\xe4*"
    var_32 = module_0.starts_with_vowel(bytes_11)
    assert var_32 is False


def test_case_343():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)


def test_case_344():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False


def test_case_345():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.deduplicate(var_5)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_14)
    assert var_16 is False


def test_case_346():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_6)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.deduplicate(var_15)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "ORrJ2:"
    var_22 = module_0.starts_with_vowel(str_0)
    assert var_22 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_23 = module_0.starts_with_vowel(tuple_0)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_dentals(bytes_9)
    assert var_28 is False
    bytes_11 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.deduplicate(bytes_11)
    assert var_29 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = "1X,mBK\\"
    var_30 = module_0.devoice(str_1)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.devoice(var_31)
    var_38 = module_0.deduplicate(var_17)
    assert var_38 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_347():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    str_0 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_0)
    assert var_10 is False


def test_case_348():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_4 = module_0.starts_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(bytes_1)
    assert var_5 is False


def test_case_349():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False
    str_1 = "\\Z8@Jg"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    var_10 = module_0.ends_dentals(str_2)
    assert var_10 is False
    var_11 = module_0.devoice(str_1)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_5)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.devoice(str_0)


def test_case_350():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_351():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False


def test_case_352():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    dict_1 = {}
    var_11 = module_0.deduplicate(dict_1)
    var_12 = module_0.deduplicate(var_7)


def test_case_353():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "%OJ<'vPCn@4"
    var_1 = module_0.deduplicate(str_1)
    assert var_1 == "%OJ<'vPCn@4"
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_1)
    assert var_9 is False
    str_2 = "\\Z8@Jg"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    str_3 = "1X,mBK\\"
    var_11 = module_0.devoice(str_3)
    var_12 = module_0.ends_dentals(str_3)
    assert var_12 is False
    var_13 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.devoice(var_19)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_4)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.devoice(var_13)


def test_case_354():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False


def test_case_355():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    dict_0 = {}
    var_3 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    var_9 = module_0.devoice(bytes_3)
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    var_13 = module_0.devoice(var_0)


def test_case_356():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_14 = module_0.ends_dentals(list_0)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_16 = module_0.starts_with_vowel(tuple_1)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    str_4 = "\\Z8@Jg"
    var_23 = module_0.ends_with_vowel(str_4)
    assert var_23 is False
    str_5 = "1X,mBK\\"
    var_24 = module_0.devoice(str_5)
    var_25 = module_0.ends_dentals(str_5)
    assert var_25 is False
    var_26 = module_0.devoice(str_4)
    var_27 = module_0.devoice(bytes_1)


def test_case_357():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    var_8 = module_0.devoice(var_6)
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(bytes_1)
    assert var_12 is False


def test_case_358():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.starts_with_vowel(var_2)
    assert var_3 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    str_2 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_3)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    str_4 = "1X,mBK\\"
    var_9 = module_0.devoice(str_4)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    str_5 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_5)
    assert var_14 is False
    str_6 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_6)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_5)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_0)
    assert var_20 is False


def test_case_359():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False


def test_case_360():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "`<)4H\rS\x0c"
    var_5 = module_0.ends_dentals(str_2)
    assert var_5 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False


def test_case_361():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_2)
    assert var_4 is False
    str_3 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_3)
    assert var_5 is False
    str_4 = "1X,mBK\\"
    var_6 = module_0.devoice(str_4)
    assert var_6 == "1X,mBK\\"
    var_7 = module_0.ends_dentals(str_4)
    assert var_7 is False
    var_8 = module_0.devoice(str_3)
    assert var_8 == "\\Z8@Jg"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_0)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    str_5 = "1X,mBK\\"
    var_12 = module_0.devoice(str_5)
    var_13 = module_0.ends_dentals(str_5)
    assert var_13 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False


def test_case_362():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_0)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_22 = module_0.ends_dentals(list_0)
    assert var_22 is False
    str_2 = "`<)4H\rS\x0c"
    var_23 = module_0.ends_dentals(str_2)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.devoice(var_6)


def test_case_363():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_4 = module_0.ends_dentals(list_0)
    assert var_4 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.devoice(var_10)
    str_3 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_3)
    assert var_12 == "%OJ<'vPCn@4"
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_1 = [set_1, str_4, str_4]
    var_13 = module_0.ends_dentals(list_1)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_4)
    assert var_14 is False
    var_15 = module_0.devoice(var_5)


def test_case_364():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_4 = module_0.starts_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(tuple_0)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    str_3 = "<aI)>kV,OglI~"
    var_9 = module_0.devoice(str_3)


def test_case_365():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_0)
    assert var_15 is False


def test_case_366():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_1 = (str_1, bool_0, dict_0)
    var_2 = module_0.devoice(tuple_1)
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_3)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_3)
    assert var_13 is False
    str_4 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_4)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_3)
    assert var_19 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_5)
    assert var_20 is False
    str_5 = "1X,mBK\\"
    var_21 = module_0.devoice(str_5)
    var_22 = module_0.ends_dentals(str_5)
    assert var_22 is False
    var_23 = module_0.devoice(var_21)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_7)
    var_30 = module_0.devoice(var_29)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_8)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_9)
    var_34 = module_0.ends_dentals(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_10)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_11)
    var_39 = module_0.starts_with_vowel(var_36)
    assert var_39 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_40 = module_0.deduplicate(bytes_12)
    assert var_40 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_41 = module_0.ends_dentals(bytes_11)
    assert var_41 is False
    var_42 = module_0.ends_dentals(var_26)
    assert var_42 is False


def test_case_367():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.deduplicate(var_2)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_368():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(var_4)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "@"
    var_8 = module_0.deduplicate(str_0)
    assert var_8 == "@"


def test_case_369():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    set_0 = set()
    tuple_0 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(var_11)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_0)
    assert var_15 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_1 = (str_1, bool_0, dict_1)
    var_16 = module_0.devoice(tuple_1)
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    var_18 = module_0.deduplicate(str_0)
    assert var_18 == "K3A!V\x0c#87"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_2, str_2, str_2}
    list_0 = [set_1, str_2, str_2]
    var_19 = module_0.ends_dentals(list_0)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(str_2)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(list_0)
    assert var_21 is False
    var_22 = module_0.deduplicate(dict_0)


def test_case_370():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_2)
    assert var_13 is False


def test_case_371():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    str_3 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_3)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    str_4 = "1X,mBK\\"
    var_17 = module_0.devoice(str_4)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_9)
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.deduplicate(bytes_10)
    assert var_29 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_30 = module_0.starts_with_vowel(var_29)
    assert var_30 is False
    str_5 = "1X,mBK\\"
    var_31 = module_0.devoice(str_5)
    str_6 = "K3A!V\x0c#87"
    var_32 = module_0.starts_with_vowel(str_6)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    var_35 = module_0.starts_with_vowel(str_6)
    assert var_35 is False
    var_36 = module_0.deduplicate(bytes_9)
    assert var_36 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_372():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_4 = module_0.ends_dentals(list_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_1)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(list_0)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    assert var_7 == "1X,mBK\\"
    str_3 = "`<)4H\rS\x0c"
    var_8 = module_0.ends_dentals(str_3)
    assert var_8 is False
    str_4 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_4)
    assert var_9 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_5)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_4)
    assert var_11 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_1)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_1)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    str_6 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_6, str_6, str_6}
    list_1 = [set_1, str_6, str_6]
    var_17 = module_0.ends_dentals(list_1)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_6)
    assert var_18 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_3)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_4)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_1)


def test_case_373():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.deduplicate(var_4)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(list_0)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_18 = module_0.ends_dentals(list_1)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.devoice(var_24)
    var_26 = module_0.devoice(var_6)


def test_case_374():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(bytes_4)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_6)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_2)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_375():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_2)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    str_3 = "1X,mBK\\"
    var_4 = module_0.devoice(str_3)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_4)
    assert var_6 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    str_4 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_4)
    assert var_8 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_5)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_4)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_0)
    assert var_11 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_1)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_1)
    assert var_16 is False
    str_6 = "1X,mBK\\"
    var_17 = module_0.devoice(str_6)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_3)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    str_7 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_7)
    assert var_23 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_5)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.devoice(bytes_5)
    str_8 = "1X,mBK\\"
    var_26 = module_0.devoice(str_8)
    str_9 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_9)
    assert var_27 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_6)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(str_9)
    assert var_30 is False
    var_31 = module_0.deduplicate(var_18)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_376():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_7)
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_21 = module_0.ends_dentals(list_0)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    str_4 = "\\Z8@Jg"
    var_27 = module_0.ends_with_vowel(str_4)
    assert var_27 is False
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_10)
    assert var_28 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(bytes_1)
    assert var_31 is False


def test_case_377():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_3)
    assert var_8 is False
    str_1 = "ORrJ2:"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False


def test_case_378():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_12)
    str_0 = "\\Z8@Jg"
    var_14 = module_0.ends_with_vowel(str_0)
    assert var_14 is False
    str_1 = "1X,mBK\\"
    var_15 = module_0.devoice(str_1)
    var_16 = module_0.ends_dentals(str_1)
    assert var_16 is False
    var_17 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    str_2 = "\\Z8@Jg"
    var_20 = module_0.ends_with_vowel(str_2)
    assert var_20 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    str_4 = "1X,mBK\\"
    var_22 = module_0.devoice(str_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_5)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(str_4)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_0)


def test_case_379():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    str_3 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_3)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_9)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_2)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_380():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    str_2 = "1X,mBK\\"
    var_2 = module_0.devoice(str_2)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.devoice(var_2)


def test_case_381():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_0 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_6 = module_0.devoice(tuple_0)
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    var_8 = module_0.deduplicate(str_0)
    assert var_8 == "K3A!V\x0c#87"
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_9 = module_0.starts_with_vowel(tuple_1)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(tuple_1)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.deduplicate(var_17)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_24 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_dentals(var_25)
    assert var_28 is False
    str_3 = "1X,mBK\\"
    var_29 = module_0.devoice(str_3)
    str_4 = "K3A!V\x0c#87"
    var_30 = module_0.starts_with_vowel(str_4)
    assert var_30 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_9)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    var_33 = module_0.starts_with_vowel(str_4)
    assert var_33 is False
    str_5 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_5, str_5, str_5}
    list_0 = [set_0, str_5, str_5]
    var_34 = module_0.ends_dentals(list_0)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(str_5)
    assert var_35 is False
    str_6 = "\\Z8@Jg"
    var_36 = module_0.ends_with_vowel(str_6)
    assert var_36 is False
    str_7 = "1X,mBK\\"
    var_37 = module_0.devoice(str_7)
    var_38 = module_0.ends_dentals(str_7)
    assert var_38 is False
    var_39 = module_0.devoice(str_6)
    var_40 = module_0.ends_with_vowel(var_27)
    assert var_40 is False


def test_case_382():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    dict_0 = {}
    var_5 = module_0.deduplicate(dict_0)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    var_17 = module_0.ends_dentals(str_2)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_16)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_7)
    var_22 = module_0.starts_with_vowel(bytes_5)
    assert var_22 is False


def test_case_383():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_1)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_384():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    dict_0 = {}
    var_5 = module_0.deduplicate(dict_0)
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False


def test_case_385():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_0)
    assert var_6 == "%OJ<'vPCn@4"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False


def test_case_386():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    set_0 = set()
    tuple_0 = (set_0,)
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    str_0 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_0)
    assert var_13 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_0)
    assert var_15 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.devoice(var_18)
    var_25 = module_0.deduplicate(bytes_4)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_387():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(bytes_3)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_0)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_388():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    str_2 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_2)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_2)
    assert var_5 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    var_8 = module_0.ends_dentals(str_3)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    set_0 = set()
    tuple_0 = (set_0,)
    var_10 = module_0.ends_with_vowel(tuple_0)
    assert var_10 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    str_4 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_4)
    assert var_12 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_5)
    assert var_13 is False
    var_14 = module_0.ends_dentals(str_4)
    assert var_14 is False
    var_15 = module_0.ends_dentals(bytes_2)
    assert var_15 is False
    str_6 = "1X,mBK\\"
    var_16 = module_0.devoice(str_6)
    var_17 = module_0.ends_dentals(str_6)
    assert var_17 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_3)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    str_7 = "`<)4H\rS\x0c"
    var_22 = module_0.ends_dentals(str_7)
    assert var_22 is False
    var_23 = module_0.devoice(var_20)


def test_case_389():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_0)


def test_case_390():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.devoice(var_2)
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_23 = module_0.devoice(tuple_0)
    var_24 = module_0.ends_dentals(var_23)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(str_3)
    assert var_25 is False


def test_case_391():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"


def test_case_392():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False


def test_case_393():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False


def test_case_394():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_0)
    assert var_9 is False


def test_case_395():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_0)


def test_case_396():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(str_0)
    assert var_4 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    var_9 = module_0.devoice(var_2)
    assert var_9 == "1X,mBK\\"


def test_case_397():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    str_0 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_6 = module_0.devoice(tuple_0)
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    var_8 = module_0.deduplicate(str_0)
    assert var_8 == "K3A!V\x0c#87"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_9 = module_0.ends_dentals(list_0)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_0)
    assert var_11 is False


def test_case_398():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.devoice(var_8)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_10 = module_0.ends_dentals(list_0)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(list_0)
    assert var_12 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_15 = module_0.devoice(tuple_0)
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    var_17 = module_0.deduplicate(str_2)
    assert var_17 == "K3A!V\x0c#87"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_3)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_22 = module_0.ends_with_vowel(bytes_5)
    assert var_22 is False
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    var_24 = module_0.ends_dentals(str_4)
    assert var_24 is False
    var_25 = module_0.devoice(var_23)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_6)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_7)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.deduplicate(bytes_6)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    set_1 = set()
    tuple_1 = (set_1,)
    var_32 = module_0.ends_with_vowel(tuple_1)
    assert var_32 is False
    float_0 = -1663.70075
    tuple_2 = (float_0,)
    var_33 = module_0.starts_with_vowel(tuple_2)
    assert var_33 is False
    var_34 = module_0.devoice(str_1)


def test_case_399():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_1 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "%OJ<'vPCn@4"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_17 = module_0.devoice(tuple_0)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(str_2)
    assert var_19 == "K3A!V\x0c#87"
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False


def test_case_400():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "%OJ<'vPCn@4"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.deduplicate(var_14)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.deduplicate(var_0)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_401():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_5)
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    var_13 = module_0.ends_dentals(str_1)
    assert var_13 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.starts_with_vowel(var_7)
    assert var_21 is False


def test_case_402():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.devoice(var_8)
    str_1 = "%OJ<'vPCn@4"
    var_15 = module_0.deduplicate(str_1)
    assert var_15 == "%OJ<'vPCn@4"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_16 = module_0.ends_dentals(list_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_2)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(list_0)
    assert var_18 is False
    str_3 = "`<)4H\rS\x0c"
    var_19 = module_0.ends_dentals(str_3)
    assert var_19 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_4)
    assert var_20 is False
    str_4 = "1X,mBK\\"
    var_21 = module_0.devoice(str_4)
    var_22 = module_0.ends_dentals(str_4)
    assert var_22 is False
    var_23 = module_0.devoice(var_21)
    var_24 = module_0.devoice(var_21)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_5)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.starts_with_vowel(var_25)
    assert var_26 is False
    dict_0 = {}
    var_27 = module_0.deduplicate(dict_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_6)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_7)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.deduplicate(bytes_6)
    str_5 = "\\Z8@Jg"
    var_34 = module_0.ends_with_vowel(str_5)
    assert var_34 is False
    str_6 = "1X,mBK\\"
    var_35 = module_0.devoice(str_6)
    var_36 = module_0.ends_dentals(str_6)
    assert var_36 is False
    var_37 = module_0.devoice(str_5)
    var_38 = module_0.ends_dentals(var_30)
    assert var_38 is False


def test_case_403():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    str_1 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "`<)4H\rS\x0c"
    var_5 = module_0.ends_dentals(str_2)
    assert var_5 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    var_8 = module_0.ends_dentals(str_3)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    var_10 = module_0.devoice(var_7)
    str_4 = "1X,mBK\\"
    var_11 = module_0.devoice(str_4)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_11)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(bytes_4)
    assert var_21 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    str_5 = "1X,mBK\\"
    var_23 = module_0.devoice(str_5)
    var_24 = module_0.ends_dentals(str_5)
    assert var_24 is False
    var_25 = module_0.devoice(var_23)
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(bytes_7)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_6 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_6, str_6, str_6}
    list_0 = [set_0, str_6, str_6]
    var_27 = module_0.ends_dentals(list_0)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(str_6)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(list_0)
    assert var_29 is False
    var_30 = module_0.deduplicate(bytes_3)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_404():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_0)


def test_case_405():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    str_2 = "1X,mBK\\"
    var_4 = module_0.devoice(str_2)
    var_5 = module_0.ends_dentals(str_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_4)
    assert var_6 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_0)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    dict_1 = {}
    var_11 = module_0.deduplicate(dict_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(bytes_2)
    assert var_16 is False
    str_3 = "1X,mBK\\"
    var_17 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    str_5 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_5)
    assert var_24 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(str_5)
    assert var_27 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_7)
    var_29 = module_0.devoice(bytes_7)
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_30 = module_0.starts_with_vowel(tuple_1)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_4)
    assert var_31 is False


def test_case_406():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False


def test_case_407():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_1)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.deduplicate(bytes_8)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "\\Z8@Jg"
    var_31 = module_0.ends_with_vowel(str_3)
    assert var_31 is False
    str_4 = "1X,mBK\\"
    var_32 = module_0.devoice(str_4)
    var_33 = module_0.ends_dentals(str_4)
    assert var_33 is False
    var_34 = module_0.devoice(str_3)
    var_35 = module_0.starts_with_vowel(var_20)
    assert var_35 is False


def test_case_408():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(bytes_2)
    assert var_12 is False
    str_2 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    var_16 = module_0.devoice(str_2)
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_17 = module_0.devoice(tuple_0)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_2)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_409():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    str_1 = "ORrJ2:"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False


def test_case_410():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "K3A!V\x0c#87"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    str_2 = "1X,mBK\\"
    var_17 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_3)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_3)
    assert var_21 is False
    str_4 = "\\Z8@Jg"
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    str_5 = "`<)4H\rS\x0c"
    var_23 = module_0.ends_dentals(str_5)
    assert var_23 is False
    str_6 = "1X,mBK\\"
    var_24 = module_0.devoice(str_6)
    var_25 = module_0.ends_dentals(str_6)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(bytes_5)
    assert var_27 is False


def test_case_411():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    str_2 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.devoice(str_2)
    str_4 = "1X,mBK\\"
    var_16 = module_0.devoice(str_4)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_4)
    assert var_19 is False
    str_5 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_5: bool_0, bool_0: str_5}
    tuple_0 = (str_5, bool_0, dict_0)
    var_20 = module_0.devoice(tuple_0)
    var_21 = module_0.ends_dentals(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.deduplicate(bytes_5)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_6 = "Kd tt@\x0c9{k:|lpK9"
    var_28 = module_0.ends_with_vowel(str_6)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(str_6)
    assert var_29 is False
    var_30 = module_0.deduplicate(str_4)
    assert var_30 == "1X,mBK\\"


def test_case_412():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_1 = module_0.ends_dentals(list_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(list_0)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    dict_0 = {}
    var_14 = module_0.devoice(dict_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_4)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.devoice(var_26)
    str_2 = "1X,mBK\\"
    var_28 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_29 = module_0.starts_with_vowel(str_3)
    assert var_29 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_8)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(str_3)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_27)
    assert var_33 is False


def test_case_413():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    dict_0 = {}
    var_3 = module_0.deduplicate(dict_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    dict_1 = {}
    var_9 = module_0.devoice(dict_1)


def test_case_414():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    str_1 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_1)
    assert var_15 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_dentals(bytes_6)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_11)
    assert var_19 is False


def test_case_415():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.devoice(var_11)
    var_13 = module_0.devoice(var_12)


def test_case_416():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_2)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_15)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_3)
    assert var_19 is False
    var_20 = module_0.deduplicate(var_5)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_417():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "ORrJ2:"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    str_2 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_2)
    assert var_8 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_9 = module_0.devoice(tuple_0)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    var_11 = module_0.deduplicate(str_2)
    assert var_11 == "K3A!V\x0c#87"
    str_4 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_4)
    assert var_12 is False
    str_5 = "1X,mBK\\"
    var_13 = module_0.devoice(str_5)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_5)
    assert var_16 is False
    str_6 = "1X,mBK\\"
    var_17 = module_0.devoice(str_6)
    var_18 = module_0.ends_dentals(str_6)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_17)
    assert var_19 is False
    str_7 = "1X,mBK\\"
    var_20 = module_0.devoice(str_7)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_4)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_5)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_20)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(bytes_3)
    assert var_26 is False


def test_case_418():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False


def test_case_419():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_5)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_5)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_6)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_7)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_7)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_15 = module_0.ends_dentals(list_0)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_0)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(list_0)
    assert var_17 is False
    dict_0 = {}
    var_18 = module_0.devoice(dict_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(bytes_8)
    assert var_23 is False
    str_1 = "\nUC"
    var_24 = module_0.starts_with_vowel(str_1)
    assert var_24 is False


def test_case_420():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_1 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    var_4 = module_0.ends_dentals(str_2)
    assert var_4 is False
    var_5 = module_0.devoice(str_1)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_1)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "%OJ<'vPCn@4"
    var_21 = module_0.deduplicate(str_3)
    assert var_21 == "%OJ<'vPCn@4"
    str_4 = "\\Z8@Jg"
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_5)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(str_5)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_17)
    assert var_29 is False


def test_case_421():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "`<)4H\rS\x0c"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_2)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.devoice(var_3)
    assert var_6 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_13 = module_0.starts_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(bytes_4)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_7)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_3)
    assert var_26 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.deduplicate(bytes_8)
    assert var_27 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.starts_with_vowel(var_27)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.devoice(bytes_10)
    var_35 = module_0.devoice(var_34)
    var_36 = module_0.ends_dentals(var_7)
    assert var_36 is False


def test_case_422():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "\\Z8@Jg"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(str_0)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_2)
    assert var_12 is False


def test_case_423():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.devoice(var_8)
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.ends_dentals(bytes_5)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_6)


def test_case_424():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_2)
    assert var_9 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_0)


def test_case_425():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(var_1)
    assert var_3 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    str_2 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_2)
    assert var_12 == "%OJ<'vPCn@4"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    dict_0 = {}
    var_15 = module_0.devoice(dict_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.devoice(var_20)
    var_27 = module_0.deduplicate(dict_0)


def test_case_426():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_6)
    str_3 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_3)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    dict_0 = {}
    var_30 = module_0.devoice(dict_0)
    str_4 = "1X,mBK\\"
    var_31 = module_0.devoice(str_4)
    var_32 = module_0.ends_dentals(str_4)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_15)
    assert var_33 is False


def test_case_427():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    str_0 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    var_8 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    dict_0 = {}
    var_13 = module_0.devoice(dict_0)
    str_2 = "\\Z8@Jg"
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_6)
    str_3 = "1X,mBK\\"
    var_21 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    var_34 = module_0.ends_dentals(var_32)
    assert var_34 is False
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_14)
    var_39 = module_0.ends_dentals(var_36)
    assert var_39 is False
    var_40 = module_0.ends_dentals(bytes_13)
    assert var_40 is False
    var_41 = module_0.devoice(var_29)


def test_case_428():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    str_2 = "`<)4H\rS\x0c"
    var_18 = module_0.ends_dentals(str_2)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_7)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(bytes_6)
    assert var_24 is False


def test_case_429():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_7 = module_0.devoice(tuple_0)
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    var_9 = module_0.deduplicate(str_1)
    assert var_9 == "K3A!V\x0c#87"
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_10 = module_0.starts_with_vowel(tuple_1)
    assert var_10 is False
    str_3 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_3)
    assert var_11 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_14)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    var_22 = module_0.ends_dentals(bytes_4)
    assert var_22 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_0 = [set_0, str_4, str_4]
    var_23 = module_0.ends_dentals(list_0)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_4)
    assert var_24 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_6)
    assert var_25 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.deduplicate(bytes_7)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.deduplicate(var_20)
    assert var_32 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_430():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(var_1)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_0)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_4)
    str_3 = "1X,mBK\\"
    var_16 = module_0.devoice(str_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_3)
    assert var_19 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_6)
    assert var_20 is False
    str_4 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_4)
    assert var_21 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_5)
    assert var_22 is False
    var_23 = module_0.ends_dentals(str_4)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_6)
    assert var_24 is False
    str_6 = "1X,mBK\\"
    var_25 = module_0.devoice(str_6)
    str_7 = "K3A!V\x0c#87"
    var_26 = module_0.starts_with_vowel(str_7)
    assert var_26 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_7)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(str_7)
    assert var_29 is False
    bytes_8 = b"\xc1OPS\xcb\xb8\xb4m\xb2\x007\xeb\xec\xa6\xab"
    var_30 = module_0.devoice(bytes_8)


def test_case_431():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False


def test_case_432():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_3)
    assert var_8 is False
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_9)
    assert var_11 is False
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.devoice(var_21)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_7)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.devoice(bytes_7)
    str_3 = "%OJ<'vPCn@4"
    var_25 = module_0.deduplicate(str_3)
    assert var_25 == "%OJ<'vPCn@4"
    set_0 = set()
    tuple_0 = (set_0,)
    var_26 = module_0.ends_with_vowel(tuple_0)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(str_0)
    assert var_27 is False


def test_case_433():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_7)
    dict_0 = {}
    var_14 = module_0.devoice(dict_0)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(var_14)


def test_case_434():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_2 = module_0.devoice(tuple_0)
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    var_4 = module_0.devoice(bytes_0)


def test_case_435():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    dict_0 = {}
    var_9 = module_0.devoice(dict_0)
    str_0 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_0)
    assert var_10 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(str_0)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_7)
    assert var_17 is False


def test_case_436():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.deduplicate(var_8)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "`<)4H\rS\x0c"
    var_15 = module_0.ends_dentals(str_2)
    assert var_15 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    str_3 = "1X,mBK\\"
    var_17 = module_0.devoice(str_3)
    var_18 = module_0.ends_dentals(str_3)
    assert var_18 is False
    var_19 = module_0.devoice(var_17)
    var_20 = module_0.devoice(var_17)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_1 = [set_1, str_4, str_4]
    var_21 = module_0.ends_dentals(list_1)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(list_1)
    assert var_23 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_24 = module_0.ends_with_vowel(bytes_5)
    assert var_24 is False
    str_5 = "K3A!V\x0c#87"
    var_25 = module_0.starts_with_vowel(str_5)
    assert var_25 is False
    str_6 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_6)
    assert var_26 is False
    var_27 = module_0.ends_dentals(str_5)
    assert var_27 is False
    var_28 = module_0.ends_dentals(bytes_5)
    assert var_28 is False
    str_7 = "1X,mBK\\"
    var_29 = module_0.devoice(str_7)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_6)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(str_7)
    assert var_32 is False
    var_33 = module_0.deduplicate(var_19)
    assert var_33 == "1X,mBK\\"


def test_case_437():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.devoice(bytes_2)


def test_case_438():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_439():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    str_3 = "1X,mBK\\"
    var_10 = module_0.devoice(str_3)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_3)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_5)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(bytes_4)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(var_6)


def test_case_440():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_441():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_3 = module_0.devoice(tuple_0)
    var_4 = module_0.ends_dentals(var_3)
    assert var_4 is False
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "K3A!V\x0c#87"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False


def test_case_442():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.devoice(var_8)
    str_0 = "1X,mBK\\"
    var_15 = module_0.devoice(str_0)
    var_16 = module_0.ends_dentals(str_0)
    assert var_16 is False
    str_1 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_18 = module_0.devoice(tuple_0)
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    var_20 = module_0.deduplicate(str_1)
    assert var_20 == "K3A!V\x0c#87"
    str_3 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_3)
    assert var_21 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.ends_dentals(str_3)
    assert var_23 is False
    var_24 = module_0.deduplicate(var_2)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_443():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_7)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_7)
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_19 = module_0.ends_dentals(bytes_8)
    assert var_19 is False
    str_0 = "1X,mBK\\"
    var_20 = module_0.devoice(str_0)
    var_21 = module_0.ends_dentals(str_0)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(bytes_6)
    assert var_22 is False


def test_case_444():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.deduplicate(var_1)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.devoice(var_10)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    str_1 = "%OJ<'vPCn@4"
    var_18 = module_0.deduplicate(str_1)
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_3)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_3)
    assert var_23 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_4)
    assert var_24 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_7)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_30 = module_0.deduplicate(bytes_8)
    var_31 = module_0.starts_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.devoice(var_15)


def test_case_445():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    dict_0 = {}
    var_5 = module_0.devoice(dict_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_15 = module_0.starts_with_vowel(tuple_0)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_7)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_7)
    str_0 = "K3A!V\x0c#87"
    var_22 = module_0.starts_with_vowel(str_0)
    assert var_22 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False
    var_24 = module_0.ends_dentals(str_0)
    assert var_24 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    str_2 = "\\Z8@Jg"
    var_28 = module_0.ends_with_vowel(str_2)
    assert var_28 is False
    str_3 = "1X,mBK\\"
    var_29 = module_0.devoice(str_3)
    var_30 = module_0.ends_dentals(str_3)
    assert var_30 is False
    var_31 = module_0.devoice(str_2)
    var_32 = module_0.ends_dentals(bytes_4)
    assert var_32 is False


def test_case_446():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    dict_0 = {}
    var_11 = module_0.deduplicate(dict_0)
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_12)
    assert var_17 is False
    str_3 = "\\Z8@Jg"
    var_18 = module_0.ends_with_vowel(str_3)
    assert var_18 is False
    var_19 = module_0.ends_dentals(str_0)
    assert var_19 is False


def test_case_447():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(bytes_1)
    assert var_7 is False
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_15 = module_0.starts_with_vowel(tuple_0)
    assert var_15 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_16 = module_0.ends_dentals(bytes_6)
    assert var_16 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_7)
    assert var_17 is False
    str_2 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_3)
    assert var_19 is False
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    var_21 = module_0.ends_dentals(bytes_7)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    str_4 = "1X,mBK\\"
    var_27 = module_0.devoice(str_4)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(var_27)
    assert var_32 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_33 = module_0.ends_with_vowel(str_5)
    assert var_33 is False
    var_34 = module_0.starts_with_vowel(str_5)
    assert var_34 is False
    var_35 = module_0.devoice(bytes_3)


def test_case_448():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)


def test_case_449():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_0)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(bytes_5)
    assert var_15 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_16 = module_0.ends_dentals(list_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(list_0)
    assert var_18 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(var_11)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_450():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_2)


def test_case_451():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    str_1 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_1)
    assert var_9 == "%OJ<'vPCn@4"
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "Kd tt@\x0c9{k:|lpK9"


def test_case_452():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.deduplicate(tuple_0)


def test_case_453():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    str_0 = "ORrJ2:"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_9 = module_0.devoice(tuple_0)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    var_11 = module_0.deduplicate(str_1)
    assert var_11 == "K3A!V\x0c#87"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.devoice(var_11)
    assert var_14 == "K3A!V\x0c#87"


def test_case_454():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.starts_with_vowel(var_6)
    assert var_12 is False


def test_case_455():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_12 = module_0.devoice(tuple_0)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    str_2 = "1X,mBK\\"
    var_14 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_3)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_3)
    assert var_18 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.ends_with_vowel(bytes_6)
    assert var_20 is False
    str_4 = "\\Z8@Jg"
    var_21 = module_0.ends_with_vowel(str_4)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_2)
    assert var_22 is False


def test_case_456():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False


def test_case_457():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_0, str_0, str_0}
    list_0 = [set_1, str_0, str_0]
    var_2 = module_0.ends_dentals(list_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    str_1 = "`<)4H\rS\x0c"
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    var_11 = module_0.ends_dentals(str_2)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    var_13 = module_0.devoice(var_10)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    str_3 = "1X,mBK\\"
    var_18 = module_0.devoice(str_3)
    var_19 = module_0.deduplicate(var_13)
    assert var_19 == "1X,mBK\\"


def test_case_458():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "%OJ<'vPCn@4"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(var_22)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_0)
    assert var_27 is False


def test_case_459():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.devoice(var_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.deduplicate(var_9)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_7)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_7)
    str_0 = "K3A!V\x0c#87"
    var_22 = module_0.starts_with_vowel(str_0)
    assert var_22 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False
    var_24 = module_0.ends_dentals(str_0)
    assert var_24 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    bytes_11 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.deduplicate(bytes_11)
    assert var_30 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.ends_dentals(bytes_10)
    assert var_31 is False
    str_2 = "K3A!V\x0c#87"
    var_32 = module_0.starts_with_vowel(str_2)
    assert var_32 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_33 = module_0.devoice(tuple_0)
    var_34 = module_0.ends_dentals(var_33)
    assert var_34 is False
    var_35 = module_0.deduplicate(str_2)
    assert var_35 == "K3A!V\x0c#87"
    bytes_12 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_36 = module_0.deduplicate(bytes_12)
    assert var_36 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_dentals(bytes_12)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(bytes_12)
    assert var_39 is False


def test_case_460():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"


def test_case_461():
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_462():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.deduplicate(str_2)
    assert var_6 == "Kd tt@\x0c9{k:|lpK9"


def test_case_463():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(var_4)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.devoice(var_14)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_16 = module_0.ends_dentals(list_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_0)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_1)
    assert var_18 is False


def test_case_464():
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    str_0 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_7)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.deduplicate(str_0)
    assert var_17 == "\\Z8@Jg"


def test_case_465():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.devoice(str_0)
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_3)
    assert var_14 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_3)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_4 = "1X,mBK\\"
    var_16 = module_0.devoice(str_4)
    var_17 = module_0.ends_dentals(str_4)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_4)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False


def test_case_466():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False


def test_case_467():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_2 = module_0.devoice(tuple_0)
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_1)
    assert var_4 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.deduplicate(var_12)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_19)
    assert var_21 is False
    dict_1 = {}
    var_22 = module_0.deduplicate(dict_1)
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_23 = module_0.ends_with_vowel(bytes_4)
    assert var_23 is False
    str_4 = "1X,mBK\\"
    var_24 = module_0.devoice(str_4)
    var_25 = module_0.ends_dentals(str_4)
    assert var_25 is False
    var_26 = module_0.devoice(var_24)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_5)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_6)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.deduplicate(var_29)
    var_33 = module_0.deduplicate(var_27)


def test_case_468():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_4 = module_0.starts_with_vowel(tuple_0)
    assert var_4 is False
    str_0 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "%OJ<'vPCn@4"
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_6 = module_0.starts_with_vowel(tuple_1)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_1)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    var_15 = module_0.ends_dentals(tuple_1)
    assert var_15 is False


def test_case_469():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_6)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_6)
    set_0 = set()
    tuple_0 = (set_0,)
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_7)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_9)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(bytes_8)
    assert var_21 is False
    str_1 = "1X,mBK\\"
    var_22 = module_0.devoice(str_1)
    var_23 = module_0.ends_dentals(str_1)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_0)
    assert var_24 == b"=\xc4\xb3D\xea8"
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False


def test_case_470():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_11 = module_0.devoice(tuple_0)
    var_12 = module_0.ends_dentals(var_11)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(bytes_5)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    str_1 = "1X,mBK\\"
    var_21 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_1)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    bytes_11 = b"=\xc4\xb3D\xea8"
    var_29 = module_0.ends_with_vowel(bytes_11)
    assert var_29 is False
    str_2 = "K3A!V\x0c#87"
    var_30 = module_0.starts_with_vowel(str_2)
    assert var_30 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_3)
    assert var_31 is False
    var_32 = module_0.ends_dentals(str_2)
    assert var_32 is False
    var_33 = module_0.ends_dentals(bytes_11)
    assert var_33 is False
    bytes_12 = b"=\xc4\xb3D\xea8"
    var_34 = module_0.ends_with_vowel(bytes_12)
    assert var_34 is False
    str_4 = "1X,mBK\\"
    var_35 = module_0.devoice(str_4)
    var_36 = module_0.ends_dentals(str_4)
    assert var_36 is False
    var_37 = module_0.devoice(var_35)
    var_38 = module_0.ends_with_vowel(str_1)
    assert var_38 is False


def test_case_471():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"dV\xd8n_n\xe0\x87K"
    var_5 = module_0.ends_dentals(bytes_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_14)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_18 = module_0.deduplicate(dict_0)
    var_19 = module_0.devoice(dict_0)


def test_case_472():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_5)
    assert var_9 is False


def test_case_473():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_474():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    dict_0 = {}
    var_10 = module_0.devoice(dict_0)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    var_13 = module_0.ends_dentals(var_5)
    assert var_13 is False


def test_case_475():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_10)
    assert var_12 is False
    bytes_4 = b"dV\xd8n_n\xe0\x87K"
    var_13 = module_0.ends_dentals(bytes_4)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"dV\xd8n_n\xe0\x87K"


def test_case_476():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.deduplicate(var_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_10 = module_0.ends_dentals(list_0)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(list_0)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    bytes_3 = b"dV\xd8n_n\xe0\x87K"
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    str_3 = "\\Z8@Jg"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_3)
    assert var_23 is False


def test_case_477():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_12)
    dict_0 = {}
    var_14 = module_0.deduplicate(dict_0)
    str_2 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_3)
    assert var_16 is False
    var_17 = module_0.ends_dentals(str_2)
    assert var_17 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_0 = [set_0, str_4, str_4]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_4)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_13)
    assert var_25 is False


def test_case_478():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_4)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    str_0 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_0)
    assert var_12 == "K3A!V\x0c#87"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_7)
    assert var_20 is False
    str_3 = "1X,mBK\\"
    var_21 = module_0.devoice(str_3)
    var_22 = module_0.ends_dentals(str_3)
    assert var_22 is False
    var_23 = module_0.devoice(var_21)
    var_24 = module_0.starts_with_vowel(bytes_1)
    assert var_24 is False


def test_case_479():
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_0 = module_0.ends_with_vowel(tuple_1)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_480():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    str_1 = "%OJ<'vPCn@4"
    var_10 = module_0.deduplicate(str_1)
    assert var_10 == "%OJ<'vPCn@4"
    bytes_4 = b"C\xbf\xbc\xe6\xbb\xcemWh\xa3.\xfb\xce@O\xc3\x18\x8cJ\x92"
    var_11 = module_0.starts_with_vowel(bytes_4)
    assert var_11 is False


def test_case_481():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.deduplicate(dict_0)
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_4 = module_0.ends_dentals(list_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(list_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.deduplicate(var_7)
    str_1 = "\\Z8@Jg"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_dentals(bytes_4)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(list_0)
    assert var_21 is False


def test_case_482():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    str_0 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_4)
    assert var_12 is False


def test_case_483():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False


def test_case_484():
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_4)
    assert var_11 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_12 = module_0.ends_dentals(list_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_0)
    assert var_13 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_6)
    assert var_14 is False
    str_1 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    var_17 = module_0.ends_dentals(str_1)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_6)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_4)
    assert var_19 is False


def test_case_485():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)


def test_case_486():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_487():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_3)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.devoice(var_13)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_15 = module_0.ends_dentals(list_0)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    dict_0 = {}
    var_17 = module_0.devoice(dict_0)
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_1 = [tuple_0]
    var_24 = module_0.ends_with_vowel(list_1)
    assert var_24 is False
    str_3 = "1X,mBK\\"
    var_25 = module_0.devoice(str_3)
    var_26 = module_0.ends_dentals(str_3)
    assert var_26 is False
    var_27 = module_0.ends_dentals(str_3)
    assert var_27 is False
    var_28 = module_0.devoice(str_2)


def test_case_488():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    str_1 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_1)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    str_3 = "#iW\rr^3:"
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_8)
    assert var_25 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.ends_dentals(bytes_7)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.devoice(var_28)
    var_35 = module_0.deduplicate(str_2)
    assert var_35 == "Kd tt@\x0c9{k:|lpK9"


def test_case_489():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    list_0 = [bytes_1, bytes_1]
    var_7 = module_0.devoice(list_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(var_3)
    assert var_13 == "K3A!V\x0c#87"


def test_case_490():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_3)
    assert var_6 is False
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_0)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_491():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_2 = module_0.devoice(tuple_0)
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_1)
    assert var_4 == "K3A!V\x0c#87"
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    str_4 = "1X,mBK\\"
    var_7 = module_0.devoice(str_4)
    var_8 = module_0.ends_dentals(str_4)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    var_10 = module_0.ends_dentals(var_4)
    assert var_10 is False


def test_case_492():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    list_0 = [bytes_2, bytes_2]
    var_8 = module_0.devoice(list_0)
    set_0 = set()
    tuple_0 = (set_0,)
    var_9 = module_0.ends_with_vowel(tuple_0)
    assert var_9 is False
    str_2 = "\\Z8@Jg"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    str_3 = "1X,mBK\\"
    var_11 = module_0.devoice(str_3)
    var_12 = module_0.ends_dentals(str_3)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_4)
    var_19 = module_0.devoice(var_18)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_4)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_6)
    var_27 = module_0.deduplicate(var_21)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(tuple_0)


def test_case_493():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_3)
    assert var_7 is False
    list_0 = [bytes_3, bytes_3]
    var_8 = module_0.devoice(list_0)
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_9 = module_0.ends_with_vowel(tuple_1)
    assert var_9 is False
    str_0 = "ymWXCWpM"
    bool_1 = False
    dict_0 = {bool_1: bool_1, str_0: bool_1, bool_1: str_0}
    tuple_2 = (str_0, bool_1, dict_0)
    var_10 = module_0.devoice(tuple_2)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    str_1 = "ORrJ2:"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)


def test_case_494():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_5 = module_0.ends_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_0)
    assert var_6 is False


def test_case_495():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(var_6)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_20 = module_0.devoice(tuple_0)
    var_21 = module_0.ends_dentals(var_20)
    assert var_21 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_22 = module_0.ends_dentals(bytes_8)
    assert var_22 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_1 = (set_0,)
    var_24 = module_0.ends_with_vowel(tuple_1)
    assert var_24 is False
    var_25 = module_0.devoice(var_23)
    assert var_25 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.starts_with_vowel(bytes_1)
    assert var_26 is False


def test_case_496():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    dict_0 = {}
    var_2 = module_0.devoice(dict_0)
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_3)
    assert var_8 is False
    str_1 = "`<)4H\rS\x0c"
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_5 = b"dV\xd8n_n\xe0\x87K"
    var_15 = module_0.ends_dentals(bytes_5)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.devoice(var_27)
    var_29 = module_0.ends_with_vowel(bytes_6)
    assert var_29 is False


def test_case_497():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_5)
    assert var_10 is False


def test_case_498():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_0 = "#iW\rr^3:"
    var_5 = module_0.ends_dentals(str_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_5)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_7)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.devoice(var_18)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_8)
    assert var_25 is False


def test_case_499():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_500():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_5)
    assert var_10 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_6)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.devoice(var_11)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"


def test_case_501():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_502():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_2)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    str_3 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_3)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_3)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.devoice(var_24)
    var_26 = module_0.ends_dentals(var_16)
    assert var_26 is False


def test_case_503():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    str_0 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_0)
    assert var_12 == "%OJ<'vPCn@4"
    str_1 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    str_2 = "1X,mBK\\"
    var_14 = module_0.devoice(str_2)
    var_15 = module_0.ends_dentals(str_2)
    assert var_15 is False
    var_16 = module_0.devoice(str_1)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_17 = module_0.starts_with_vowel(tuple_0)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(tuple_0)
    assert var_18 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_5)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_3)
    assert var_22 is False
    str_4 = "#iW\rr^3:"
    var_23 = module_0.ends_dentals(str_4)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_16)
    assert var_24 is False


def test_case_504():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.deduplicate(var_6)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_13 = module_0.ends_with_vowel(list_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_8)
    assert var_14 is False


def test_case_505():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_7)
    assert var_11 is False


def test_case_506():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    str_1 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    str_2 = "ORrJ2:"
    var_6 = module_0.starts_with_vowel(str_2)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_4)
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    str_4 = "1X,mBK\\"
    var_16 = module_0.devoice(str_4)
    str_5 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_5, str_5, str_5}
    list_0 = [set_0, str_5, str_5]
    var_17 = module_0.ends_dentals(list_0)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_5)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(list_0)
    assert var_19 is False
    str_6 = "1X,mBK\\"
    var_20 = module_0.devoice(str_6)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_20)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_16)
    assert var_26 is False


def test_case_507():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)


def test_case_508():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    str_0 = "1X,mBK\\"
    var_15 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_0)
    assert var_18 is False
    dict_0 = {}
    var_19 = module_0.devoice(dict_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.ends_dentals(bytes_7)
    assert var_25 is False
    str_1 = "1X,mBK\\"
    var_26 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_2)
    assert var_27 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(str_2)
    assert var_30 is False
    var_31 = module_0.ends_dentals(var_7)
    assert var_31 is False


def test_case_509():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(str_0)


def test_case_510():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False


def test_case_511():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_512():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.ends_dentals(var_3)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_14 = module_0.ends_dentals(list_0)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(bytes_6)
    assert var_18 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_3)
    assert var_19 is False
    str_4 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_4)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_17)
    assert var_21 is False


def test_case_513():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_14 = module_0.ends_with_vowel(list_0)
    assert var_14 is False
    str_2 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_3)
    assert var_16 is False
    var_17 = module_0.ends_dentals(str_2)
    assert var_17 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(bytes_4)
    assert var_22 is False
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    var_24 = module_0.ends_dentals(str_4)
    assert var_24 is False
    var_25 = module_0.ends_dentals(str_4)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_5)
    assert var_26 is False


def test_case_514():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_6)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_14 = module_0.starts_with_vowel(tuple_1)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(tuple_1)
    assert var_15 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_5)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_0, str_0, str_0}
    list_0 = [set_1, str_0, str_0]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_0)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(list_0)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    str_1 = "K3A!V\x0c#87"
    var_30 = module_0.starts_with_vowel(str_1)
    assert var_30 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_2)
    assert var_31 is False
    var_32 = module_0.ends_dentals(str_1)
    assert var_32 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_34)
    assert var_36 is False
    var_37 = module_0.starts_with_vowel(var_21)
    assert var_37 is False


def test_case_515():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_14 = module_0.ends_with_vowel(tuple_1)
    assert var_14 is False
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_15)
    assert var_20 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_dentals(bytes_6)
    assert var_23 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_4)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(tuple_0)
    assert var_25 is False


def test_case_516():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "`<)4H\rS\x0c"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_2)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.devoice(var_3)
    assert var_6 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_2)
    str_3 = "`<)4H\rS\x0c"
    var_13 = module_0.ends_dentals(str_3)
    assert var_13 is False
    var_14 = module_0.deduplicate(var_12)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_517():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False


def test_case_518():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    bool_0 = False
    set_0 = {bool_0}
    var_10 = module_0.devoice(set_0)
    var_11 = module_0.devoice(var_10)
    str_1 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_1)
    assert var_12 == "%OJ<'vPCn@4"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.starts_with_vowel(bytes_0)
    assert var_15 is False


def test_case_519():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_1 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_1)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    str_2 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    var_17 = module_0.devoice(var_14)
    str_4 = "1X,mBK\\"
    var_18 = module_0.devoice(str_4)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    str_5 = "`<)4H\rS\x0c"
    var_24 = module_0.ends_dentals(str_5)
    assert var_24 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_25 = module_0.ends_dentals(bytes_6)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_16)
    assert var_26 is False


def test_case_520():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False


def test_case_521():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_8 = module_0.ends_with_vowel(list_0)
    assert var_8 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    str_0 = "%OJ<'vPCn@4"
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "%OJ<'vPCn@4"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(bytes_5)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_1 = [set_0, str_1, str_1]
    var_22 = module_0.ends_dentals(list_1)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(list_1)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_11)
    assert var_25 is False


def test_case_522():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "\\Z8@Jg"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_1)
    assert var_22 is False


def test_case_523():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_524():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"dV\xd8n_n\xe0\x87K"
    var_7 = module_0.ends_dentals(bytes_4)
    assert var_7 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.deduplicate(bytes_5)
    assert var_8 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.devoice(bytes_2)


def test_case_525():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    str_0 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    var_8 = module_0.devoice(var_6)
    var_9 = module_0.devoice(var_6)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_16 = module_0.ends_with_vowel(tuple_0)
    assert var_16 is False
    var_17 = module_0.devoice(var_15)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_2)
    assert var_18 == b"=\xc4\xb3D\xea8"


def test_case_526():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    str_1 = "`<)4H\rS\x0c"
    var_17 = module_0.ends_dentals(str_1)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.deduplicate(bytes_6)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_25)
    assert var_27 is False
    str_2 = "\\Z8@Jg"
    var_28 = module_0.ends_with_vowel(str_2)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_0)
    assert var_29 is False


def test_case_527():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_528():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_20 = module_0.devoice(str_2)
    var_21 = module_0.ends_dentals(str_2)
    assert var_21 is False
    var_22 = module_0.ends_dentals(bytes_2)
    assert var_22 is False


def test_case_529():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "`<)4H\rS\x0c"
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.devoice(var_3)
    assert var_6 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_1)
    assert var_11 is False
    str_2 = "#iW\rr^3:"
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    var_15 = module_0.devoice(bytes_3)
    dict_0 = {}
    var_16 = module_0.devoice(dict_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(var_19)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_4)
    assert var_23 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_24 = module_0.ends_with_vowel(bytes_6)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_6)
    assert var_25 == b"=\xc4\xb3D\xea8"


def test_case_530():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False


def test_case_531():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    str_0 = "%OJ<'vPCn@4"
    var_2 = module_0.deduplicate(str_0)
    assert var_2 == "%OJ<'vPCn@4"
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_3 = module_0.ends_with_vowel(tuple_2)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.ends_with_vowel(tuple_0)
    assert var_10 is False


def test_case_532():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    str_2 = "\\Z8@Jg"
    var_17 = module_0.ends_with_vowel(str_2)
    assert var_17 is False
    str_3 = "1X,mBK\\"
    var_18 = module_0.devoice(str_3)
    var_19 = module_0.ends_dentals(str_3)
    assert var_19 is False
    var_20 = module_0.devoice(str_2)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(var_22)
    assert var_23 is False
    var_24 = module_0.devoice(var_4)


def test_case_533():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "%OJ<'vPCn@4"
    var_1 = module_0.deduplicate(str_0)
    assert var_1 == "%OJ<'vPCn@4"
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    str_4 = "1X,mBK\\"
    var_13 = module_0.devoice(str_4)
    var_14 = module_0.ends_dentals(str_4)
    assert var_14 is False
    var_15 = module_0.devoice(str_3)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_2)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_2)
    str_5 = "(q]I"
    var_18 = module_0.devoice(str_5)
    var_19 = module_0.devoice(var_18)
    var_20 = module_0.starts_with_vowel(var_19)
    assert var_20 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_21 = module_0.deduplicate(bytes_3)
    assert var_21 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_5)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(str_3)
    assert var_27 is False


def test_case_534():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "`<)4H\rS\x0c"
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    dict_0 = {}
    var_9 = module_0.devoice(dict_0)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_10 = module_0.ends_dentals(list_0)
    assert var_10 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_1 = [tuple_0]
    var_11 = module_0.ends_with_vowel(list_1)
    assert var_11 is False
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_3)
    assert var_16 is False
    bytes_3 = b"dV\xd8n_n\xe0\x87K"
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.ends_dentals(bytes_4)
    assert var_18 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_1 = (set_1,)
    var_20 = module_0.ends_with_vowel(tuple_1)
    assert var_20 is False
    var_21 = module_0.devoice(var_19)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(var_21)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.starts_with_vowel(var_0)
    assert var_23 is False


def test_case_535():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.starts_with_vowel(var_5)
    assert var_9 is False


def test_case_536():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False


def test_case_537():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)


def test_case_538():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_6)
    assert var_15 is False
    dict_0 = {}
    var_16 = module_0.devoice(dict_0)
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.ends_dentals(bytes_7)
    assert var_17 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_8)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    str_1 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_1)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_0)
    assert var_21 is False


def test_case_539():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.devoice(var_6)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(var_8)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    var_13 = module_0.devoice(var_11)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_18 = module_0.ends_with_vowel(tuple_2)
    assert var_18 is False
    float_0 = -1663.70075
    tuple_3 = (float_0,)
    var_19 = module_0.starts_with_vowel(tuple_3)
    assert var_19 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(var_22)


def test_case_540():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_541():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    str_0 = "ORrJ2:"
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_4)
    assert var_6 is False
    str_2 = "\\Z8@Jg"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_3)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(list_0)
    assert var_10 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_1)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_1)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_1)
    assert var_17 is False
    var_18 = module_0.deduplicate(str_0)
    assert var_18 == "ORrJ2:"


def test_case_542():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "1X,mBK\\"
    var_4 = module_0.devoice(str_2)
    assert var_4 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_3)
    assert var_9 is False
    str_4 = "(q]I"
    var_10 = module_0.devoice(str_4)
    var_11 = module_0.devoice(var_10)
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_1 = [tuple_0]
    var_13 = module_0.ends_with_vowel(list_1)
    assert var_13 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_1)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_1)
    var_16 = module_0.ends_dentals(bytes_1)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_5)
    assert var_17 is False


def test_case_543():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(var_5)
    assert var_6 is False
    var_7 = module_0.deduplicate(var_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_544():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_545():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False


def test_case_546():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    bool_0 = False
    set_0 = {bool_0}
    var_8 = module_0.devoice(set_0)
    var_9 = module_0.devoice(var_8)
    var_10 = module_0.devoice(var_9)


def test_case_547():
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_548():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"dV\xd8n_n\xe0\x87K"
    var_7 = module_0.ends_dentals(bytes_3)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_549():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "%OJ<'vPCn@4"
    var_1 = module_0.deduplicate(str_1)
    assert var_1 == "%OJ<'vPCn@4"
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_12 = module_0.ends_with_vowel(var_5)
    assert var_12 is False


def test_case_550():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    str_1 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.deduplicate(var_12)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.starts_with_vowel(str_1)
    assert var_19 is False


def test_case_551():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = "#iW\rr^3:"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(var_9)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_2 = "\\Z8@Jg"
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_13)
    assert var_15 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(bytes_0)
    assert var_19 is False


def test_case_552():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    str_1 = "ORrJ2:"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.devoice(var_3)


def test_case_553():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(var_9)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_4)
    assert var_11 is False
    str_1 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    var_15 = module_0.ends_dentals(bytes_4)
    assert var_15 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_16 = module_0.ends_with_vowel(list_0)
    assert var_16 is False
    set_1 = set()
    tuple_1 = (set_1,)
    var_17 = module_0.ends_with_vowel(tuple_1)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(list_0)
    assert var_18 is False


def test_case_554():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False


def test_case_555():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_4)
    assert var_10 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.devoice(var_11)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(var_13)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_0)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_0)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.ends_dentals(bytes_8)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_12)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_13)
    var_33 = module_0.ends_dentals(var_30)
    assert var_33 is False
    var_34 = module_0.ends_dentals(bytes_12)
    assert var_34 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_0 = [set_1, str_1, str_1]
    var_35 = module_0.ends_dentals(list_0)
    assert var_35 is False
    str_2 = ")sE\nhxARG\r;/4"
    var_36 = module_0.devoice(str_2)
    var_37 = module_0.ends_dentals(var_6)
    assert var_37 is False


def test_case_556():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.deduplicate(var_7)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    var_16 = module_0.devoice(bytes_4)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_1)
    assert var_18 is False


def test_case_557():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_4)
    assert var_11 is False
    list_0 = [bytes_4, bytes_4]
    var_12 = module_0.devoice(list_0)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_5)
    assert var_13 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_6)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_15 = module_0.ends_with_vowel(tuple_0)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(var_16)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_8)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = {bytes_7, var_0, bytes_1}
    var_21 = module_0.deduplicate(set_1)


def test_case_558():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    var_7 = module_0.deduplicate(var_3)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_559():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_9 = module_0.ends_with_vowel(list_0)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(bytes_3)
    assert var_15 is False
    bool_1 = False
    bool_2 = True
    list_1 = [bool_1, bool_1, bool_2, bool_1]
    var_16 = module_0.ends_with_vowel(list_1)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_12)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_560():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_1 = module_0.ends_with_vowel(tuple_1)
    assert var_1 is False
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_10)
    assert var_12 is False


def test_case_561():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.devoice(var_6)
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_13 = module_0.ends_with_vowel(list_0)
    assert var_13 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_1 = [set_0, str_0, str_0]
    var_14 = module_0.ends_dentals(list_1)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_0)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(list_1)
    assert var_16 is False
    bytes_5 = b"dV\xd8n_n\xe0\x87K"
    var_17 = module_0.ends_dentals(bytes_5)
    assert var_17 is False
    var_18 = module_0.deduplicate(tuple_0)


def test_case_562():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(bytes_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    var_15 = module_0.ends_dentals(str_0)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_0)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(bytes_0)
    assert var_22 is False


def test_case_563():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_0 = "#iW\rr^3:"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_0)
    assert var_10 is False


def test_case_564():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_0 = "%OJ<'vPCn@4"
    var_7 = module_0.deduplicate(str_0)
    assert var_7 == "%OJ<'vPCn@4"
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    str_2 = "\\Z8@Jg"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    str_3 = "1X,mBK\\"
    var_11 = module_0.devoice(str_3)
    var_12 = module_0.ends_dentals(str_3)
    assert var_12 is False
    var_13 = module_0.devoice(str_2)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_1 = [set_1, str_4, str_4]
    var_14 = module_0.ends_dentals(list_1)
    assert var_14 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_5)
    assert var_15 is False
    str_6 = "ORrJ2:"
    var_16 = module_0.starts_with_vowel(str_6)
    assert var_16 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_17 = module_0.deduplicate(bytes_3)
    assert var_17 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_4)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_7)
    bool_0 = True
    tuple_0 = (bool_0,)
    var_28 = module_0.ends_with_vowel(tuple_0)
    assert var_28 is False


def test_case_565():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_3)
    assert var_6 is False
    list_0 = [bytes_3, bytes_3]
    var_7 = module_0.devoice(list_0)
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False


def test_case_566():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bool_0 = False
    set_0 = {bool_0}
    var_8 = module_0.devoice(set_0)
    var_9 = module_0.devoice(var_8)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_0 = (set_1,)
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.devoice(var_11)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_5)
    assert var_14 is False
    str_0 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_0)
    assert var_15 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    var_17 = module_0.ends_dentals(str_0)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    var_21 = module_0.ends_dentals(str_2)
    assert var_21 is False
    var_22 = module_0.devoice(tuple_0)


def test_case_567():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    str_3 = "1X,mBK\\"
    var_5 = module_0.devoice(str_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_3)
    assert var_7 is False
    str_4 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_4)
    assert var_8 is False
    str_5 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_5: bool_0, bool_0: str_5}
    tuple_0 = (str_5, bool_0, dict_0)
    var_9 = module_0.devoice(tuple_0)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    var_11 = module_0.deduplicate(str_4)
    assert var_11 == "K3A!V\x0c#87"
    str_6 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_6)
    assert var_12 == "%OJ<'vPCn@4"
    str_7 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_7)
    assert var_13 is False
    str_8 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_8)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_7)
    assert var_15 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_0)
    assert var_16 is False
    set_0 = set()
    tuple_1 = (set_0,)
    var_17 = module_0.ends_with_vowel(tuple_1)
    assert var_17 is False
    str_9 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_9, str_9, str_9}
    list_0 = [set_1, str_9, str_9]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_9)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(list_0)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(list_0)
    assert var_21 is False


def test_case_568():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ORrJ2:"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.devoice(var_2)
    str_2 = "\\Z8@Jg"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_10 = module_0.ends_with_vowel(list_0)
    assert var_10 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(var_11)
    assert var_12 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_15 = module_0.ends_with_vowel(tuple_0)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(var_16)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_3 = "1X,mBK\\"
    var_18 = module_0.devoice(str_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_4)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_11)
    assert var_25 is False


def test_case_569():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    set_1 = set()
    tuple_0 = (set_1,)
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_4)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_570():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_571():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_2)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_2)
    assert var_7 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_1)
    assert var_10 is False


def test_case_572():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_7)
    assert var_15 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_8)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_with_vowel(bytes_8)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_dentals(bytes_7)
    assert var_19 is False


def test_case_573():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "`<)4H\rS\x0c"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_4 = module_0.ends_with_vowel(tuple_1)
    assert var_4 is False
    bool_1 = False
    bool_2 = True
    list_0 = [bool_1, bool_1, bool_2, bool_1]
    var_5 = module_0.ends_with_vowel(list_0)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    var_14 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.devoice(var_15)
    bytes_6 = b"dV\xd8n_n\xe0\x87K"
    var_22 = module_0.ends_dentals(bytes_6)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(bytes_2)
    assert var_23 is False


def test_case_574():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_0)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_3)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.devoice(var_19)
    bytes_7 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_26 = module_0.deduplicate(bytes_7)
    assert var_26 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    dict_0 = {}
    var_27 = module_0.devoice(dict_0)
    var_28 = module_0.devoice(var_1)


def test_case_575():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_7 = module_0.devoice(list_0)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_4)
    assert var_15 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_17 = module_0.ends_with_vowel(tuple_0)
    assert var_17 is False
    var_18 = module_0.devoice(var_16)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_3)
    assert var_24 == b"=\xc4\xb3D\xea8"


def test_case_576():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_3 = module_0.ends_dentals(list_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    bool_0 = False
    bool_1 = True
    list_1 = [bool_0, bool_0, bool_1, bool_0]
    var_14 = module_0.ends_with_vowel(list_1)
    assert var_14 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_5)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.ends_with_vowel(bytes_4)
    assert var_22 is False


def test_case_577():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(bytes_1)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_12 = module_0.ends_dentals(list_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_3)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(list_0)
    assert var_14 is False
    str_4 = "ORrJ2:"
    var_15 = module_0.starts_with_vowel(str_4)
    assert var_15 is False
    str_5 = "1X,mBK\\"
    var_16 = module_0.devoice(str_5)
    var_17 = module_0.ends_dentals(str_5)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_16)
    assert var_18 is False
    str_6 = "%OJ<'vPCn@4"
    var_19 = module_0.deduplicate(str_6)
    assert var_19 == "%OJ<'vPCn@4"
    str_7 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_7)
    assert var_20 is False
    var_21 = module_0.ends_dentals(str_2)
    assert var_21 is False


def test_case_578():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_1)
    assert var_1 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_2)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_with_vowel(bytes_2)
    assert var_3 is False
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.deduplicate(bytes_3)
    assert var_5 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_4)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_5)
    assert var_9 is False
    var_10 = module_0.devoice(var_2)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_579():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_4)
    assert var_11 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_0)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "ORrJ2:"
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.starts_with_vowel(var_16)
    assert var_23 is False


def test_case_580():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False


def test_case_581():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_10 = module_0.devoice(list_1)
    var_11 = module_0.ends_dentals(bytes_1)
    assert var_11 is False


def test_case_582():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_12 = module_0.ends_with_vowel(list_0)
    assert var_12 is False
    str_0 = "ORrJ2:"
    var_13 = module_0.starts_with_vowel(str_0)
    assert var_13 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.devoice(var_22)
    bytes_9 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_24 = module_0.ends_dentals(bytes_9)
    assert var_24 is False
    list_1 = [bytes_9, bytes_9]
    var_25 = module_0.devoice(list_1)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_2 = [set_0, str_1, str_1]
    var_26 = module_0.ends_dentals(list_2)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(str_1)
    assert var_27 is False
    list_3 = [var_23, bytes_6, bytes_4]
    var_28 = module_0.deduplicate(list_3)


def test_case_583():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "ORrJ2:"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    str_2 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_3)
    assert var_11 is False
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    bytes_4 = b"dV\xd8n_n\xe0\x87K"
    var_13 = module_0.ends_dentals(bytes_4)
    assert var_13 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_16 = module_0.ends_with_vowel(tuple_0)
    assert var_16 is False
    var_17 = module_0.devoice(var_15)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(var_17)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(var_7)
    assert var_19 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"


def test_case_584():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    dict_0 = {}
    var_5 = module_0.devoice(dict_0)
    str_0 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    str_1 = "(q]I"
    var_15 = module_0.devoice(str_1)
    var_16 = module_0.devoice(var_15)
    var_17 = module_0.starts_with_vowel(var_16)
    assert var_17 is False
    str_2 = "\\Z8@Jg"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    var_21 = module_0.devoice(str_2)
    var_22 = module_0.deduplicate(dict_0)


def test_case_585():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.deduplicate(var_8)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.devoice(var_15)
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_22 = module_0.ends_dentals(bytes_7)
    assert var_22 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_24 = module_0.ends_with_vowel(tuple_0)
    assert var_24 is False
    var_25 = module_0.devoice(var_23)
    assert var_25 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(var_25)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "1X,mBK\\"
    var_27 = module_0.devoice(str_1)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(str_1)
    assert var_30 is False
    var_31 = module_0.ends_dentals(var_26)
    assert var_31 is False


def test_case_586():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_5 = b"^\xd5\xd00{J"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"^\xd5\xd00{J"
    dict_0 = {var_11: var_11, bytes_5: var_11}
    bool_0 = False
    list_0 = [dict_0, var_11, bool_0, bytes_5]
    var_12 = module_0.devoice(list_0)
    str_0 = "(q]I"
    var_13 = module_0.devoice(str_0)
    var_14 = module_0.devoice(var_13)
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.deduplicate(var_16)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_23 = module_0.devoice(str_1)
    var_24 = module_0.ends_dentals(str_1)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(var_22)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_587():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False


def test_case_588():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    var_2 = module_0.deduplicate(var_0)


def test_case_589():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    str_1 = ")sE\nhxARG\r;/4"
    var_4 = module_0.devoice(str_1)
    assert var_4 == ")sE\nhxARG\r;/4"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_3)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.devoice(var_15)
    var_22 = module_0.deduplicate(var_4)
    assert var_22 == ")sE\nhxARG\r;/4"


def test_case_590():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    str_3 = "1X,mBK\\"
    var_16 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_3)
    assert var_19 is False
    str_4 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_4)
    assert var_20 is False
    str_5 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_5: bool_0, bool_0: str_5}
    tuple_0 = (str_5, bool_0, dict_0)
    var_21 = module_0.devoice(tuple_0)
    var_22 = module_0.ends_dentals(var_21)
    assert var_22 is False
    var_23 = module_0.deduplicate(str_4)
    assert var_23 == "K3A!V\x0c#87"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_25)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_25)
    assert var_28 is False
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_29 = module_0.devoice(list_0)
    str_6 = "ymWXCWpM"
    bool_1 = False
    dict_1 = {bool_1: bool_1, str_6: bool_1, bool_1: str_6}
    tuple_1 = (str_6, bool_1, dict_1)
    var_30 = module_0.devoice(tuple_1)
    var_31 = module_0.ends_dentals(var_30)
    assert var_31 is False
    str_7 = "K3A!V\x0c#87"
    var_32 = module_0.starts_with_vowel(str_7)
    assert var_32 is False
    str_8 = "Kd tt@\x0c9{k:|lpK9"
    var_33 = module_0.ends_with_vowel(str_8)
    assert var_33 is False
    var_34 = module_0.ends_dentals(str_7)
    assert var_34 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_7)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_8)
    var_38 = module_0.starts_with_vowel(var_35)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_37)
    assert var_39 is False
    var_40 = module_0.devoice(bytes_8)
    var_41 = module_0.devoice(var_35)
    var_42 = module_0.ends_dentals(str_7)
    assert var_42 is False


def test_case_591():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False


def test_case_592():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_0 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.starts_with_vowel(var_12)
    assert var_13 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_14 = module_0.ends_dentals(list_0)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(list_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_0)
    assert var_17 is False


def test_case_593():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_7 = module_0.devoice(tuple_0)
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    var_9 = module_0.deduplicate(str_1)
    assert var_9 == "K3A!V\x0c#87"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False


def test_case_594():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_3)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(var_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_595():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_4)
    dict_0 = {}
    var_10 = module_0.devoice(dict_0)
    str_1 = "1X,mBK\\"
    var_11 = module_0.devoice(str_1)
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_11)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_9)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.starts_with_vowel(var_25)
    assert var_26 is False
    bool_0 = False
    set_0 = {bool_0}
    var_27 = module_0.devoice(set_0)
    var_28 = module_0.devoice(var_27)
    var_29 = module_0.deduplicate(var_27)
    str_3 = "`<)4H\rS\x0c"
    var_30 = module_0.ends_dentals(str_3)
    assert var_30 is False
    bytes_10 = b"=\xc4\xb3D\xea8"
    var_31 = module_0.ends_with_vowel(bytes_10)
    assert var_31 is False
    str_4 = "1X,mBK\\"
    var_32 = module_0.devoice(str_4)
    var_33 = module_0.ends_dentals(str_4)
    assert var_33 is False
    var_34 = module_0.devoice(var_32)
    var_35 = module_0.devoice(var_32)
    var_36 = module_0.ends_with_vowel(var_25)
    assert var_36 is False


def test_case_596():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_with_vowel(bytes_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.deduplicate(var_13)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_20 = module_0.ends_with_vowel(tuple_1)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_3)
    assert var_26 is False
    var_27 = module_0.deduplicate(bytes_2)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_597():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False


def test_case_598():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    var_7 = module_0.deduplicate(var_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_599():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_1)
    assert var_1 is False
    str_0 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False


def test_case_600():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_6)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_10 = module_0.ends_with_vowel(tuple_0)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(var_11)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_0 = [set_1, str_1, str_1]
    var_13 = module_0.ends_dentals(list_0)
    assert var_13 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    set_2 = set()
    tuple_1 = (set_2,)
    var_20 = module_0.ends_with_vowel(tuple_1)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_17)
    assert var_21 is False


def test_case_601():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_0)
    assert var_2 is False


def test_case_602():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_1)
    assert var_8 is False
    str_2 = "(q]I"
    var_9 = module_0.devoice(str_2)
    assert var_9 == "(q]I"
    var_10 = module_0.devoice(var_9)
    assert var_10 == "(q]I"
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_with_vowel(bytes_4)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(var_18)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.starts_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_7)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_3)
    assert var_25 == b"=\xc4\xb3D\xea8"


def test_case_603():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False


def test_case_604():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.devoice(bytes_2)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.ends_dentals(bytes_3)
    assert var_4 is False
    list_0 = [bytes_3, bytes_3]
    var_5 = module_0.devoice(list_0)
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_5)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    str_0 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_0)
    assert var_9 == "%OJ<'vPCn@4"
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    str_1 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_12 = module_0.devoice(tuple_0)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_1)
    assert var_14 == "K3A!V\x0c#87"
    str_3 = "\\Z8@Jg"
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_6)
    assert var_16 is False
    str_4 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_4)
    assert var_17 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_5)
    assert var_18 is False
    var_19 = module_0.ends_dentals(str_4)
    assert var_19 is False
    var_20 = module_0.ends_dentals(bytes_6)
    assert var_20 is False
    dict_1 = {}
    var_21 = module_0.devoice(dict_1)
    var_22 = module_0.devoice(var_9)
    assert var_22 == "%OJ<'vPCn@4"


def test_case_605():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_3)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(bytes_2)
    assert var_7 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_4)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_5)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_13 = module_0.deduplicate(bytes_6)
    assert var_13 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_7)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_7)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_9)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_8)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_8)
    assert var_23 is False
    dict_0 = {}
    var_24 = module_0.deduplicate(dict_0)
    var_25 = module_0.devoice(bytes_1)


def test_case_606():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_5)
    assert var_12 is False
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    var_14 = module_0.devoice(bytes_5)
    bytes_6 = b"^\xd5\xd00{J"
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b"^\xd5\xd00{J"
    dict_0 = {var_15: var_15, bytes_6: var_15}
    bool_0 = False
    list_0 = [dict_0, var_15, bool_0, bytes_6]
    var_16 = module_0.devoice(list_0)
    var_17 = module_0.devoice(var_2)


def test_case_607():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_1 = [tuple_0]
    var_11 = module_0.ends_with_vowel(list_1)
    assert var_11 is False
    str_1 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_1)
    assert var_12 == "%OJ<'vPCn@4"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.devoice(var_14)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_3 = "\\Z8@Jg"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    var_24 = module_0.ends_dentals(str_4)
    assert var_24 is False
    var_25 = module_0.devoice(str_3)
    var_26 = module_0.starts_with_vowel(list_1)
    assert var_26 is False


def test_case_608():
    tuple_0 = ()
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_609():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    str_3 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_3)
    assert var_6 == "%OJ<'vPCn@4"
    str_4 = "%OJ<'vPCn@4"
    var_7 = module_0.deduplicate(str_4)
    assert var_7 == "%OJ<'vPCn@4"
    var_8 = module_0.ends_with_vowel(str_4)
    assert var_8 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_9 = module_0.ends_with_vowel(list_0)
    assert var_9 is False
    int_0 = 1176
    bool_2 = False
    tuple_0 = (bool_2,)
    tuple_1 = (int_0, tuple_0)
    var_10 = module_0.ends_with_vowel(tuple_1)
    assert var_10 is False
    bytes_1 = b"^\xd5\xd00{J"
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"^\xd5\xd00{J"
    dict_0 = {var_11: var_11, bytes_1: var_11}
    bool_3 = False
    list_1 = [dict_0, var_11, bool_3, bytes_1]
    var_12 = module_0.devoice(list_1)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_2)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(var_16)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(str_0)


def test_case_610():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_with_vowel(bytes_6)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_6)
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_1 = (str_1, bool_0, dict_0)
    var_19 = module_0.devoice(tuple_1)
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_0)
    assert var_21 is False


def test_case_611():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(var_9)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "1X,mBK\\"
    var_11 = module_0.devoice(str_1)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    str_3 = "\\Z8@Jg"
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    bool_0 = False
    set_1 = {bool_0}
    var_16 = module_0.devoice(set_1)
    var_17 = module_0.devoice(var_16)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_2 = {str_4, str_4, str_4}
    list_0 = [set_2, str_4, str_4]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    var_19 = module_0.devoice(str_2)


def test_case_612():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_0 = b"^\xd5\xd00{J"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"^\xd5\xd00{J"
    dict_1 = {var_2: var_2, bytes_0: var_2}
    bool_1 = False
    list_0 = [dict_1, var_2, bool_1, bytes_0]
    var_3 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False


def test_case_613():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    var_7 = module_0.starts_with_vowel(var_0)
    assert var_7 is False


def test_case_614():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False


def test_case_615():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    str_0 = "ORrJ2:"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.devoice(var_11)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(bytes_7)
    assert var_23 is False
    str_1 = "%OJ<'vPCn@4"
    var_24 = module_0.deduplicate(str_1)
    assert var_24 == "%OJ<'vPCn@4"
    str_2 = "#iW\rr^3:"
    var_25 = module_0.ends_dentals(str_2)
    assert var_25 is False
    str_3 = "1X,mBK\\"
    var_26 = module_0.devoice(str_3)
    var_27 = module_0.ends_dentals(str_3)
    assert var_27 is False
    var_28 = module_0.ends_dentals(str_3)
    assert var_28 is False
    tuple_0 = ()
    var_29 = module_0.devoice(tuple_0)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.ends_dentals(var_30)
    assert var_33 is False
    bytes_11 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.deduplicate(bytes_11)
    assert var_34 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_35 = module_0.devoice(bytes_11)
    var_36 = module_0.devoice(bytes_8)


def test_case_616():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_0)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_5 = module_0.ends_with_vowel(tuple_2)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.deduplicate(dict_0)
    bool_1 = False
    set_0 = {bool_1}
    var_7 = module_0.devoice(set_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.deduplicate(var_7)
    float_1 = 3821.0
    list_0 = [float_1, float_1, float_1]
    var_10 = module_0.devoice(list_0)
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_1)
    var_12 = module_0.devoice(bytes_1)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_14)
    assert var_18 is False
    var_19 = module_0.deduplicate(var_1)


def test_case_617():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False
    str_0 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_1 = (str_2, bool_0, dict_0)
    var_12 = module_0.devoice(tuple_1)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_1)
    assert var_14 == "K3A!V\x0c#87"
    str_3 = "`<)4H\rS\x0c"
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_3)
    assert var_16 is False
    str_4 = "1X,mBK\\"
    var_17 = module_0.devoice(str_4)
    var_18 = module_0.ends_dentals(str_4)
    assert var_18 is False
    var_19 = module_0.devoice(var_17)
    var_20 = module_0.devoice(var_17)
    var_21 = module_0.ends_dentals(bytes_2)
    assert var_21 is False


def test_case_618():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    bytes_5 = b"*\x8f\xcf\xe9"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"*\x8f\xcf\xe9"


def test_case_619():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_1)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.devoice(var_19)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_7)
    set_0 = set()
    tuple_0 = (set_0,)
    var_27 = module_0.ends_with_vowel(tuple_0)
    assert var_27 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(bytes_8)
    assert var_33 is False
    var_34 = module_0.deduplicate(var_10)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_620():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "#iW\rr^3:"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_3 = module_0.ends_dentals(list_0)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_0)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.devoice(var_15)
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_1 = [tuple_0]
    var_18 = module_0.ends_with_vowel(list_1)
    assert var_18 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(bytes_5)
    assert var_21 is False
    var_22 = module_0.ends_dentals(str_2)
    assert var_22 is False


def test_case_621():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    bytes_4 = b"dV\xd8n_n\xe0\x87K"
    var_10 = module_0.ends_dentals(bytes_4)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_7)
    assert var_11 is False


def test_case_622():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_5)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    str_3 = "%OJ<'vPCn@4"
    var_13 = module_0.deduplicate(str_3)
    assert var_13 == "%OJ<'vPCn@4"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.devoice(var_24)
    var_26 = module_0.ends_with_vowel(var_8)
    assert var_26 is False


def test_case_623():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.ends_dentals(bytes_2)
    assert var_5 is False
    list_0 = [bytes_2, bytes_2]
    var_6 = module_0.devoice(list_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_0)
    assert var_11 is False


def test_case_624():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.devoice(dict_0)
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_3 = module_0.ends_dentals(list_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    str_1 = "ORrJ2:"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_2 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_2)
    assert var_7 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.ends_dentals(var_14)
    assert var_15 is False
    str_4 = "`<)4H\rS\x0c"
    var_16 = module_0.ends_dentals(str_4)
    assert var_16 is False
    var_17 = module_0.devoice(list_0)


def test_case_625():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_1)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    str_1 = "ORrJ2:"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_4 = module_0.deduplicate(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.devoice(var_5)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.deduplicate(var_12)
    set_0 = set()
    tuple_1 = (set_0,)
    var_19 = module_0.ends_with_vowel(tuple_1)
    assert var_19 is False
    var_20 = module_0.devoice(var_4)


def test_case_626():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_1 = (str_0, bool_0, dict_0)
    var_5 = module_0.devoice(tuple_1)
    var_6 = module_0.ends_dentals(var_5)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(var_11)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"^\xd5\xd00{J"
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"^\xd5\xd00{J"
    dict_1 = {var_15: var_15, bytes_5: var_15}
    bool_1 = False
    list_0 = [dict_1, var_15, bool_1, bytes_5]
    var_16 = module_0.devoice(list_0)
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_6)
    assert var_17 is False
    bytes_7 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_19 = module_0.starts_with_vowel(bytes_7)
    assert var_19 is False
    str_1 = "1X,mBK\\"
    var_20 = module_0.devoice(str_1)
    var_21 = module_0.ends_dentals(str_1)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_20)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    var_31 = module_0.ends_dentals(var_29)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(bytes_10)
    assert var_32 is False
    var_33 = module_0.starts_with_vowel(var_16)
    assert var_33 is False


def test_case_627():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_10 = module_0.ends_with_vowel(list_0)
    assert var_10 is False
    str_1 = "ORrJ2:"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.deduplicate(var_14)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_628():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    var_2 = module_0.devoice(list_0)


def test_case_629():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_3)
    assert var_7 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_with_vowel(bytes_4)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_12 = module_0.starts_with_vowel(bytes_5)
    assert var_12 is False
    str_0 = "`<)4H\rS\x0c"
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_6)
    assert var_14 is False
    str_1 = "1X,mBK\\"
    var_15 = module_0.devoice(str_1)
    var_16 = module_0.ends_dentals(str_1)
    assert var_16 is False
    var_17 = module_0.devoice(var_15)
    var_18 = module_0.devoice(var_15)
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    var_21 = module_0.ends_dentals(str_2)
    assert var_21 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(bytes_9)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.ends_dentals(bytes_8)
    assert var_28 is False
    var_29 = module_0.deduplicate(var_2)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_630():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.starts_with_vowel(bytes_2)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_9)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_17 = module_0.ends_with_vowel(list_0)
    assert var_17 is False
    var_18 = module_0.devoice(var_14)


def test_case_631():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_1 = ")sE\nhxARG\r;/4"
    var_3 = module_0.devoice(str_1)
    assert var_3 == ")sE\nhxARG\r;/4"
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_0)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_5 = module_0.ends_with_vowel(tuple_1)
    assert var_5 is False
    str_2 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_2)
    assert var_6 == "%OJ<'vPCn@4"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_0)
    assert var_11 is False


def test_case_632():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    list_0 = [bytes_0, bytes_0]
    var_4 = module_0.devoice(list_0)
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "(q]I"


def test_case_633():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"^\xd5\xd00{J"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"^\xd5\xd00{J"
    dict_0 = {var_3: var_3, bytes_0: var_3}
    bool_0 = False
    list_0 = [dict_0, var_3, bool_0, bytes_0]
    var_4 = module_0.devoice(list_0)
    str_1 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.starts_with_vowel(bytes_1)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_0)


def test_case_634():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    dict_0 = {bytes_0: var_0, var_0: bool_0, bool_0: bytes_0}
    var_1 = module_0.starts_with_vowel(dict_0)
    assert var_1 is False


def test_case_635():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_9 = module_0.ends_with_vowel(tuple_0)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "(q]I"
    var_11 = module_0.devoice(str_0)
    var_12 = module_0.devoice(var_11)
    var_13 = module_0.starts_with_vowel(var_12)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_6)
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_25 = module_0.devoice(list_0)
    str_3 = "`<)4H\rS\x0c"
    var_26 = module_0.ends_dentals(str_3)
    assert var_26 is False
    var_27 = module_0.devoice(var_8)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_636():
    str_0 = "~&KnWE+1U"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_637():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = {var_2, var_4}
    tuple_0 = (var_1, set_0)
    var_9 = module_0.ends_with_vowel(tuple_0)
    assert var_9 is False


def test_case_638():
    tuple_0 = ()
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_1 = (str_3, bool_0, dict_0)
    var_15 = module_0.devoice(tuple_1)
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    var_17 = module_0.deduplicate(str_2)
    assert var_17 == "K3A!V\x0c#87"
    str_4 = "#iW\rr^3:"
    var_18 = module_0.ends_dentals(str_4)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_4)
    assert var_19 is False
    str_5 = "#iW\rr^3:"
    var_20 = module_0.ends_dentals(str_5)
    assert var_20 is False
    bool_1 = False
    set_0 = {bool_1}
    var_21 = module_0.devoice(set_0)
    var_22 = module_0.devoice(var_21)
    var_23 = module_0.devoice(bytes_3)


def test_case_639():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_3)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.devoice(bytes_3)
    str_1 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_1)
    assert var_9 == "%OJ<'vPCn@4"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False


def test_case_640():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False
    str_3 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_3)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_7)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_8)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_21)
    assert var_25 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_9)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.deduplicate(bytes_10)
    assert var_32 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_5 = "1X,mBK\\"
    var_33 = module_0.devoice(str_5)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.starts_with_vowel(var_33)
    assert var_38 is False
    var_39 = module_0.ends_dentals(var_32)
    assert var_39 is False


def test_case_641():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    dict_0 = {}
    var_4 = module_0.devoice(dict_0)
    var_5 = module_0.devoice(tuple_0)


def test_case_642():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    float_1 = 3821.0
    list_0 = [float_1, float_1, float_1]
    var_4 = module_0.devoice(list_0)
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_1)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    str_0 = "#iW\rr^3:"
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_0)
    assert var_10 is False
    tuple_1 = ()
    var_11 = module_0.devoice(tuple_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.devoice(var_17)
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_1)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_4)
    assert var_23 is False


def test_case_643():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_8 = module_0.ends_with_vowel(list_0)
    assert var_8 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    str_0 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_0)
    assert var_10 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(str_0)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    str_3 = "ymWXCWpM"
    bool_2 = False
    dict_0 = {bool_2: bool_2, str_3: bool_2, bool_2: str_3}
    tuple_0 = (str_3, bool_2, dict_0)
    var_15 = module_0.devoice(tuple_0)
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    var_17 = module_0.deduplicate(str_2)
    assert var_17 == "K3A!V\x0c#87"
    str_4 = "1X,mBK\\"
    var_18 = module_0.devoice(str_4)
    var_19 = module_0.ends_dentals(str_4)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.deduplicate(bytes_7)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_30 = module_0.starts_with_vowel(tuple_1)
    assert var_30 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.deduplicate(bytes_8)
    assert var_31 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_1 = -1663.70075
    tuple_2 = (float_1,)
    var_32 = module_0.starts_with_vowel(tuple_2)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(tuple_2)
    assert var_33 is False
    var_34 = module_0.ends_dentals(tuple_2)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(bytes_1)
    assert var_35 is False


def test_case_644():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_0 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    str_2 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_13 = module_0.devoice(tuple_0)
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    var_15 = module_0.deduplicate(str_2)
    assert var_15 == "K3A!V\x0c#87"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(bytes_3)
    assert var_20 is False
    str_4 = "\\Z8@Jg"
    var_21 = module_0.ends_with_vowel(str_4)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(bytes_5)
    assert var_27 is False
    str_5 = "1X,mBK\\"
    var_28 = module_0.devoice(str_5)
    str_6 = "K3A!V\x0c#87"
    var_29 = module_0.starts_with_vowel(str_6)
    assert var_29 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_7)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(str_6)
    assert var_32 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_33 = module_0.ends_dentals(bytes_8)
    assert var_33 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_34 = module_0.deduplicate(bytes_9)
    assert var_34 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_1 = (set_0,)
    var_35 = module_0.ends_with_vowel(tuple_1)
    assert var_35 is False
    var_36 = module_0.devoice(var_34)
    assert var_36 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_37 = module_0.deduplicate(var_36)
    assert var_37 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_7 = "(q]I"
    var_38 = module_0.devoice(str_7)
    var_39 = module_0.devoice(var_38)
    var_40 = module_0.starts_with_vowel(var_39)
    assert var_40 is False
    bytes_10 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_41 = module_0.ends_dentals(bytes_10)
    assert var_41 is False
    list_0 = [bytes_10, bytes_10]
    var_42 = module_0.devoice(list_0)
    var_43 = module_0.deduplicate(str_7)
    assert var_43 == "(q]I"
    str_8 = "%OJ<'vPCn@4"
    var_44 = module_0.deduplicate(str_8)
    assert var_44 == "%OJ<'vPCn@4"
    var_45 = module_0.ends_with_vowel(str_8)
    assert var_45 is False
    str_9 = "1D-JBH28f"
    var_46 = module_0.starts_with_vowel(str_9)
    assert var_46 is False


def test_case_645():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    str_1 = "#iW\rr^3:"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.devoice(var_1)


def test_case_646():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_647():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.devoice(var_4)
    bool_0 = False
    set_0 = {bool_0}
    var_7 = module_0.devoice(set_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.deduplicate(var_7)
    var_10 = module_0.ends_with_vowel(var_2)
    assert var_10 is False


def test_case_648():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    var_2 = module_0.devoice(list_0)
    int_0 = 1176
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (int_0, tuple_0)
    var_3 = module_0.ends_with_vowel(tuple_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_3)
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_5)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_dentals(bytes_7)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False


def test_case_649():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(bytes_1)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(bytes_10)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.ends_dentals(var_26)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_19)
    assert var_28 is False


def test_case_650():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_1 = module_0.devoice(list_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    str_2 = "ymWXCWpM"
    bool_1 = False
    dict_1 = {bool_1: bool_1, str_2: bool_1, bool_1: str_2}
    tuple_0 = (str_2, bool_1, dict_1)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    str_3 = "#iW\rr^3:"
    var_10 = module_0.ends_dentals(str_3)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_3)
    assert var_12 == "#iW\rr^3:"


def test_case_651():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_1 = "#iW\rr^3:"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_6)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_20 = module_0.devoice(list_0)
    dict_1 = {}
    var_21 = module_0.devoice(dict_1)
    str_3 = ")sE\nhxARG\r;/4"
    var_22 = module_0.devoice(str_3)
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    str_5 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_5)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(str_5)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(bytes_2)
    assert var_28 is False


def test_case_652():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    list_0 = [bytes_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    str_2 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_2)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_2)
    assert var_7 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    str_4 = "1X,mBK\\"
    var_9 = module_0.devoice(str_4)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    str_5 = "#iW\rr^3:"
    var_12 = module_0.ends_dentals(str_5)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_5)
    assert var_13 is False
    var_14 = module_0.deduplicate(var_2)


def test_case_653():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    str_2 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    str_3 = "1X,mBK\\"
    var_8 = module_0.devoice(str_3)
    assert var_8 == "1X,mBK\\"
    var_9 = module_0.ends_dentals(str_3)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    assert var_10 == "1X,mBK\\"
    var_11 = module_0.devoice(var_8)
    assert var_11 == "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    assert var_12 == "K3A!V\x0c#87"


def test_case_654():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_4 = module_0.devoice(list_0)
    str_1 = ")sE\nhxARG\r;/4"
    var_5 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_4)
    assert var_11 is False


def test_case_655():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.ends_dentals(tuple_0)
    assert var_8 is False
    str_2 = "(q]I"
    var_9 = module_0.devoice(str_2)
    assert var_9 == "(q]I"
    var_10 = module_0.devoice(var_9)
    assert var_10 == "(q]I"
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_1 = (str_3, bool_0, dict_0)
    var_21 = module_0.devoice(tuple_1)
    var_22 = module_0.ends_dentals(var_21)
    assert var_22 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_23 = module_0.ends_dentals(bytes_6)
    assert var_23 is False
    list_0 = [bytes_6, bytes_6]
    var_24 = module_0.devoice(list_0)
    var_25 = module_0.starts_with_vowel(var_4)
    assert var_25 is False


def test_case_656():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_5)
    assert var_13 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_6)
    set_0 = set()
    tuple_0 = (set_0,)
    var_15 = module_0.ends_with_vowel(tuple_0)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    var_17 = module_0.starts_with_vowel(str_0)
    assert var_17 is False


def test_case_657():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == "1X,mBK\\"


def test_case_658():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(var_1)
    assert var_3 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bool_0 = False
    dict_0 = {bytes_0: var_4, var_4: bool_0, bool_0: bytes_0}
    var_5 = module_0.starts_with_vowel(dict_0)
    assert var_5 is False
    str_2 = "1X,mBK\\"
    var_6 = module_0.devoice(str_2)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_3)
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_3)
    assert var_16 is False
    bool_1 = False
    dict_1 = {bool_1: bool_1}
    list_0 = [dict_1, bool_1, bool_1]
    var_17 = module_0.devoice(list_0)
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_1 = [set_0, str_4, str_4]
    var_21 = module_0.ends_dentals(list_1)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(list_1)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_7)
    var_30 = module_0.starts_with_vowel(str_1)
    assert var_30 is False


def test_case_659():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_2)
    assert var_3 is False
    dict_0 = {}
    var_4 = module_0.deduplicate(dict_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    str_2 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_2)
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_8 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_8)
    assert var_19 is False
    var_20 = module_0.ends_dentals(bytes_7)
    assert var_20 is False


def test_case_660():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "K3A!V\x0c#87"
    str_3 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_3)
    assert var_7 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_0)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_13)
    assert var_17 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_5)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_2)


def test_case_661():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_1 = module_0.ends_dentals(bytes_1)
    assert var_1 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_2)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_2)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.ends_dentals(bytes_2)
    assert var_4 is False
    str_0 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_5)
    assert var_11 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_6)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(var_14)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_with_vowel(bytes_3)
    assert var_16 is False


def test_case_662():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "K3A!V\x0c#87"
    str_3 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_3)
    assert var_7 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_0)
    assert var_8 is False
    str_4 = "1X,mBK\\"
    var_9 = module_0.devoice(str_4)
    var_10 = module_0.ends_dentals(str_4)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    var_12 = module_0.devoice(var_9)
    var_13 = module_0.deduplicate(var_0)
    assert var_13 == "(q]I"


def test_case_663():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_3)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.ends_dentals(tuple_0)
    assert var_8 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_1 = (str_1, bool_0, dict_0)
    var_9 = module_0.devoice(tuple_1)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    bool_1 = False
    set_0 = {bool_1}
    var_11 = module_0.devoice(set_0)
    var_12 = module_0.devoice(var_11)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    bool_2 = True
    tuple_2 = (bool_2, bool_2)
    list_0 = [tuple_2]
    var_15 = module_0.ends_with_vowel(list_0)
    assert var_15 is False
    float_1 = 3821.0
    list_1 = [float_1, float_1, float_1]
    var_16 = module_0.devoice(list_1)
    var_17 = module_0.ends_with_vowel(str_0)
    assert var_17 is False


def test_case_664():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    str_1 = "`<)4H\rS\x0c"
    var_15 = module_0.ends_dentals(str_1)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(var_18)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_22 = module_0.devoice(str_2)
    var_23 = module_0.ends_dentals(str_2)
    assert var_23 is False
    var_24 = module_0.ends_dentals(str_2)
    assert var_24 is False
    str_3 = "`<)4H\rS\x0c"
    var_25 = module_0.ends_dentals(str_3)
    assert var_25 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_9)
    assert var_26 is False
    str_4 = "1X,mBK\\"
    var_27 = module_0.devoice(str_4)
    var_28 = module_0.ends_dentals(str_4)
    assert var_28 is False
    var_29 = module_0.devoice(var_27)
    var_30 = module_0.devoice(var_27)
    var_31 = module_0.starts_with_vowel(bytes_2)
    assert var_31 is False


def test_case_665():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = ")sE\nhxARG\r;/4"
    var_4 = module_0.devoice(str_1)
    assert var_4 == ")sE\nhxARG\r;/4"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b"dV\xd8n_n\xe0\x87K"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bool_0 = False
    set_0 = {bool_0}
    var_11 = module_0.devoice(set_0)
    var_12 = module_0.devoice(var_11)
    str_2 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    str_3 = "ymWXCWpM"
    bool_1 = False
    dict_0 = {bool_1: bool_1, str_3: bool_1, bool_1: str_3}
    tuple_0 = (str_3, bool_1, dict_0)
    var_14 = module_0.devoice(tuple_0)
    var_15 = module_0.ends_dentals(var_14)
    assert var_15 is False
    var_16 = module_0.deduplicate(str_2)
    assert var_16 == "K3A!V\x0c#87"
    var_17 = module_0.ends_dentals(bytes_0)
    assert var_17 is False


def test_case_666():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_667():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.deduplicate(var_5)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(var_7)


def test_case_668():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_6 = module_0.devoice(list_0)
    bool_1 = True
    tuple_0 = (bool_1, bool_1)
    list_1 = [tuple_0]
    var_7 = module_0.ends_with_vowel(list_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(list_0)
    assert var_13 is False


def test_case_669():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "(q]I"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "(q]I"
    var_2 = module_0.devoice(var_1)
    assert var_2 == "(q]I"
    var_3 = module_0.starts_with_vowel(var_2)
    assert var_3 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    list_0 = [bytes_0, bytes_0]
    var_5 = module_0.devoice(list_0)
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "(q]I"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    var_15 = module_0.ends_dentals(bytes_2)
    assert var_15 is False
    bool_0 = False
    set_0 = {bool_0}
    var_16 = module_0.devoice(set_0)
    var_17 = module_0.devoice(var_16)
    str_2 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_2)
    assert var_19 is False


def test_case_670():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_2)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.ends_with_vowel(bytes_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_with_vowel(bytes_3)
    assert var_7 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_6)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_6)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_7)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.starts_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_7)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_9)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_1)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(str_1)
    assert var_26 is False
    str_2 = "ORrJ2:"
    var_27 = module_0.starts_with_vowel(str_2)
    assert var_27 is False
    bytes_10 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_28 = module_0.deduplicate(bytes_10)
    assert var_28 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_11 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.deduplicate(bytes_11)
    assert var_29 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.ends_dentals(var_29)
    assert var_30 is False
    var_31 = module_0.starts_with_vowel(bytes_9)
    assert var_31 is False


def test_case_671():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    str_3 = "#iW\rr^3:"
    var_11 = module_0.ends_dentals(str_3)
    assert var_11 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_1)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_2)
    var_18 = module_0.devoice(var_17)
    str_4 = "`<)4H\rS\x0c"
    var_19 = module_0.ends_dentals(str_4)
    assert var_19 is False
    bytes_3 = b"/\rz\x82\xb6})L]\xf4m\x93"
    bytes_4 = b"\xa7*\xaa\x8d\x9a"
    tuple_1 = (bytes_3, var_7, bytes_4)
    var_20 = module_0.deduplicate(tuple_1)


def test_case_672():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "(q]I"
    var_2 = module_0.devoice(str_0)
    var_3 = module_0.devoice(var_2)
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    list_1 = [bytes_1, bytes_1]
    var_6 = module_0.devoice(list_1)
    var_7 = module_0.deduplicate(str_0)
    assert var_7 == "(q]I"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_8)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.starts_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    var_19 = module_0.devoice(var_0)
    assert var_19 == b"^\xd5\xd00{J"


def test_case_673():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    var_2 = module_0.deduplicate(var_0)
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_3 = module_0.deduplicate(bytes_0)
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(var_3)


def test_case_674():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_1 = module_0.devoice(list_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False


def test_case_675():
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.devoice(var_8)
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_10 = module_0.deduplicate(bytes_4)
    var_11 = module_0.starts_with_vowel(bytes_4)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_2)
    assert var_12 is False


def test_case_676():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    str_0 = "ORrJ2:"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    str_1 = "%OJ<'vPCn@4"
    var_8 = module_0.deduplicate(str_1)
    assert var_8 == "%OJ<'vPCn@4"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_6)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_7)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_9)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(var_19)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.ends_dentals(bytes_4)
    assert var_23 is False


def test_case_677():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    str_2 = "1X,mBK\\"
    var_2 = module_0.devoice(str_2)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_2)
    assert var_3 is False
    var_4 = module_0.devoice(str_1)
    assert var_4 == "\\Z8@Jg"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_13 = module_0.starts_with_vowel(tuple_1)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(tuple_1)
    assert var_14 is False
    var_15 = module_0.ends_dentals(tuple_1)
    assert var_15 is False
    float_1 = 3821.0
    list_0 = [float_1, float_1, float_1]
    var_16 = module_0.devoice(list_0)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_3)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(var_2)
    assert var_19 == "1X,mBK\\"


def test_case_678():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_0)
    assert var_2 is False
    str_1 = "(q]I"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "(q]I"
    var_4 = module_0.devoice(var_3)
    assert var_4 == "(q]I"
    var_5 = module_0.starts_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(list_0)
    assert var_10 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(bytes_3)
    assert var_15 is False
    str_3 = "`<)4H\rS\x0c"
    var_16 = module_0.ends_dentals(str_3)
    assert var_16 is False
    str_4 = "ORrJ2:"
    var_17 = module_0.starts_with_vowel(str_4)
    assert var_17 is False
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_18 = module_0.deduplicate(bytes_4)
    assert var_18 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    str_5 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_5, str_5, str_5}
    list_1 = [set_1, str_5, str_5]
    var_21 = module_0.ends_dentals(list_1)
    assert var_21 is False
    tuple_0 = (var_5,)
    var_22 = module_0.devoice(tuple_0)


def test_case_679():
    tuple_0 = ()
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.devoice(var_14)
    dict_1 = {}
    var_16 = module_0.deduplicate(dict_1)
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_17 = module_0.ends_with_vowel(tuple_2)
    assert var_17 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_4)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    var_21 = module_0.devoice(var_19)
    bool_1 = False
    set_1 = {bool_1}
    var_22 = module_0.devoice(set_1)
    var_23 = module_0.devoice(var_22)
    var_24 = module_0.devoice(var_15)


def test_case_680():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    list_0 = [bytes_1, bytes_1]
    var_5 = module_0.devoice(list_0)
    str_1 = "(q]I"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    str_2 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_6)
    assert var_10 is False


def test_case_681():
    str_0 = "~&KnWE+1U"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_1 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    var_11 = module_0.devoice(var_8)
    var_12 = module_0.ends_with_vowel(var_8)
    assert var_12 is False


def test_case_682():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.devoice(tuple_0)


def test_case_683():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(var_12)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_16 = module_0.devoice(str_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_0)
    assert var_19 is False
    str_1 = "ORrJ2:"
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_7 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_21 = module_0.deduplicate(bytes_7)
    assert var_21 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(var_22)
    assert var_23 is False
    str_2 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_2)
    assert var_24 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_3)
    assert var_25 is False
    var_26 = module_0.ends_dentals(str_2)
    assert var_26 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_27 = module_0.devoice(list_0)
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_9)
    assert var_28 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    var_31 = module_0.ends_dentals(bytes_3)
    assert var_31 is False


def test_case_684():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "K3A!V\x0c#87"
    bool_1 = True
    tuple_1 = (bool_1, bool_1)
    list_0 = [tuple_1]
    var_11 = module_0.ends_with_vowel(list_0)
    assert var_11 is False
    var_12 = module_0.deduplicate(list_0)


def test_case_685():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_4 = b"dV\xd8n_n\xe0\x87K"
    var_9 = module_0.ends_dentals(bytes_4)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_6)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_5)
    assert var_14 is False
    str_1 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_16 = module_0.devoice(tuple_0)
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    var_18 = module_0.deduplicate(str_1)
    assert var_18 == "K3A!V\x0c#87"
    set_0 = set()
    tuple_1 = (set_0,)
    var_19 = module_0.ends_with_vowel(tuple_1)
    assert var_19 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_3, str_3, str_3}
    list_0 = [set_1, str_3, str_3]
    var_20 = module_0.ends_dentals(list_0)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.devoice(var_27)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    bytes_11 = b"^\xd5\xd00{J"
    var_33 = module_0.deduplicate(bytes_11)
    assert var_33 == b"^\xd5\xd00{J"
    dict_1 = {var_33: var_33, bytes_11: var_33}
    bool_1 = False
    list_1 = [dict_1, var_33, bool_1, bytes_11]
    var_34 = module_0.devoice(list_1)
    var_35 = module_0.ends_dentals(var_33)
    assert var_35 is False


def test_case_686():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "`<)4H\rS\x0c"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_2)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.devoice(var_3)
    assert var_6 == "1X,mBK\\"
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.starts_with_vowel(bytes_2)
    assert var_9 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    list_0 = [bytes_3, bytes_3]
    var_11 = module_0.devoice(list_0)
    bytes_4 = b"^\xd5\xd00{J"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"^\xd5\xd00{J"
    dict_0 = {var_12: var_12, bytes_4: var_12}
    bool_0 = False
    list_1 = [dict_0, var_12, bool_0, bytes_4]
    var_13 = module_0.devoice(list_1)
    var_14 = module_0.devoice(list_1)
    str_3 = "\\Z8@Jg"
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    var_16 = module_0.deduplicate(dict_0)


def test_case_687():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "(q]I"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.devoice(var_5)
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    list_0 = [bytes_2, bytes_2]
    var_9 = module_0.devoice(list_0)
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "(q]I"
    str_1 = "ORrJ2:"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(var_15)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.devoice(bytes_5)
    bool_0 = False
    dict_0 = {bytes_5: var_17, var_17: bool_0, bool_0: bytes_5}
    var_18 = module_0.starts_with_vowel(dict_0)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_2)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.deduplicate(var_25)
    assert var_28 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "1X,mBK\\"
    var_29 = module_0.devoice(str_3)
    var_30 = module_0.ends_dentals(str_3)
    assert var_30 is False
    bytes_9 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_31 = module_0.ends_dentals(bytes_9)
    assert var_31 is False
    list_1 = [bytes_9, bytes_9]
    var_32 = module_0.devoice(list_1)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_2 = [set_1, str_4, str_4]
    var_33 = module_0.ends_dentals(list_2)
    assert var_33 is False
    var_34 = module_0.deduplicate(var_17)
    assert var_34 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"


def test_case_688():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    int_0 = 1176
    bool_1 = False
    tuple_1 = (bool_1,)
    tuple_2 = (int_0, tuple_1)
    var_2 = module_0.ends_with_vowel(tuple_2)
    assert var_2 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_3 = module_0.ends_dentals(list_0)
    assert var_3 is False
    bytes_0 = b"^\xd5\xd00{J"
    var_4 = module_0.deduplicate(bytes_0)
    assert var_4 == b"^\xd5\xd00{J"
    dict_1 = {var_4: var_4, bytes_0: var_4}
    bool_2 = False
    list_1 = [dict_1, var_4, bool_2, bytes_0]
    var_5 = module_0.devoice(list_1)
    str_2 = "1X,mBK\\"
    var_6 = module_0.devoice(str_2)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    var_12 = module_0.devoice(var_5)


def test_case_689():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "#iW\rr^3:"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_5)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_6)
    assert var_15 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_7)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_with_vowel(bytes_7)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_8)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_8)
    assert var_24 is False


def test_case_690():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'


def test_case_691():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False


def test_case_692():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_1 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_3)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    assert var_9 == "1X,mBK\\"
    var_10 = module_0.ends_dentals(str_2)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    assert var_11 == "1X,mBK\\"
    var_12 = module_0.devoice(var_9)
    assert var_12 == "1X,mBK\\"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.deduplicate(var_13)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.ends_with_vowel(bytes_2)
    assert var_20 is False


def test_case_693():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.ends_dentals(tuple_0)
    assert var_9 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.devoice(bytes_4)
    bool_0 = False
    dict_0 = {bytes_4: var_10, var_10: bool_0, bool_0: bytes_4}
    var_11 = module_0.starts_with_vowel(dict_0)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(bytes_5)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_22 = module_0.ends_dentals(list_0)
    assert var_22 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.starts_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_9)
    assert var_25 is False
    var_26 = module_0.deduplicate(str_0)
    assert var_26 == 'UErxwv/"J/CaV&Z,q!'
    bytes_10 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_27 = module_0.deduplicate(bytes_10)
    assert var_27 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_28 = module_0.starts_with_vowel(bytes_10)
    assert var_28 is False
    bytes_11 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_29 = module_0.ends_dentals(bytes_11)
    assert var_29 is False
    bytes_12 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.deduplicate(bytes_12)
    assert var_30 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_1 = (set_1,)
    var_31 = module_0.ends_with_vowel(tuple_1)
    assert var_31 is False
    var_32 = module_0.devoice(var_30)
    assert var_32 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_33 = module_0.deduplicate(var_32)
    assert var_33 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_34 = module_0.deduplicate(var_2)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_694():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_1 = module_0.ends_dentals(list_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_2)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.deduplicate(var_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_695():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    str_2 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_2)
    assert var_6 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_3)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    list_0 = [bytes_2, bytes_2]
    var_10 = module_0.devoice(list_0)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False


def test_case_696():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    str_1 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_5 = module_0.devoice(tuple_0)
    var_6 = module_0.ends_dentals(var_5)
    assert var_6 is False
    var_7 = module_0.deduplicate(str_1)
    assert var_7 == "K3A!V\x0c#87"
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_8 = module_0.starts_with_vowel(tuple_1)
    assert var_8 is False
    str_3 = "ORrJ2:"
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_10 = module_0.deduplicate(bytes_1)
    assert var_10 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(var_11)
    assert var_12 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_2 = (set_0,)
    var_15 = module_0.ends_with_vowel(tuple_2)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(var_16)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_4)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_4)
    assert var_19 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_21 = module_0.ends_with_vowel(bytes_6)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_5)
    assert var_22 is False
    float_1 = -1663.70075
    tuple_3 = (float_1,)
    var_23 = module_0.starts_with_vowel(tuple_3)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(tuple_3)
    assert var_24 is False
    float_2 = 3821.0
    list_0 = [float_2, float_2, float_2]
    var_25 = module_0.devoice(list_0)
    str_5 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_26 = module_0.ends_with_vowel(str_5)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_2)
    assert var_27 is False


def test_case_697():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "K3A!V\x0c#87"
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    str_3 = "(q]I"
    var_8 = module_0.devoice(str_3)
    var_9 = module_0.devoice(var_8)
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_6)
    assert var_11 is False


def test_case_698():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_0)
    assert var_5 is False


def test_case_699():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_1 = [set_0, str_0, str_0]
    var_1 = module_0.ends_dentals(list_1)
    assert var_1 is False
    str_1 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_2)
    assert var_4 is False
    var_5 = module_0.devoice(str_1)
    assert var_5 == "\\Z8@Jg"
    str_3 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_3)
    assert var_6 == "%OJ<'vPCn@4"
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    list_2 = [bytes_0, bytes_0]
    var_8 = module_0.devoice(list_2)
    str_4 = "(q]I"
    var_9 = module_0.devoice(str_4)
    assert var_9 == "(q]I"
    var_10 = module_0.devoice(var_9)
    assert var_10 == "(q]I"
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    str_5 = "1X,mBK\\"
    var_12 = module_0.devoice(str_5)
    assert var_12 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_1)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_5)
    assert var_15 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_2)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.devoice(bytes_3)
    bool_1 = False
    dict_0 = {bytes_3: var_18, var_18: bool_1, bool_1: bytes_3}
    var_19 = module_0.starts_with_vowel(dict_0)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_16)
    assert var_20 is False


def test_case_700():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    assert var_1 == "\\Z8@Jg"


def test_case_701():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"^\xd5\xd00{J"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"^\xd5\xd00{J"
    dict_0 = {var_1: var_1, bytes_1: var_1}
    bool_0 = False
    list_0 = [dict_0, var_1, bool_0, bytes_1]
    var_2 = module_0.devoice(list_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_3)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_3)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)


def test_case_702():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_6 = module_0.ends_with_vowel(tuple_2)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_3 = (set_1,)
    var_14 = module_0.ends_with_vowel(tuple_3)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(var_15)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_2 = {str_1, str_1, str_1}
    list_0 = [set_2, str_1, str_1]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    bool_1 = False
    bool_2 = True
    list_1 = [bool_1, bool_1, bool_2, bool_1]
    var_19 = module_0.ends_with_vowel(list_1)
    assert var_19 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_7)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.ends_with_vowel(bytes_4)
    assert var_21 is False


def test_case_703():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_6)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_4)
    assert var_14 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_15 = module_0.ends_with_vowel(list_0)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.deduplicate(var_16)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.deduplicate(tuple_0)


def test_case_704():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_2 = module_0.ends_dentals(list_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.devoice(var_9)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_5)
    assert var_15 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_0 = (set_1,)
    var_17 = module_0.ends_with_vowel(tuple_0)
    assert var_17 is False
    var_18 = module_0.devoice(var_16)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_19)
    assert var_21 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    list_1 = [tuple_1]
    var_29 = module_0.ends_with_vowel(list_1)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_18)
    assert var_30 is False


def test_case_705():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    str_1 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    var_9 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(tuple_0)
    assert var_14 is False
    str_3 = "ORrJ2:"
    var_15 = module_0.starts_with_vowel(str_3)
    assert var_15 is False
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    str_4 = "`<)4H\rS\x0c"
    var_19 = module_0.ends_dentals(str_4)
    assert var_19 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_6)
    assert var_20 is False
    str_5 = "1X,mBK\\"
    var_21 = module_0.devoice(str_5)
    var_22 = module_0.ends_dentals(str_5)
    assert var_22 is False
    var_23 = module_0.devoice(var_21)
    var_24 = module_0.devoice(var_21)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_7)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.starts_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(bytes_7)
    assert var_27 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_28 = module_0.ends_dentals(bytes_8)
    assert var_28 is False
    str_6 = "1X,mBK\\"
    var_29 = module_0.devoice(str_6)
    var_30 = module_0.devoice(bytes_8)
    str_7 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_7)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(str_2)
    assert var_32 is False


def test_case_706():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.starts_with_vowel(bytes_3)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_10 = module_0.starts_with_vowel(tuple_0)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_dentals(bytes_5)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(tuple_0)
    assert var_16 is False


def test_case_707():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_4)
    assert var_8 is False
    str_0 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_12 = module_0.ends_with_vowel(tuple_2)
    assert var_12 is False
    var_13 = module_0.deduplicate(tuple_2)


def test_case_708():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    var_9 = module_0.deduplicate(str_1)
    assert var_9 == 'UErxwv/"J/CaV&Z,q!'
    dict_0 = {}
    var_10 = module_0.deduplicate(dict_0)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(tuple_0)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_3)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_3)
    assert var_23 is False
    str_4 = ")sE\nhxARG\r;/4"
    var_24 = module_0.devoice(str_4)
    str_5 = "\\Z8@Jg"
    var_25 = module_0.ends_with_vowel(str_5)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_3)
    assert var_26 is False


def test_case_709():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'
    dict_0 = {}
    var_5 = module_0.deduplicate(dict_0)
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_1)
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.ends_with_vowel(bytes_1)
    assert var_8 is False
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    var_16 = module_0.ends_dentals(str_3)
    assert var_16 is False
    var_17 = module_0.ends_dentals(str_3)
    assert var_17 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_3)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_5)
    var_23 = module_0.devoice(bytes_5)
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_24 = module_0.ends_dentals(bytes_6)
    assert var_24 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_7)
    set_1 = set()
    tuple_0 = (set_1,)
    var_26 = module_0.ends_with_vowel(tuple_0)
    assert var_26 is False
    var_27 = module_0.devoice(var_25)
    var_28 = module_0.devoice(var_20)


def test_case_710():
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    var_12 = module_0.ends_dentals(str_0)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(bytes_1)
    assert var_15 is False


def test_case_711():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    var_6 = module_0.devoice(str_2)
    var_7 = module_0.ends_with_vowel(var_0)
    assert var_7 is False


def test_case_712():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False


def test_case_713():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    str_0 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "%OJ<'vPCn@4"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_13 = module_0.ends_with_vowel(tuple_1)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_1)
    assert var_14 is False


def test_case_714():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "(q]I"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "(q]I"
    var_2 = module_0.devoice(var_1)
    assert var_2 == "(q]I"
    var_3 = module_0.starts_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    list_0 = [bytes_1, bytes_1]
    var_5 = module_0.devoice(list_0)
    var_6 = module_0.deduplicate(str_0)
    assert var_6 == "(q]I"
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.deduplicate(var_14)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.ends_dentals(bytes_5)
    assert var_21 is False


def test_case_715():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    str_1 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_2)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    str_3 = ")sE\nhxARG\r;/4"
    var_9 = module_0.devoice(str_3)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_4)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_3)
    assert var_18 is False


def test_case_716():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_3)
    assert var_5 is False
    str_2 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_2)
    assert var_6 == "%OJ<'vPCn@4"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_dentals(bytes_3)
    assert var_15 is False
    str_3 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_17 = module_0.devoice(tuple_0)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    var_19 = module_0.deduplicate(str_3)
    assert var_19 == "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(var_9)
    assert var_20 is False


def test_case_717():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_7 = module_0.ends_dentals(list_1)
    assert var_7 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    var_11 = module_0.deduplicate(str_1)
    assert var_11 == 'UErxwv/"J/CaV&Z,q!'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(bytes_3)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(bytes_5)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_8)
    assert var_23 is False


def test_case_718():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.deduplicate(str_0)
    assert var_1 == "[YJ\r-1]~}RBJ\x0c\n@"


def test_case_719():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    list_1 = [bytes_1, bytes_1]
    var_3 = module_0.devoice(list_1)
    dict_1 = {}
    var_4 = module_0.deduplicate(dict_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_10)
    str_0 = "ORrJ2:"
    var_12 = module_0.starts_with_vowel(str_0)
    assert var_12 is False
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_13 = module_0.deduplicate(bytes_4)
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    var_15 = module_0.ends_dentals(var_14)
    assert var_15 is False
    str_1 = "ymWXCWpM"
    bool_1 = False
    dict_2 = {bool_1: bool_1, str_1: bool_1, bool_1: str_1}
    tuple_0 = (str_1, bool_1, dict_2)
    var_16 = module_0.devoice(tuple_0)
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    str_2 = "\\Z8@Jg"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    var_21 = module_0.devoice(str_2)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(str_2)
    assert var_23 is False
    var_24 = module_0.deduplicate(var_16)


def test_case_720():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_1 = "\\Z8@Jg"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_10 = module_0.starts_with_vowel(bytes_2)
    assert var_10 is False
    str_2 = "%OJ<'vPCn@4"
    var_11 = module_0.deduplicate(str_2)
    assert var_11 == "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(bytes_0)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_721():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_2 = "`<)4H\rS\x0c"
    var_3 = module_0.ends_dentals(str_2)
    assert var_3 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    str_3 = "1X,mBK\\"
    var_5 = module_0.devoice(str_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_3)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    assert var_7 == "1X,mBK\\"
    var_8 = module_0.devoice(var_5)
    assert var_8 == "1X,mBK\\"
    str_4 = "~&KnWE+1U"
    var_9 = module_0.ends_dentals(str_4)
    assert var_9 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_10 = module_0.ends_with_vowel(list_0)
    assert var_10 is False
    str_5 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_11 = module_0.ends_with_vowel(str_5)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_5)
    assert var_12 == "[YJ\r-1]~}RBJ\x0c\n@"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_1)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_3 = b"^\xd5\xd00{J"
    var_17 = module_0.deduplicate(bytes_3)
    assert var_17 == b"^\xd5\xd00{J"
    dict_0 = {var_17: var_17, bytes_3: var_17}
    bool_1 = False
    list_1 = [dict_0, var_17, bool_1, bytes_3]
    var_18 = module_0.devoice(list_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_5)
    assert var_24 is False


def test_case_722():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    str_1 = "#iW\rr^3:"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False


def test_case_723():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    bytes_2 = b"^\xd5\xd00{J"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"^\xd5\xd00{J"
    dict_0 = {var_5: var_5, bytes_2: var_5}
    bool_0 = False
    list_0 = [dict_0, var_5, bool_0, bytes_2]
    var_6 = module_0.devoice(list_0)
    var_7 = module_0.deduplicate(list_0)


def test_case_724():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_725():
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_1 = -1663.70075
    tuple_0 = (float_1,)
    var_12 = module_0.starts_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(tuple_0)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_11)
    assert var_15 is False


def test_case_726():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False


def test_case_727():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    str_2 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_2)
    assert var_5 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_0)
    assert var_8 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.devoice(var_14)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_3)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.ends_dentals(bytes_3)
    assert var_18 is False
    str_4 = "1X,mBK\\"
    var_19 = module_0.devoice(str_4)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_23 = module_0.ends_dentals(bytes_5)
    assert var_23 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_6)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_25 = module_0.ends_with_vowel(tuple_0)
    assert var_25 is False
    var_26 = module_0.devoice(var_24)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(var_26)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_7)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_8)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.devoice(bytes_8)
    var_34 = module_0.devoice(var_28)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_9)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_10)
    var_38 = module_0.starts_with_vowel(var_35)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_37)
    assert var_39 is False
    var_40 = module_0.deduplicate(bytes_9)
    assert var_40 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_41 = module_0.devoice(var_1)


def test_case_728():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    var_2 = module_0.deduplicate(var_0)
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_1)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_8)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.deduplicate(var_13)
    str_1 = "(q]I"
    var_20 = module_0.devoice(str_1)
    var_21 = module_0.devoice(var_20)
    var_22 = module_0.starts_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False


def test_case_729():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    str_0 = "\\Z8@Jg"
    var_11 = module_0.ends_with_vowel(str_0)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    var_13 = module_0.ends_dentals(str_1)
    assert var_13 is False
    var_14 = module_0.devoice(str_0)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_0)
    assert var_16 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(str_2)
    assert var_18 == "Kd tt@\x0c9{k:|lpK9"


def test_case_730():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_3)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_5)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_7)
    assert var_12 is False
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    var_14 = module_0.ends_dentals(str_0)
    assert var_14 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.ends_dentals(bytes_7)
    assert var_17 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_8)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_19 = module_0.ends_with_vowel(tuple_0)
    assert var_19 is False
    var_20 = module_0.devoice(var_18)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_9 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_21 = module_0.deduplicate(bytes_9)
    assert var_21 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_22 = module_0.starts_with_vowel(bytes_9)
    assert var_22 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_10)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_24 = module_0.starts_with_vowel(tuple_1)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(tuple_1)
    assert var_25 is False
    var_26 = module_0.ends_dentals(tuple_1)
    assert var_26 is False
    var_27 = module_0.deduplicate(bytes_9)
    assert var_27 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"


def test_case_731():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_7 = module_0.ends_with_vowel(tuple_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_0)
    assert var_18 is False


def test_case_732():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_4)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_733():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_0)
    assert var_8 is False
    str_1 = "\\Z8@Jg"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(str_1)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    str_2 = "`<)4H\rS\x0c"
    var_16 = module_0.ends_dentals(str_2)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(bytes_5)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_21 = module_0.devoice(bytes_6)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(bytes_8)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_22)
    assert var_26 is False
    var_27 = module_0.devoice(var_3)


def test_case_734():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    assert var_1 == "\\Z8@Jg"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    str_1 = ")sE\nhxARG\r;/4"
    var_7 = module_0.devoice(str_1)
    tuple_0 = ()
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.devoice(var_2)


def test_case_735():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_0)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_1)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(tuple_1)
    assert var_6 is False
    var_7 = module_0.ends_dentals(tuple_1)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_12 = module_0.ends_dentals(list_0)
    assert var_12 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_3)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.ends_with_vowel(bytes_4)
    assert var_21 is False


def test_case_736():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(var_4)
    assert var_8 == 'UErxwv/"J/CaV&Z,q!'


def test_case_737():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.devoice(bytes_2)
    bool_0 = False
    dict_0 = {bytes_2: var_9, var_9: bool_0, bool_0: bytes_2}
    var_10 = module_0.starts_with_vowel(dict_0)
    assert var_10 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_11 = module_0.devoice(list_1)
    str_2 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    var_13 = module_0.deduplicate(str_2)
    assert var_13 == "[YJ\r-1]~}RBJ\x0c\n@"
    str_3 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_3)
    assert var_14 is False
    str_4 = "ymWXCWpM"
    bool_1 = False
    dict_1 = {bool_1: bool_1, str_4: bool_1, bool_1: str_4}
    tuple_0 = (str_4, bool_1, dict_1)
    var_15 = module_0.devoice(tuple_0)
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    var_17 = module_0.deduplicate(str_3)
    assert var_17 == "K3A!V\x0c#87"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_3)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_3)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_4)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.ends_dentals(var_20)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_0)
    assert var_22 is False


def test_case_738():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(var_0)
    assert var_2 is False


def test_case_739():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    list_0 = [bytes_0, bytes_0]
    var_4 = module_0.devoice(list_0)
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "(q]I"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_1)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_1)
    assert var_10 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_12 = module_0.starts_with_vowel(bytes_3)
    assert var_12 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_2)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False
    str_4 = "%OJ<'vPCn@4"
    var_18 = module_0.deduplicate(str_4)
    assert var_18 == "%OJ<'vPCn@4"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_5)
    assert var_24 is False
    var_25 = module_0.ends_dentals(bytes_5)
    assert var_25 is False
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_26 = module_0.ends_dentals(bytes_7)
    assert var_26 is False
    list_1 = [bytes_7, bytes_7]
    var_27 = module_0.devoice(list_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_dentals(var_28)
    assert var_31 is False
    var_32 = module_0.ends_dentals(bytes_8)
    assert var_32 is False
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_33 = module_0.deduplicate(bytes_10)
    assert var_33 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(bytes_11)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_33)
    assert var_37 is False
    var_38 = module_0.devoice(var_33)
    assert var_38 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_39 = module_0.starts_with_vowel(var_18)
    assert var_39 is False


def test_case_740():
    str_0 = "9#uHWMgkuu@KG7[3"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_741():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    set_0 = set()
    tuple_0 = (set_0,)
    var_6 = module_0.ends_with_vowel(tuple_0)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    str_0 = "9#uHWMgkuu@KG7[3"
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_10 = module_0.ends_with_vowel(list_0)
    assert var_10 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_11 = module_0.devoice(list_1)
    str_1 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = "ymWXCWpM"
    bool_2 = False
    dict_0 = {bool_2: bool_2, str_2: bool_2, bool_2: str_2}
    tuple_1 = (str_2, bool_2, dict_0)
    var_13 = module_0.devoice(tuple_1)
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    var_15 = module_0.deduplicate(str_1)
    assert var_15 == "K3A!V\x0c#87"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_3)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_21 = module_0.ends_dentals(bytes_5)
    assert var_21 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_6)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_2 = (set_1,)
    var_23 = module_0.ends_with_vowel(tuple_2)
    assert var_23 is False
    var_24 = module_0.devoice(var_22)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.ends_with_vowel(bytes_4)
    assert var_25 is False


def test_case_742():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.devoice(dict_0)
    str_0 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.devoice(var_4)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_12)
    var_14 = module_0.deduplicate(str_1)
    assert var_14 == "1X,mBK\\"


def test_case_743():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(var_1)
    assert var_3 is False
    str_0 = "(q]I"
    var_4 = module_0.devoice(str_0)
    var_5 = module_0.devoice(var_4)
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_1 = [set_0, str_1, str_1]
    var_11 = module_0.ends_dentals(list_1)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(bytes_0)
    assert var_19 is False


def test_case_744():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_1 = module_0.ends_dentals(list_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.starts_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    var_5 = module_0.deduplicate(str_1)
    assert var_5 == 'UErxwv/"J/CaV&Z,q!'
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.deduplicate(var_6)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_1)
    assert var_14 is False


def test_case_745():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    tuple_0 = ()
    var_8 = module_0.devoice(tuple_0)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    var_11 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_with_vowel(bytes_6)
    assert var_19 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_20 = module_0.ends_dentals(list_0)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_7)
    assert var_24 is False
    str_4 = "1X,mBK\\"
    var_25 = module_0.devoice(str_4)
    str_5 = "K3A!V\x0c#87"
    var_26 = module_0.starts_with_vowel(str_5)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(str_5)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_25)
    assert var_30 is False


def test_case_746():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    str_1 = "`<)4H\rS\x0c"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    assert var_7 == "1X,mBK\\"
    var_8 = module_0.devoice(var_5)
    assert var_8 == "1X,mBK\\"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.deduplicate(bytes_1)
    assert var_9 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_10 = module_0.starts_with_vowel(bytes_1)
    assert var_10 is False
    str_3 = "\\Z8@Jg"
    var_11 = module_0.ends_with_vowel(str_3)
    assert var_11 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    str_4 = "1X,mBK\\"
    var_13 = module_0.devoice(str_4)
    assert var_13 == "1X,mBK\\"
    var_14 = module_0.devoice(bytes_2)
    assert var_14 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_3)
    assert var_19 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_21 = module_0.starts_with_vowel(tuple_0)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(tuple_0)
    assert var_22 is False
    var_23 = module_0.ends_dentals(tuple_0)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_0)
    assert var_24 is False


def test_case_747():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    str_0 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_0)
    assert var_13 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_0)
    assert var_15 is False
    bytes_4 = b"^\xd5\xd00{J"
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"^\xd5\xd00{J"
    dict_0 = {var_16: var_16, bytes_4: var_16}
    bool_0 = False
    list_0 = [dict_0, var_16, bool_0, bytes_4]
    var_17 = module_0.devoice(list_0)
    var_18 = module_0.devoice(list_0)
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False


def test_case_748():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    str_0 = "#iW\rr^3:"
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_2)
    assert var_9 is False


def test_case_749():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'
    str_1 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_1)
    assert var_5 is False
    var_6 = module_0.devoice(str_1)
    assert var_6 == "\\Z8@Jg"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_1)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.ends_dentals(bytes_1)
    assert var_9 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False


def test_case_750():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_4)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_6)
    assert var_10 is False
    var_11 = module_0.devoice(var_6)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "9#uHWMgkuu@KG7[3"
    var_12 = module_0.starts_with_vowel(str_0)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.devoice(var_13)
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.ends_dentals(bytes_7)
    assert var_20 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_1)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_1)
    assert var_22 is False
    str_2 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_23 = module_0.ends_with_vowel(str_2)
    assert var_23 is False
    var_24 = module_0.deduplicate(str_2)
    assert var_24 == "[YJ\r-1]~}RBJ\x0c\n@"
    var_25 = module_0.starts_with_vowel(var_2)
    assert var_25 is False


def test_case_751():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_4)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    var_11 = module_0.devoice(bytes_4)
    str_1 = "#iW\rr^3:"
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_with_vowel(bytes_7)
    assert var_19 is False
    str_2 = "1X,mBK\\"
    var_20 = module_0.devoice(str_2)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_20)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_dentals(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.deduplicate(bytes_11)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.deduplicate(var_18)
    assert var_32 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_752():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False


def test_case_753():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_1)
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_1 = "#iW\rr^3:"
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.deduplicate(str_1)
    assert var_7 == "#iW\rr^3:"


def test_case_754():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bool_0 = False
    set_0 = {bool_0}
    var_4 = module_0.devoice(set_0)
    var_5 = module_0.devoice(var_4)
    str_0 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_0)
    assert var_6 == "%OJ<'vPCn@4"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    str_1 = "#iW\rr^3:"
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(var_11)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_15)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_1)
    assert var_20 is False


def test_case_755():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_3)
    assert var_8 is False
    str_3 = "\\Z8@Jg"
    var_9 = module_0.ends_with_vowel(str_3)
    assert var_9 is False
    str_4 = "1X,mBK\\"
    var_10 = module_0.devoice(str_4)
    var_11 = module_0.ends_dentals(str_4)
    assert var_11 is False
    var_12 = module_0.devoice(str_3)
    str_5 = "#iW\rr^3:"
    var_13 = module_0.ends_dentals(str_5)
    assert var_13 is False
    str_6 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_6)
    assert var_14 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_2)
    assert var_15 is False
    str_7 = "1X,mBK\\"
    var_16 = module_0.devoice(str_7)
    var_17 = module_0.ends_dentals(str_7)
    assert var_17 is False
    var_18 = module_0.devoice(var_16)
    var_19 = module_0.devoice(var_16)
    str_8 = "%OJ<'vPCn@4"
    var_20 = module_0.deduplicate(str_8)
    assert var_20 == "%OJ<'vPCn@4"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_3)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_23 = module_0.ends_dentals(bytes_4)
    assert var_23 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_5)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_25 = module_0.ends_with_vowel(tuple_0)
    assert var_25 is False
    var_26 = module_0.devoice(var_24)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_6)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_7)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.deduplicate(bytes_8)
    assert var_31 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_32 = module_0.ends_dentals(bytes_7)
    assert var_32 is False
    var_33 = module_0.ends_dentals(var_19)
    assert var_33 is False


def test_case_756():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_1)
    assert var_1 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_2)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(var_4)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    str_1 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_757():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.deduplicate(str_0)
    assert var_1 == "[YJ\r-1]~}RBJ\x0c\n@"
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_5 = module_0.ends_with_vowel(tuple_1)
    assert var_5 is False
    str_2 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_2)
    assert var_6 == "%OJ<'vPCn@4"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(tuple_1)
    assert var_8 is False


def test_case_758():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_1)
    assert var_5 is False


def test_case_759():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_0 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_0)
    assert var_14 is False


def test_case_760():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_8 = module_0.starts_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(tuple_0)
    assert var_9 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False
    str_1 = "1X,mBK\\"
    var_11 = module_0.devoice(str_1)
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    var_13 = module_0.devoice(var_11)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.deduplicate(var_17)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.deduplicate(bytes_1)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_761():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    str_1 = "(q]I"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.devoice(var_8)
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    list_0 = [bytes_3, bytes_3]
    var_12 = module_0.devoice(list_0)
    var_13 = module_0.deduplicate(str_1)
    assert var_13 == "(q]I"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_4)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_6)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(bytes_6)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_26)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(bytes_6)
    assert var_30 is False


def test_case_762():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_0)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_3)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_6)
    assert var_10 is False


def test_case_763():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    var_2 = module_0.devoice(list_0)
    str_0 = "(q]I"
    var_3 = module_0.devoice(str_0)
    var_4 = module_0.devoice(var_3)
    var_5 = module_0.starts_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    list_1 = [bytes_1, bytes_1]
    var_7 = module_0.devoice(list_1)
    var_8 = module_0.deduplicate(str_0)
    assert var_8 == "(q]I"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.devoice(var_16)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(bytes_5)
    assert var_22 is False
    str_1 = "1X,mBK\\"
    var_23 = module_0.devoice(str_1)
    var_24 = module_0.ends_dentals(str_1)
    assert var_24 is False
    var_25 = module_0.ends_dentals(str_1)
    assert var_25 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_7)
    assert var_26 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_27 = module_0.ends_dentals(bytes_8)
    assert var_27 is False
    list_2 = [bytes_8, bytes_8]
    var_28 = module_0.devoice(list_2)
    bytes_9 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_29 = module_0.deduplicate(bytes_9)
    assert var_29 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_30 = module_0.starts_with_vowel(bytes_0)
    assert var_30 is False


def test_case_764():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    str_1 = "\\Z8@Jg"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.deduplicate(str_0)
    assert var_17 == "1X,mBK\\"


def test_case_765():
    complex_0 = -2118.041034 - 1769.966j
    str_0 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_0, complex_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_766():
    bytes_0 = b"\xb1f_\x1d\x06\xfe\xce{\xb4\x14"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, bytes_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_767():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(var_0)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_3)
    assert var_5 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_6)
    assert var_10 is False
    var_11 = module_0.devoice(var_6)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_12 = module_0.ends_dentals(list_0)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(list_0)
    assert var_14 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_3)
    assert var_15 is False
    list_1 = [bytes_3, bytes_3]
    var_16 = module_0.devoice(list_1)
    str_2 = "`<)4H\rS\x0c"
    var_17 = module_0.ends_dentals(str_2)
    assert var_17 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_4)
    assert var_18 is False
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    var_21 = module_0.devoice(var_19)
    var_22 = module_0.devoice(var_19)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_5)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_7)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_8)
    var_31 = module_0.ends_dentals(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.deduplicate(bytes_8)
    assert var_33 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_34 = module_0.deduplicate(dict_0)
    var_35 = module_0.deduplicate(var_30)


def test_case_768():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.deduplicate(str_0)
    assert var_1 == "[YJ\r-1]~}RBJ\x0c\n@"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False


def test_case_769():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"^\xd5\xd00{J"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"^\xd5\xd00{J"
    dict_0 = {var_6: var_6, bytes_2: var_6}
    bool_0 = False
    list_0 = [dict_0, var_6, bool_0, bytes_2]
    var_7 = module_0.devoice(list_0)
    var_8 = module_0.devoice(list_0)
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_11 = module_0.starts_with_vowel(tuple_1)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(tuple_1)
    assert var_12 is False
    var_13 = module_0.ends_dentals(tuple_1)
    assert var_13 is False
    str_0 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_0)
    assert var_14 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_5)
    assert var_16 is False


def test_case_770():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    str_1 = "\\Z8@Jg"
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    var_19 = module_0.ends_dentals(str_2)
    assert var_19 is False
    var_20 = module_0.devoice(str_1)
    var_21 = module_0.starts_with_vowel(bytes_5)
    assert var_21 is False


def test_case_771():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_1)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(tuple_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(tuple_1)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    str_2 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_2)
    assert var_14 == "[YJ\r-1]~}RBJ\x0c\n@"
    var_15 = module_0.devoice(var_4)


def test_case_772():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    dict_0 = {}
    var_5 = module_0.devoice(dict_0)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    str_0 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_3)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_dentals(var_1)
    assert var_19 is False


def test_case_773():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_1 = [dict_0, bool_0, bool_0]
    var_4 = module_0.devoice(list_1)
    var_5 = module_0.starts_with_vowel(dict_0)
    assert var_5 is False


def test_case_774():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_dentals(tuple_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(bytes_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_7)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_16)
    assert var_20 is False
    var_21 = module_0.devoice(var_16)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.starts_with_vowel(str_0)
    assert var_22 is False


def test_case_775():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_0)


def test_case_776():
    str_0 = '.J"-Kc.'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.starts_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    tuple_0 = (var_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False


def test_case_777():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_2)
    assert var_3 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_3)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_4)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.devoice(var_4)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(list_0)
    assert var_13 is False
    str_1 = "#iW\rr^3:"
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False
    str_3 = "\\Z8@Jg"
    var_20 = module_0.ends_with_vowel(str_3)
    assert var_20 is False
    str_4 = "1X,mBK\\"
    var_21 = module_0.devoice(str_4)
    var_22 = module_0.ends_dentals(str_4)
    assert var_22 is False
    var_23 = module_0.devoice(str_3)
    var_24 = module_0.starts_with_vowel(bytes_1)
    assert var_24 is False


def test_case_778():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "(q]I"
    var_2 = module_0.devoice(str_0)
    var_3 = module_0.devoice(var_2)
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    list_1 = [bytes_1, bytes_1]
    var_6 = module_0.devoice(list_1)
    var_7 = module_0.deduplicate(str_0)
    assert var_7 == "(q]I"
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_2 = [set_0, str_1, str_1]
    var_8 = module_0.ends_dentals(list_2)
    assert var_8 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_1)
    assert var_12 == 'UErxwv/"J/CaV&Z,q!'
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_13)
    assert var_18 is False
    float_0 = 3821.0
    list_3 = [float_0, float_0, float_0]
    var_19 = module_0.devoice(list_3)
    str_3 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_5)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.ends_with_vowel(bytes_5)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    str_4 = "\\Z8@Jg"
    var_25 = module_0.ends_with_vowel(str_4)
    assert var_25 is False
    var_26 = module_0.devoice(str_4)
    str_5 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_5, str_5, str_5}
    list_4 = [set_1, str_5, str_5]
    var_27 = module_0.ends_dentals(list_4)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(str_5)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(list_4)
    assert var_29 is False
    var_30 = module_0.deduplicate(bytes_5)
    assert var_30 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_779():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_1)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(tuple_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(bytes_0)
    assert var_7 is False


def test_case_780():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    assert var_1 == "\\Z8@Jg"
    var_2 = module_0.deduplicate(var_1)
    assert var_2 == "\\Z8@Jg"


def test_case_781():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    str_0 = "%OJ<'vPCn@4"
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "%OJ<'vPCn@4"
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    list_0 = [tuple_1]
    var_4 = module_0.ends_with_vowel(list_0)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_7)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_6)
    assert var_16 is False
    str_1 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    var_19 = module_0.ends_dentals(str_1)
    assert var_19 is False
    var_20 = module_0.ends_dentals(bytes_6)
    assert var_20 is False
    tuple_2 = (var_0,)
    var_21 = module_0.ends_dentals(tuple_2)
    assert var_21 is False


def test_case_782():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_dentals(bytes_5)
    assert var_13 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_6)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.devoice(var_1)


def test_case_783():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"^\xd5\xd00{J"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"^\xd5\xd00{J"
    dict_0 = {var_1: var_1, bytes_0: var_1}
    bool_0 = False
    list_0 = [dict_0, var_1, bool_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    var_3 = module_0.devoice(list_0)
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_with_vowel(bytes_1)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    str_1 = "#iW\rr^3:"
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    str_2 = "ORrJ2:"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    dict_1 = {}
    var_12 = module_0.deduplicate(dict_1)
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False


def test_case_784():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    set_0 = {bool_0}
    var_1 = module_0.devoice(set_0)
    var_2 = module_0.devoice(var_1)
    int_0 = 1176
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (int_0, tuple_0)
    var_3 = module_0.ends_with_vowel(tuple_1)
    assert var_3 is False
    str_1 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_0)
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    set_1 = {bool_0, bool_1}
    var_9 = module_0.devoice(set_1)


def test_case_785():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "~&KnWE+1U"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_2 = "`<)4H\rS\x0c"
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    str_3 = "1X,mBK\\"
    var_10 = module_0.devoice(str_3)
    var_11 = module_0.ends_dentals(str_3)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    var_13 = module_0.devoice(var_10)
    str_4 = "(q]I"
    var_14 = module_0.devoice(str_4)
    var_15 = module_0.devoice(var_14)
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    str_5 = "1X,mBK\\"
    var_17 = module_0.devoice(str_5)
    var_18 = module_0.ends_dentals(str_5)
    assert var_18 is False
    str_6 = "9#uHWMgkuu@KG7[3"
    var_19 = module_0.starts_with_vowel(str_6)
    assert var_19 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_4)
    assert var_20 is False
    str_7 = "1X,mBK\\"
    var_21 = module_0.devoice(str_7)
    var_22 = module_0.ends_dentals(str_7)
    assert var_22 is False
    var_23 = module_0.devoice(var_21)
    dict_0 = {bytes_3: var_1, var_18: str_4, var_1: str_1}
    var_24 = module_0.devoice(dict_0)


def test_case_786():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.starts_with_vowel(var_6)
    assert var_12 is False


def test_case_787():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    str_0 = ")sE\nhxARG\r;/4"
    var_7 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    str_3 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_3)
    assert var_11 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_7)
    assert var_16 is False


def test_case_788():
    str_0 = "~&KnWE+1U"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"^\xd5\xd00{J"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"^\xd5\xd00{J"
    dict_0 = {var_1: var_1, bytes_0: var_1}
    bool_0 = False
    list_0 = [dict_0, var_1, bool_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_3)
    assert var_8 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    int_0 = 1176
    bool_1 = False
    tuple_1 = (bool_1,)
    tuple_2 = (int_0, tuple_1)
    var_13 = module_0.ends_with_vowel(tuple_2)
    assert var_13 is False
    tuple_3 = ()
    var_14 = module_0.devoice(tuple_3)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    var_19 = module_0.ends_dentals(str_1)
    assert var_19 is False
    var_20 = module_0.ends_dentals(str_1)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_22)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_3)
    assert var_27 is False


def test_case_789():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_12 = module_0.devoice(dict_0)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(bytes_1)
    assert var_22 is False


def test_case_790():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    set_0 = {bool_0}
    var_1 = module_0.devoice(set_0)
    var_2 = module_0.devoice(var_1)
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.deduplicate(str_1)
    assert var_5 == "[YJ\r-1]~}RBJ\x0c\n@"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.devoice(var_1)


def test_case_791():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_1 = '.J"-Kc.'
    list_0 = [str_1, str_1, str_1, str_1]
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    tuple_1 = (var_2,)
    var_3 = module_0.starts_with_vowel(tuple_1)
    assert var_3 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_0)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_2 = "ORrJ2:"
    var_6 = module_0.starts_with_vowel(str_2)
    assert var_6 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    str_3 = "#iW\rr^3:"
    var_10 = module_0.ends_dentals(str_3)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    str_4 = "~&KnWE+1U"
    var_12 = module_0.ends_dentals(str_4)
    assert var_12 is False
    var_13 = module_0.devoice(str_0)


def test_case_792():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    str_1 = "9#uHWMgkuu@KG7[3"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = "`<)4H\rS\x0c"
    var_3 = module_0.ends_dentals(str_2)
    assert var_3 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_3)
    assert var_4 is False
    str_4 = "ORrJ2:"
    var_5 = module_0.starts_with_vowel(str_4)
    assert var_5 is False
    str_5 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_5, str_5, str_5}
    list_0 = [set_0, str_5, str_5]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_0)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_0)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_5)
    assert var_10 is False


def test_case_793():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_5)
    assert var_7 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_8 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.deduplicate(var_9)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_3)
    assert var_16 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_4)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_with_vowel(bytes_4)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_4)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(bytes_8)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.ends_dentals(bytes_7)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_5)
    assert var_28 is False


def test_case_794():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_0 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    var_12 = module_0.devoice(var_5)


def test_case_795():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_1)
    assert var_7 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_3)
    assert var_8 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_with_vowel(bytes_4)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_5)
    assert var_12 is False
    str_1 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_1)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_5)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_22)
    str_3 = "1X,mBK\\"
    var_24 = module_0.devoice(str_3)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(str_3)
    assert var_27 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_9)
    assert var_28 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.starts_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_9)
    assert var_30 is False
    str_4 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_31 = module_0.ends_with_vowel(str_4)
    assert var_31 is False
    var_32 = module_0.deduplicate(str_4)
    assert var_32 == "[YJ\r-1]~}RBJ\x0c\n@"
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_33 = module_0.deduplicate(bytes_10)
    assert var_33 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.devoice(bytes_10)
    var_35 = module_0.starts_with_vowel(var_9)
    assert var_35 is False


def test_case_796():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    complex_0 = -2118.041034 - 1769.966j
    str_1 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_1, complex_0]
    var_1 = module_0.ends_dentals(list_0)
    assert var_1 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.devoice(dict_0)
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_7 = module_0.ends_dentals(bytes_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_0)
    assert var_13 is False


def test_case_797():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.devoice(var_13)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_0)
    assert var_18 is False


def test_case_798():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_1 = "(q]I"
    var_5 = module_0.devoice(str_1)
    var_6 = module_0.devoice(var_5)
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    str_2 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_3, str_3, str_3}
    list_1 = [set_1, str_3, str_3]
    var_9 = module_0.ends_dentals(list_1)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_3)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(list_1)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_799():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.devoice(var_4)
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.starts_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    bool_0 = False
    set_0 = {bool_0}
    var_15 = module_0.devoice(set_0)
    var_16 = module_0.devoice(var_15)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_9)
    assert var_26 is False
    str_1 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_1)
    assert var_27 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_28 = module_0.ends_with_vowel(str_2)
    assert var_28 is False
    var_29 = module_0.ends_dentals(str_1)
    assert var_29 is False
    var_30 = module_0.ends_dentals(bytes_9)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.deduplicate(var_33)
    assert var_36 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.ends_dentals(var_22)
    assert var_37 is False


def test_case_800():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    str_1 = "(q]I"
    var_13 = module_0.devoice(str_1)
    var_14 = module_0.devoice(var_13)
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    list_0 = [bytes_4, bytes_4]
    var_17 = module_0.devoice(list_0)
    var_18 = module_0.deduplicate(str_1)
    assert var_18 == "(q]I"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(var_21)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_25 = module_0.starts_with_vowel(tuple_0)
    assert var_25 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_1 = [set_0, str_2, str_2]
    var_26 = module_0.ends_dentals(list_1)
    assert var_26 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.deduplicate(bytes_7)
    assert var_27 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.starts_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(bytes_7)
    assert var_29 is False
    var_30 = module_0.deduplicate(str_2)
    assert var_30 == 'UErxwv/"J/CaV&Z,q!'
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_31 = module_0.ends_dentals(bytes_8)
    assert var_31 is False
    str_3 = "1X,mBK\\"
    var_32 = module_0.devoice(str_3)
    var_33 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_9)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_10)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(var_36)
    assert var_38 is False
    var_39 = module_0.devoice(bytes_10)
    var_40 = module_0.devoice(var_34)
    var_41 = module_0.starts_with_vowel(bytes_8)
    assert var_41 is False


def test_case_801():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(str_0)
    assert var_4 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    assert var_7 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_0)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_3)
    assert var_10 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_0)
    assert var_13 is False


def test_case_802():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_1)
    assert var_5 is False


def test_case_803():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    dict_0 = {}
    var_3 = module_0.devoice(dict_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_1)
    var_14 = module_0.devoice(tuple_0)
    var_15 = module_0.ends_dentals(var_14)
    assert var_15 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_0)
    assert var_18 is False


def test_case_804():
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.deduplicate(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_805():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    dict_0 = {}
    var_4 = module_0.deduplicate(dict_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    str_1 = "\\Z8@Jg"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    var_15 = module_0.devoice(str_1)
    var_16 = module_0.deduplicate(var_15)
    assert var_16 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_2)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(bytes_6)
    assert var_21 is False
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_22 = module_0.devoice(bytes_7)
    str_3 = "K3A!V\x0c#87"
    var_23 = module_0.starts_with_vowel(str_3)
    assert var_23 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_8)
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_22)
    assert var_27 is False


def test_case_806():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(bytes_1)
    assert var_7 is False


def test_case_807():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(bytes_0)
    assert var_3 is False


def test_case_808():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_1)
    assert var_1 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_2)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(var_4)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(var_2)
    assert var_6 is False


def test_case_809():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_3)
    assert var_14 is False
    bytes_4 = b"\xb1f_\x1d\x06\xfe\xce{\xb4\x14"
    tuple_0 = (bytes_4,)
    list_0 = [tuple_0, bytes_4, bytes_4]
    var_15 = module_0.ends_dentals(list_0)
    assert var_15 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.starts_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(bytes_6)
    assert var_24 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_1 = [set_0, str_2, str_2]
    var_25 = module_0.ends_dentals(list_1)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(str_2)
    assert var_26 is False
    var_27 = module_0.devoice(var_16)
    assert var_27 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_810():
    bytes_0 = b"r\xbe\xc5\xcc\xfaW\x00\xe9\x99(g\xd3;\xf7"
    var_0 = module_0.starts_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_811():
    str_0 = '.J"-Kc.'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.starts_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    tuple_0 = (var_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False


def test_case_812():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False


def test_case_813():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    set_0 = {var_1, var_3, var_0, bytes_1}
    var_5 = module_0.deduplicate(set_0)


def test_case_814():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    set_0 = {var_7, var_9, var_6, bytes_3}
    var_11 = module_0.deduplicate(set_0)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_0, str_0, str_0}
    list_0 = [set_1, str_0, str_0]
    var_12 = module_0.ends_dentals(list_0)
    assert var_12 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_5)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_13)
    assert var_17 is False
    var_18 = module_0.devoice(var_13)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.devoice(var_25)
    bytes_9 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_9, int_0)
    var_27 = module_0.deduplicate(tuple_0)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    var_31 = module_0.ends_dentals(var_29)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.devoice(var_11)


def test_case_815():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_1)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False


def test_case_816():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    assert var_1 == "\\Z8@Jg"
    var_2 = module_0.deduplicate(var_1)
    assert var_2 == "\\Z8@Jg"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_2)
    assert var_5 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_0)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "ORrJ2:"
    var_12 = module_0.starts_with_vowel(str_3)
    assert var_12 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_dentals(var_14)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_5)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.ends_dentals(var_11)
    assert var_22 is False


def test_case_817():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.deduplicate(var_6)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_14)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_2)


def test_case_818():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_0 = ")sE\nhxARG\r;/4"
    var_2 = module_0.devoice(str_0)
    assert var_2 == ")sE\nhxARG\r;/4"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_4)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.ends_with_vowel(bytes_4)
    assert var_10 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_6)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_7)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(bytes_7)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_12)
    assert var_16 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_9)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(var_19)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_11)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_24)
    assert var_28 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_12)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_13)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_dentals(var_30)
    assert var_32 is False
    var_33 = module_0.devoice(bytes_1)


def test_case_819():
    tuple_0 = ()
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_1 = (bytes_0, int_0)
    var_1 = module_0.deduplicate(tuple_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(list_0)
    assert var_10 is False
    str_1 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    var_16 = module_0.devoice(var_13)
    var_17 = module_0.deduplicate(str_2)
    assert var_17 == "1X,mBK\\"


def test_case_820():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    tuple_0 = ()
    var_3 = module_0.devoice(tuple_0)
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False


def test_case_821():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_4 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_1)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_1)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    str_1 = "\\Z8@Jg"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    str_2 = "\\Z8@Jg"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.devoice(str_2)
    var_17 = module_0.deduplicate(var_16)
    assert var_17 == "\\Z8@Jg"
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_1 = [set_0, str_3, str_3]
    var_18 = module_0.ends_dentals(list_1)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_3)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.devoice(var_16)


def test_case_822():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    str_1 = ")sE\nhxARG\r;/4"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_14 = module_0.devoice(list_1)
    var_15 = module_0.ends_dentals(var_3)
    assert var_15 is False


def test_case_823():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    str_0 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_3)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    var_11 = module_0.devoice(var_8)
    str_2 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    var_13 = module_0.devoice(str_2)
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.ends_dentals(bytes_6)
    assert var_17 is False
    str_3 = ")sE\nhxARG\r;/4"
    var_18 = module_0.devoice(str_3)
    bytes_7 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_20 = module_0.devoice(list_0)
    bool_1 = False
    bool_2 = True
    list_1 = [bool_1, bool_1, bool_2, bool_1]
    var_21 = module_0.ends_with_vowel(list_1)
    assert var_21 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.starts_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_0)
    assert var_24 is False


def test_case_824():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.ends_dentals(tuple_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.devoice(var_15)
    str_0 = "1X,mBK\\"
    var_22 = module_0.devoice(str_0)
    var_23 = module_0.ends_dentals(str_0)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(bytes_8)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(bytes_8)
    assert var_27 is False
    var_28 = module_0.devoice(var_21)


def test_case_825():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_2)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    str_3 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_3)
    assert var_13 is False
    str_4 = "1X,mBK\\"
    var_14 = module_0.devoice(str_4)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    str_5 = "\\Z8@Jg"
    var_17 = module_0.ends_with_vowel(str_5)
    assert var_17 is False
    str_6 = "1X,mBK\\"
    var_18 = module_0.devoice(str_6)
    var_19 = module_0.ends_dentals(str_6)
    assert var_19 is False
    var_20 = module_0.devoice(str_5)
    var_21 = module_0.ends_with_vowel(bytes_1)
    assert var_21 is False


def test_case_826():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "(q]I"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.devoice(var_5)
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    str_1 = "`<)4H\rS\x0c"
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_1)
    assert var_14 is False


def test_case_827():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"r\xbe\xc5\xcc\xfaW\x00\xe9\x99(g\xd3;\xf7"
    var_3 = module_0.starts_with_vowel(bytes_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.devoice(var_9)
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    str_1 = "1X,mBK\\"
    var_15 = module_0.devoice(str_1)
    var_16 = module_0.ends_dentals(str_1)
    assert var_16 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.ends_dentals(bytes_6)
    assert var_17 is False
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    var_19 = module_0.devoice(bytes_6)
    bytes_7 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_20 = module_0.deduplicate(bytes_7)
    assert var_20 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_3)
    assert var_23 is False
    var_24 = module_0.devoice(var_19)


def test_case_828():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_1)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_6)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_11)
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_18 = module_0.devoice(list_0)
    str_0 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_0)
    assert var_19 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_6)
    assert var_20 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_7)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    dict_1 = {}
    var_24 = module_0.deduplicate(dict_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_dentals(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(bytes_9)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_25)
    assert var_30 is False


def test_case_829():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bool_0 = False
    set_0 = {bool_0}
    var_6 = module_0.devoice(set_0)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.deduplicate(var_6)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(bytes_2)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_3)


def test_case_830():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(var_4)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_831():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_8)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(bytes_2)
    assert var_21 is False


def test_case_832():
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.deduplicate(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"^\xd5\xd00{J"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"^\xd5\xd00{J"
    dict_0 = {var_1: var_1, bytes_1: var_1}
    bool_0 = False
    list_0 = [dict_0, var_1, bool_0, bytes_1]
    var_2 = module_0.devoice(list_0)
    var_3 = module_0.devoice(dict_0)


def test_case_833():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_1)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_1)
    assert var_9 is False
    bytes_2 = b"^\xd5\xd00{J"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"^\xd5\xd00{J"
    dict_0 = {var_10: var_10, bytes_2: var_10}
    bool_0 = False
    list_1 = [dict_0, var_10, bool_0, bytes_2]
    var_11 = module_0.devoice(list_1)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_13 = module_0.starts_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    var_15 = module_0.ends_dentals(tuple_0)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_1)
    assert var_16 is False


def test_case_834():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    str_1 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    var_17 = module_0.ends_dentals(str_2)
    assert var_17 is False
    var_18 = module_0.devoice(var_16)
    var_19 = module_0.devoice(var_16)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_dentals(bytes_6)
    assert var_22 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_7)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.devoice(var_20)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_835():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "#iW\rr^3:"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    list_0 = [bytes_1, bytes_1]
    var_5 = module_0.devoice(list_0)
    var_6 = module_0.devoice(list_0)


def test_case_836():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b""
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b""


def test_case_837():
    tuple_0 = ()
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_1 = module_0.devoice(list_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_7)
    str_0 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_0)
    assert var_20 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_8)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(bytes_8)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(str_0)


def test_case_838():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = "2q"
    var_3 = module_0.devoice(str_1)


def test_case_839():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    tuple_0 = ()
    var_3 = module_0.devoice(tuple_0)
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_8)
    assert var_12 is False
    var_13 = module_0.devoice(var_8)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    set_0 = set()
    tuple_1 = (set_0,)
    var_14 = module_0.ends_with_vowel(tuple_1)
    assert var_14 is False
    tuple_2 = ()
    var_15 = module_0.devoice(tuple_2)
    str_1 = "ORrJ2:"
    var_16 = module_0.starts_with_vowel(str_1)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.deduplicate(bytes_7)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    int_0 = 1176
    bool_0 = False
    tuple_3 = (bool_0,)
    tuple_4 = (int_0, tuple_3)
    var_28 = module_0.ends_with_vowel(tuple_4)
    assert var_28 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.deduplicate(bytes_8)
    assert var_29 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_dentals(bytes_9)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_29)
    assert var_33 is False
    var_34 = module_0.devoice(var_27)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_840():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.devoice(bytes_2)
    assert var_3 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_4 = module_0.deduplicate(bytes_3)
    assert var_4 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_7 = module_0.devoice(tuple_0)
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    var_9 = module_0.deduplicate(str_0)
    assert var_9 == "K3A!V\x0c#87"
    bool_1 = True
    tuple_1 = (bool_1, bool_1)
    list_0 = [tuple_1]
    var_10 = module_0.ends_with_vowel(list_0)
    assert var_10 is False
    str_2 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_2)
    assert var_11 is False
    str_3 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    str_4 = "1X,mBK\\"
    var_13 = module_0.devoice(str_4)
    var_14 = module_0.ends_dentals(str_4)
    assert var_14 is False
    var_15 = module_0.devoice(str_3)
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_5)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_2)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'


def test_case_841():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_1)
    assert var_14 == "[YJ\r-1]~}RBJ\x0c\n@"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_15 = module_0.starts_with_vowel(tuple_0)
    assert var_15 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_4)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_5)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(bytes_4)
    assert var_20 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_21 = module_0.devoice(list_0)
    str_3 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_6)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.starts_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_6)
    assert var_25 is False
    str_4 = "ORrJ2:"
    var_26 = module_0.starts_with_vowel(str_4)
    assert var_26 is False
    str_5 = "\\Z8@Jg"
    var_27 = module_0.ends_with_vowel(str_5)
    assert var_27 is False
    str_6 = "1X,mBK\\"
    var_28 = module_0.devoice(str_6)
    var_29 = module_0.ends_dentals(str_6)
    assert var_29 is False
    var_30 = module_0.devoice(str_5)
    str_7 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_7)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(str_5)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(bytes_5)
    assert var_33 is False


def test_case_842():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    dict_0 = {}
    var_5 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_1)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    set_0 = {var_13, var_15, var_12, bytes_4}
    var_17 = module_0.deduplicate(set_0)
    str_2 = "`<)4H\rS\x0c"
    var_18 = module_0.ends_dentals(str_2)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_6)
    assert var_19 is False


def test_case_843():
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.deduplicate(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x87"


def test_case_844():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "9#uHWMgkuu@KG7[3"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(tuple_0)
    assert var_6 is False


def test_case_845():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    str_0 = '.J"-Kc.'
    list_0 = [str_0, str_0, str_0, str_0]
    var_3 = module_0.starts_with_vowel(list_0)
    assert var_3 is False
    tuple_0 = (var_3,)
    var_4 = module_0.starts_with_vowel(tuple_0)
    assert var_4 is False
    bytes_2 = b"\x87"
    int_0 = 100
    tuple_1 = (bytes_2, int_0)
    var_5 = module_0.deduplicate(tuple_1)
    var_6 = module_0.devoice(bytes_2)
    assert var_6 == b"\x87"
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b""
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b""
    bool_0 = True
    tuple_2 = (bool_0, bool_0)
    list_1 = [tuple_2]
    var_9 = module_0.ends_with_vowel(list_1)
    assert var_9 is False
    bytes_4 = b"^\xd5\xd00{J"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"^\xd5\xd00{J"
    dict_0 = {var_10: var_10, bytes_4: var_10}
    bool_1 = False
    list_2 = [dict_0, var_10, bool_1, bytes_4]
    var_11 = module_0.devoice(list_2)
    var_12 = module_0.devoice(list_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_11)
    assert var_25 is False


def test_case_846():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    var_2 = module_0.deduplicate(var_0)
    assert var_2 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"


def test_case_847():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == "\\Z8@Jg"


def test_case_848():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False


def test_case_849():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    set_1 = {var_4, var_6, var_3, bytes_1}
    var_8 = module_0.deduplicate(set_1)
    str_1 = "\\Z8@Jg"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_2 = {str_2, str_2, str_2}
    list_1 = [set_2, str_2, str_2]
    var_10 = module_0.ends_dentals(list_1)
    assert var_10 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_2)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_3)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_16 = module_0.starts_with_vowel(tuple_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(tuple_0)
    assert var_17 is False
    var_18 = module_0.ends_dentals(tuple_0)
    assert var_18 is False
    complex_0 = -2118.041034 - 1769.966j
    str_3 = "%OJ<'vPCn@4"
    list_2 = [complex_0, str_3, complex_0]
    var_19 = module_0.ends_dentals(list_2)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_3)
    assert var_20 is False


def test_case_850():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    var_13 = module_0.devoice(var_11)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.starts_with_vowel(var_7)
    assert var_14 is False


def test_case_851():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False
    dict_0 = {}
    var_4 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    str_0 = "#iW\rr^3:"
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.deduplicate(bytes_4)
    var_16 = module_0.starts_with_vowel(bytes_4)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_15)
    var_18 = module_0.ends_with_vowel(str_1)
    assert var_18 is False


def test_case_852():
    bytes_0 = b"H\xear\xff\xb8\xff\xfd\xdf\xb9\xac\xcd\xbe<\xd9!\x8f\xd37\x92\xb9"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_853():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_7 = module_0.devoice(dict_0)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False


def test_case_854():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    var_5 = module_0.devoice(bytes_1)
    tuple_0 = ()
    var_6 = module_0.devoice(tuple_0)
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = ")sE\nhxARG\r;/4"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.devoice(tuple_0)


def test_case_855():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    list_0 = [bytes_0, bytes_0]
    var_4 = module_0.devoice(list_0)
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "(q]I"
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    assert var_6 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_1)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_1)
    assert var_16 is False


def test_case_856():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.devoice(var_8)
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    str_1 = "ORrJ2:"
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    str_2 = "`<)4H\rS\x0c"
    var_19 = module_0.ends_dentals(str_2)
    assert var_19 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_0)


def test_case_857():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_1)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_6)
    assert var_10 is False
    complex_0 = -2118.041034 - 1769.966j
    str_0 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_0, complex_0]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    str_1 = "hldwPE2tWWZ`i R"
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False


def test_case_858():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_4)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    str_2 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(bytes_7)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_17)
    assert var_21 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_22 = module_0.starts_with_vowel(tuple_0)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(tuple_0)
    assert var_23 is False
    var_24 = module_0.devoice(var_9)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"


def test_case_859():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"H\xear\xff\xb8\xff\xfd\xdf\xb9\xac\xcd\xbe<\xd9!\x8f\xd37\x92\xb9"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_2)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    dict_0 = {}
    var_6 = module_0.devoice(dict_0)
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_7 = module_0.devoice(list_0)
    var_8 = module_0.starts_with_vowel(tuple_0)
    assert var_8 is False


def test_case_860():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.starts_with_vowel(bytes_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    str_2 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_2)
    assert var_5 == "%OJ<'vPCn@4"
    var_6 = module_0.ends_with_vowel(str_2)
    assert var_6 is False
    str_3 = "(q]I"
    var_7 = module_0.devoice(str_3)
    assert var_7 == "(q]I"
    var_8 = module_0.devoice(var_7)
    assert var_8 == "(q]I"
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_1)
    assert var_10 is False
    list_0 = [bytes_1, bytes_1]
    var_11 = module_0.devoice(list_0)
    var_12 = module_0.deduplicate(str_3)
    assert var_12 == "(q]I"
    var_13 = module_0.deduplicate(str_1)
    assert var_13 == "1X,mBK\\"


def test_case_861():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_3)
    assert var_8 is False
    str_1 = "#iW\rr^3:"
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.ends_dentals(bytes_2)
    assert var_17 is False


def test_case_862():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_1)
    assert var_5 is False


def test_case_863():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.starts_with_vowel(bytes_1)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_6)
    assert var_8 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    list_0 = [bytes_2, bytes_2]
    var_10 = module_0.devoice(list_0)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"


def test_case_864():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_4)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_4)
    assert var_14 is False
    str_1 = "%OJ<'vPCn@4"
    var_15 = module_0.deduplicate(str_1)
    assert var_15 == "%OJ<'vPCn@4"
    str_2 = "\\Z8@Jg"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    str_3 = "1X,mBK\\"
    var_17 = module_0.devoice(str_3)
    var_18 = module_0.ends_dentals(str_3)
    assert var_18 is False
    var_19 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_22)
    assert var_27 is False
    dict_0 = {}
    var_28 = module_0.deduplicate(dict_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_8)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_9)
    var_32 = module_0.ends_dentals(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(bytes_9)
    assert var_33 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_11)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    var_37 = module_0.ends_dentals(var_35)
    assert var_37 is False
    list_0 = [bytes_1, var_37, var_28]
    var_38 = module_0.starts_with_vowel(list_0)
    assert var_38 is False


def test_case_865():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_7)
    assert var_11 is False
    var_12 = module_0.devoice(var_7)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    set_0 = {var_14, var_16, var_13, bytes_5}
    var_18 = module_0.deduplicate(set_0)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_6)
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(bytes_6)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(bytes_8)
    assert var_29 is False
    dict_0 = {}
    var_30 = module_0.deduplicate(dict_0)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_dentals(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(bytes_11)
    assert var_35 is False
    bytes_12 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_36 = module_0.deduplicate(bytes_12)
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_with_vowel(bytes_12)
    assert var_38 is False
    bool_0 = False
    set_1 = {bool_0}
    var_39 = module_0.devoice(set_1)
    var_40 = module_0.devoice(var_39)
    var_41 = module_0.deduplicate(var_39)
    var_42 = module_0.deduplicate(var_31)


def test_case_866():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_0)
    assert var_6 is False


def test_case_867():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.ends_dentals(tuple_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_13)
    assert var_17 is False
    str_0 = "%OJ<'vPCn@4"
    var_18 = module_0.deduplicate(str_0)
    assert var_18 == "%OJ<'vPCn@4"
    var_19 = module_0.ends_with_vowel(str_0)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_8)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_6)
    assert var_24 is False


def test_case_868():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == 'UErxwv/"J/CaV&Z,q!'
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == 'UErxwv/"J/CaV&Z,q!'


def test_case_869():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    str_0 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    var_5 = module_0.devoice(str_0)
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.starts_with_vowel(bytes_1)
    assert var_7 is False
    str_1 = "`<)4H\rS\x0c"
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    var_11 = module_0.ends_dentals(str_2)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    var_13 = module_0.devoice(var_10)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    list_1 = [bytes_3, bytes_3]
    var_15 = module_0.devoice(list_1)
    str_3 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_16 = module_0.ends_with_vowel(str_3)
    assert var_16 is False
    str_4 = "`<)4H\rS\x0c"
    var_17 = module_0.ends_dentals(str_4)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_15)


def test_case_870():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_7)
    assert var_12 is False
    bytes_4 = b"^\xd5\xd00{J"
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"^\xd5\xd00{J"
    dict_0 = {var_13: var_13, bytes_4: var_13}
    bool_0 = False
    list_0 = [dict_0, var_13, bool_0, bytes_4]
    var_14 = module_0.devoice(list_0)
    var_15 = module_0.devoice(list_0)
    var_16 = module_0.ends_with_vowel(var_8)
    assert var_16 is False


def test_case_871():
    str_0 = "?"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "?"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_872():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    bool_0 = False
    set_0 = {bool_0}
    var_13 = module_0.devoice(set_0)
    var_14 = module_0.devoice(var_13)
    str_0 = "(q]I"
    var_15 = module_0.devoice(str_0)
    var_16 = module_0.devoice(var_15)
    var_17 = module_0.starts_with_vowel(var_16)
    assert var_17 is False
    dict_0 = {}
    var_18 = module_0.deduplicate(dict_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(bytes_6)
    assert var_23 is False
    str_1 = "1X,mBK\\"
    var_24 = module_0.devoice(str_1)
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_7)
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_27 = module_0.ends_dentals(bytes_8)
    assert var_27 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.deduplicate(bytes_9)
    set_1 = set()
    tuple_0 = (set_1,)
    var_29 = module_0.ends_with_vowel(tuple_0)
    assert var_29 is False
    var_30 = module_0.devoice(var_28)
    var_31 = module_0.deduplicate(var_30)
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_32 = module_0.deduplicate(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    var_35 = module_0.ends_dentals(bytes_11)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_32)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_33)
    assert var_37 is False
    var_38 = module_0.ends_dentals(bytes_3)
    assert var_38 is False


def test_case_873():
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.deduplicate(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x87"
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_2 = module_0.ends_with_vowel(list_0)
    assert var_2 is False
    bool_2 = True
    tuple_1 = (bool_2, bool_2)
    list_1 = [tuple_1]
    var_3 = module_0.ends_with_vowel(list_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_4)
    assert var_9 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.devoice(var_26)
    var_28 = module_0.deduplicate(str_1)
    assert var_28 == "Kd tt@\x0c9{k:|lpK9"


def test_case_874():
    str_0 = "#FfZ17&>Vrj9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_875():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_2 = module_0.ends_dentals(list_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.deduplicate(var_3)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    str_2 = "%OJ<'vPCn@4"
    var_14 = module_0.deduplicate(str_2)
    assert var_14 == "%OJ<'vPCn@4"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_1)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"


def test_case_876():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(var_0)
    assert var_2 is False
    str_0 = "(q]I"
    var_3 = module_0.devoice(str_0)
    assert var_3 == "(q]I"
    var_4 = module_0.devoice(var_3)
    assert var_4 == "(q]I"
    var_5 = module_0.starts_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_2)
    assert var_13 is False
    str_1 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False


def test_case_877():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    var_2 = module_0.deduplicate(var_0)
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_1)
    set_1 = set()
    tuple_0 = (set_1,)
    var_5 = module_0.ends_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.devoice(var_4)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False


def test_case_878():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    set_0 = {var_1, var_3, var_0, bytes_1}
    var_5 = module_0.deduplicate(set_0)
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_2)
    var_7 = module_0.starts_with_vowel(bytes_2)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.deduplicate(var_8)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_15)
    assert var_20 is False
    str_0 = "#iW\rr^3:"
    var_21 = module_0.ends_dentals(str_0)
    assert var_21 is False
    str_1 = "\\Z8@Jg"
    var_22 = module_0.ends_with_vowel(str_1)
    assert var_22 is False
    var_23 = module_0.devoice(str_1)
    var_24 = module_0.deduplicate(var_23)
    assert var_24 == "\\Z8@Jg"
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_25 = module_0.ends_with_vowel(bytes_7)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(bytes_7)
    assert var_26 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_2, str_2, str_2}
    list_0 = [set_1, str_2, str_2]
    var_27 = module_0.ends_dentals(list_0)
    assert var_27 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_8)
    var_29 = module_0.starts_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_8)
    assert var_30 is False
    var_31 = module_0.deduplicate(str_2)
    bytes_9 = b"\xb1f_\x1d\x06\xfe\xce{\xb4\x14"
    tuple_0 = (bytes_9,)
    list_1 = [tuple_0, bytes_9, bytes_9]
    var_32 = module_0.ends_dentals(list_1)
    assert var_32 is False
    var_33 = module_0.deduplicate(var_24)
    assert var_33 == "\\Z8@Jg"


def test_case_879():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_0)
    assert var_5 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_4)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    var_15 = module_0.devoice(var_0)


def test_case_880():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_1 = module_0.devoice(list_1)
    str_0 = ")sE\nhxARG\r;/4"
    var_2 = module_0.devoice(str_0)
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    bool_1 = False
    set_0 = {bool_1}
    var_6 = module_0.devoice(set_0)
    var_7 = module_0.devoice(var_6)
    bytes_1 = b"^\xd5\xd00{J"
    var_8 = module_0.deduplicate(bytes_1)
    assert var_8 == b"^\xd5\xd00{J"
    dict_0 = {var_8: var_8, bytes_1: var_8}
    bool_2 = False
    list_2 = [dict_0, var_8, bool_2, bytes_1]
    var_9 = module_0.devoice(list_2)
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_2)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_2)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_6)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.ends_dentals(str_1)
    assert var_26 is False


def test_case_881():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_5)
    assert var_10 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_6)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_with_vowel(bytes_6)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_6)
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.devoice(bytes_7)
    bytes_8 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.deduplicate(bytes_8)
    assert var_15 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False


def test_case_882():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    tuple_0 = ()
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "?"
    var_6 = module_0.deduplicate(str_1)
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_7)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_8)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_15)
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_19 = module_0.ends_dentals(list_0)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(str_2)
    assert var_20 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_21 = module_0.ends_dentals(bytes_5)
    assert var_21 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_6)
    set_1 = set()
    tuple_1 = (set_1,)
    var_23 = module_0.ends_with_vowel(tuple_1)
    assert var_23 is False
    var_24 = module_0.devoice(var_22)
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_2 = {str_3, str_3, str_3}
    list_1 = [set_2, str_3, str_3]
    var_25 = module_0.ends_dentals(list_1)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False


def test_case_883():
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.deduplicate(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x87"
    str_0 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_1)
    assert var_7 is False


def test_case_884():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    dict_0 = {}
    var_2 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(bytes_1)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_4)
    assert var_8 is False


def test_case_885():
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    set_0 = {bool_0}
    var_1 = module_0.devoice(set_0)
    var_2 = module_0.devoice(var_1)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_2 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_2, int_0)
    var_8 = module_0.deduplicate(tuple_0)
    bytes_3 = b"r\xbe\xc5\xcc\xfaW\x00\xe9\x99(g\xd3;\xf7"
    var_9 = module_0.starts_with_vowel(bytes_3)
    assert var_9 is False
    bytes_4 = b"dV\xd8n_n\xe0\x87K"
    var_10 = module_0.ends_dentals(bytes_4)
    assert var_10 is False
    str_0 = "#iW\rr^3:"
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    str_1 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.devoice(str_1)
    var_14 = module_0.devoice(str_1)


def test_case_886():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False


def test_case_887():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.devoice(str_1)
    assert var_2 == "\\Z8@Jg"
    var_3 = module_0.deduplicate(var_2)
    assert var_3 == "\\Z8@Jg"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_4 = module_0.ends_dentals(list_0)
    assert var_4 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    var_8 = module_0.deduplicate(str_2)
    assert var_8 == 'UErxwv/"J/CaV&Z,q!'
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_1)
    assert var_13 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    list_1 = [bytes_3, bytes_3]
    var_15 = module_0.devoice(list_1)
    var_16 = module_0.deduplicate(var_2)
    assert var_16 == "\\Z8@Jg"


def test_case_888():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(bytes_0)
    assert var_7 is False


def test_case_889():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    str_0 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    var_11 = module_0.devoice(var_8)
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_14 = module_0.devoice(tuple_0)
    var_15 = module_0.ends_dentals(var_14)
    assert var_15 is False
    str_4 = "(q]I"
    var_16 = module_0.devoice(str_4)
    var_17 = module_0.devoice(var_16)
    var_18 = module_0.starts_with_vowel(var_17)
    assert var_18 is False
    bytes_3 = b"\x87"
    int_0 = 100
    tuple_1 = (bytes_3, int_0)
    var_19 = module_0.deduplicate(tuple_1)
    var_20 = module_0.starts_with_vowel(bytes_2)
    assert var_20 is False


def test_case_890():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_2)
    assert var_6 is False
    str_0 = "%OJ<'vPCn@4"
    var_7 = module_0.deduplicate(str_0)
    assert var_7 == "%OJ<'vPCn@4"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    bytes_3 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_3, int_0)
    var_9 = module_0.deduplicate(tuple_0)
    var_10 = module_0.devoice(bytes_3)
    assert var_10 == b"\x87"
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    str_1 = "1X,mBK\\"
    var_17 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_2)
    assert var_21 is False
    str_3 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    var_23 = module_0.deduplicate(str_3)
    assert var_23 == "[YJ\r-1]~}RBJ\x0c\n@"
    var_24 = module_0.devoice(bytes_0)


def test_case_891():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bool_0 = False
    set_0 = {bool_0}
    var_2 = module_0.devoice(set_0)
    var_3 = module_0.devoice(var_2)
    var_4 = module_0.deduplicate(var_2)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(bytes_0)
    assert var_9 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    str_1 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_1)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_2)
    assert var_14 is False
    dict_0 = {}
    var_15 = module_0.deduplicate(dict_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_16)
    assert var_21 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_22 = module_0.ends_with_vowel(bytes_5)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(bytes_5)
    assert var_23 is False
    str_3 = "1X,mBK\\"
    var_24 = module_0.devoice(str_3)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_6)
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_27 = module_0.starts_with_vowel(tuple_0)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(bytes_6)
    assert var_28 is False


def test_case_892():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_3 = module_0.ends_dentals(list_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_1)
    assert var_4 is False


@pytest.mark.xfail(strict=True)
def test_case_893():
    none_type_0 = None
    module_0.devoice(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    int_0 = 1467
    module_0.devoice(int_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    module_0.starts_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_897():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    module_0.deduplicate(var_6)


@pytest.mark.xfail(strict=True)
def test_case_898():
    none_type_0 = None
    module_0.devoice(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bool_0 = True
    module_0.starts_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    module_0.devoice(var_8)


@pytest.mark.xfail(strict=True)
def test_case_901():
    bool_0 = True
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    bool_0 = False
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.devoice(var_14)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    module_0.devoice(var_9)


@pytest.mark.xfail(strict=True)
def test_case_904():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.devoice(var_1)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    module_0.deduplicate(var_9)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.devoice(var_7)
    module_0.ends_dentals(var_4)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bool_0 = False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.devoice(var_9)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    module_0.deduplicate(var_6)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.devoice(var_12)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_9)
    module_0.ends_dentals(var_8)


@pytest.mark.xfail(strict=True)
def test_case_909():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.devoice(var_10)
    str_1 = "1X,mBK\\"
    var_17 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    module_0.ends_dentals(var_21)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_5)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    module_0.ends_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_912():
    float_0 = -4730.0
    module_0.starts_with_vowel(float_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_914():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    module_0.starts_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.devoice(var_2)
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_7)
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.devoice(var_20)
    module_0.starts_with_vowel(var_19)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.devoice(var_12)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    module_0.ends_dentals(var_20)


@pytest.mark.xfail(strict=True)
def test_case_919():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bool_0 = False
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    module_0.ends_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_14)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_1)
    assert var_25 is False
    str_2 = "1X,mBK\\"
    var_26 = module_0.devoice(str_2)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.devoice(var_28)
    module_0.deduplicate(var_16)


@pytest.mark.xfail(strict=True)
def test_case_922():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.devoice(var_9)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    str_2 = "1X,mBK\\"
    var_27 = module_0.devoice(str_2)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(var_27)
    assert var_32 is False
    int_0 = 594
    module_0.ends_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    module_0.devoice(var_9)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False
    module_0.starts_with_vowel(var_6)


@pytest.mark.xfail(strict=True)
def test_case_925():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    module_0.devoice(var_2)


@pytest.mark.xfail(strict=True)
def test_case_927():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_11)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_12)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_13)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.devoice(bytes_13)
    str_2 = "1X,mBK\\"
    var_35 = module_0.devoice(str_2)
    module_0.devoice(var_18)


@pytest.mark.xfail(strict=True)
def test_case_928():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.devoice(var_14)
    str_0 = "1X,mBK\\"
    var_21 = module_0.devoice(str_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    str_1 = "1X,mBK\\"
    var_28 = module_0.devoice(str_1)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_29 = module_0.ends_with_vowel(str_2)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    module_0.deduplicate(var_13)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_6)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    module_0.ends_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_930():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_0)
    assert var_19 is False
    str_1 = "1X,mBK\\"
    var_20 = module_0.devoice(str_1)
    str_2 = "1X,mBK\\"
    var_21 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_34)
    assert var_36 is False
    module_0.ends_with_vowel(var_32)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    str_1 = "1X,mBK\\"
    var_17 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.devoice(var_23)
    module_0.devoice(var_19)


@pytest.mark.xfail(strict=True)
def test_case_932():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_3)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_3)
    assert var_14 is False
    set_0 = set()
    module_0.starts_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_5)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    module_0.starts_with_vowel(var_15)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.devoice(var_20)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_0)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    str_1 = "1X,mBK\\"
    var_30 = module_0.devoice(str_1)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.starts_with_vowel(var_30)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_15)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    var_41 = module_0.ends_with_vowel(var_39)
    assert var_41 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    str_0 = "1X,mBK\\"
    var_21 = module_0.devoice(str_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    str_1 = "1X,mBK\\"
    var_31 = module_0.devoice(str_1)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_32 = module_0.ends_with_vowel(str_2)
    assert var_32 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.starts_with_vowel(var_33)
    assert var_36 is False
    var_37 = module_0.ends_with_vowel(var_35)
    assert var_37 is False
    var_38 = module_0.devoice(bytes_13)
    var_39 = module_0.devoice(var_33)
    module_0.ends_dentals(var_34)


@pytest.mark.xfail(strict=True)
def test_case_936():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.devoice(var_11)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_0)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    str_1 = "1X,mBK\\"
    var_21 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_21)
    assert var_26 is False
    str_2 = "1X,mBK\\"
    var_27 = module_0.devoice(str_2)
    module_0.starts_with_vowel(var_15)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.devoice(var_3)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    module_0.ends_dentals(var_14)


@pytest.mark.xfail(strict=True)
def test_case_938():
    none_type_0 = None
    module_0.ends_with_vowel(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    module_0.ends_dentals(var_5)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_10)
    assert var_15 is False
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_941():
    none_type_0 = None
    module_0.starts_with_vowel(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_1)
    assert var_18 is False
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    module_0.devoice(var_9)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(bytes_8)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_29 = module_0.ends_with_vowel(str_2)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    var_37 = module_0.devoice(bytes_13)
    var_38 = module_0.devoice(var_32)
    module_0.ends_with_vowel(var_17)


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.devoice(var_6)
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_946():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_12)
    assert var_17 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    module_0.ends_dentals(var_11)


@pytest.mark.xfail(strict=True)
def test_case_947():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_5)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    module_0.ends_with_vowel(var_12)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_949():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    bool_0 = False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.deduplicate(bytes_11)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_35 = module_0.ends_with_vowel(str_2)
    assert var_35 is False
    module_0.devoice(var_24)


@pytest.mark.xfail(strict=True)
def test_case_951():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.devoice(var_20)
    module_0.starts_with_vowel(var_19)


@pytest.mark.xfail(strict=True)
def test_case_952():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    module_0.ends_with_vowel(var_17)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_1)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    str_2 = "1X,mBK\\"
    var_31 = module_0.devoice(str_2)
    module_0.deduplicate(var_24)


@pytest.mark.xfail(strict=True)
def test_case_954():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    none_type_0 = None
    module_0.ends_with_vowel(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    str_1 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.devoice(var_23)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    module_0.devoice(var_8)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_5)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    str_1 = "1X,mBK\\"
    var_28 = module_0.devoice(str_1)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_38 = module_0.ends_with_vowel(str_2)
    assert var_38 is False
    module_0.deduplicate(var_25)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_17)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    str_1 = "K3A!V\x0c#87"
    var_25 = module_0.starts_with_vowel(str_1)
    assert var_25 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_2)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.deduplicate(bytes_9)
    assert var_32 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_11)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    var_36 = module_0.ends_dentals(var_33)
    assert var_36 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_13)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_14)
    var_39 = module_0.ends_with_vowel(var_38)
    assert var_39 is False
    var_40 = module_0.ends_dentals(var_38)
    assert var_40 is False
    module_0.ends_dentals(var_18)


@pytest.mark.xfail(strict=True)
def test_case_960():
    none_type_0 = None
    module_0.deduplicate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_1)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.devoice(bytes_8)
    str_2 = "1X,mBK\\"
    var_27 = module_0.devoice(str_2)
    module_0.devoice(var_4)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    module_0.deduplicate(var_3)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    str_0 = "1X,mBK\\"
    var_16 = module_0.devoice(str_0)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_0)
    assert var_19 is False
    str_1 = "1X,mBK\\"
    var_20 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_dentals(var_27)
    assert var_30 is False
    module_0.starts_with_vowel(var_11)


@pytest.mark.xfail(strict=True)
def test_case_964():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_12)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.devoice(var_19)
    module_0.starts_with_vowel(var_17)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    module_0.devoice(var_2)


@pytest.mark.xfail(strict=True)
def test_case_966():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    module_0.ends_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_967():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    module_0.devoice(var_2)


@pytest.mark.xfail(strict=True)
def test_case_968():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.starts_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    module_0.ends_dentals(var_5)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(bytes_4)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    str_3 = "1X,mBK\\"
    var_22 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(str_3)
    assert var_25 is False
    str_4 = "K3A!V\x0c#87"
    var_26 = module_0.starts_with_vowel(str_4)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_28)
    assert var_30 is False
    bool_0 = True
    module_0.ends_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    str_0 = "1X,mBK\\"
    var_19 = module_0.devoice(str_0)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_0)
    assert var_22 is False
    str_1 = "1X,mBK\\"
    var_23 = module_0.devoice(str_1)
    module_0.deduplicate(var_14)


@pytest.mark.xfail(strict=True)
def test_case_973():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    module_0.starts_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = -635
    module_0.ends_dentals(int_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    module_0.deduplicate(var_11)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    int_0 = 1888
    module_0.deduplicate(int_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_8)
    str_0 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_0)
    assert var_24 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_1)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    var_33 = module_0.ends_dentals(var_31)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    module_0.devoice(var_3)


@pytest.mark.xfail(strict=True)
def test_case_978():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    float_0 = -2202.7227
    module_0.ends_with_vowel(float_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.devoice(var_8)
    str_1 = "1X,mBK\\"
    var_15 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_2)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    str_3 = "1X,mBK\\"
    var_24 = module_0.devoice(str_3)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(str_3)
    assert var_27 is False
    module_0.devoice(var_18)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    module_0.devoice(var_2)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    module_0.starts_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_984():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_3)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_17 = module_0.devoice(str_2)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_3)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_11)
    str_4 = "1X,mBK\\"
    var_32 = module_0.devoice(str_4)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(str_4)
    assert var_35 is False
    module_0.devoice(var_7)


@pytest.mark.xfail(strict=True)
def test_case_985():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    module_0.ends_dentals(var_6)


@pytest.mark.xfail(strict=True)
def test_case_986():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.devoice(var_22)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.deduplicate(bytes_10)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.devoice(var_21)


@pytest.mark.xfail(strict=True)
def test_case_987():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_9)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_10)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    module_1.object(*var_18)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    module_0.devoice(var_10)


@pytest.mark.xfail(strict=True)
def test_case_989():
    int_0 = 2227
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    module_0.devoice(var_4)


@pytest.mark.xfail(strict=True)
def test_case_991():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(bytes_5)
    assert var_21 is False
    str_3 = "1X,mBK\\"
    var_22 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_22)
    assert var_27 is False
    module_0.ends_dentals(var_24)


@pytest.mark.xfail(strict=True)
def test_case_992():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    str_2 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_2)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    str_3 = "1X,mBK\\"
    var_9 = module_0.devoice(str_3)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_993():
    object_0 = module_1.object()
    module_0.deduplicate(object_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.devoice(var_14)
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_16)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    str_2 = "1X,mBK\\"
    var_24 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_25 = module_0.starts_with_vowel(str_3)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(str_3)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.devoice(bytes_10)
    var_35 = module_0.devoice(var_29)
    str_4 = "K3A!V\x0c#87"
    var_36 = module_0.starts_with_vowel(str_4)
    assert var_36 is False
    module_0.deduplicate(var_28)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    module_0.ends_dentals(var_10)


@pytest.mark.xfail(strict=True)
def test_case_996():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    module_0.ends_with_vowel(var_11)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_dentals(bytes_8)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(var_36)
    assert var_38 is False
    var_39 = module_0.deduplicate(bytes_12)
    assert var_39 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_40 = module_0.devoice(bytes_14)
    str_1 = "1X,mBK\\"
    var_41 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_42 = module_0.starts_with_vowel(str_2)
    assert var_42 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_43 = module_0.devoice(bytes_15)
    var_44 = module_0.ends_with_vowel(var_43)
    assert var_44 is False
    var_45 = module_0.starts_with_vowel(str_2)
    assert var_45 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    var_26 = module_0.ends_dentals(bytes_8)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.devoice(var_27)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    module_0.devoice(var_13)


@pytest.mark.xfail(strict=True)
def test_case_999():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.starts_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_3)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    module_0.deduplicate(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_1)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(bytes_10)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.ends_dentals(bytes_9)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_12)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.devoice(bytes_12)
    var_34 = module_0.devoice(var_33)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_13)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.starts_with_vowel(var_35)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_37)
    assert var_39 is False
    var_40 = module_0.ends_with_vowel(bytes_13)
    assert var_40 is False
    module_0.starts_with_vowel(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    module_0.deduplicate(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_4)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_6)
    assert var_16 is False
    module_0.ends_dentals(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.devoice(var_16)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.devoice(var_18)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    dict_0 = {}
    module_0.starts_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.devoice(var_12)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_7)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.devoice(var_30)
    str_1 = "1X,mBK\\"
    var_32 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_33 = module_0.starts_with_vowel(str_2)
    assert var_33 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.starts_with_vowel(str_2)
    assert var_36 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_37 = module_0.ends_with_vowel(str_3)
    assert var_37 is False
    var_38 = module_0.starts_with_vowel(str_3)
    assert var_38 is False
    bytes_12 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_39 = module_0.deduplicate(bytes_12)
    assert var_39 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_4 = "1X,mBK\\"
    var_40 = module_0.devoice(str_4)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_41 = module_0.devoice(bytes_13)
    var_42 = module_0.ends_with_vowel(var_41)
    assert var_42 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_43 = module_0.devoice(bytes_14)
    var_44 = module_0.starts_with_vowel(var_41)
    assert var_44 is False
    var_45 = module_0.starts_with_vowel(var_40)
    assert var_45 is False
    module_0.ends_with_vowel(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    module_0.devoice(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    str_2 = "1X,mBK\\"
    var_22 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_23 = module_0.starts_with_vowel(str_3)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(str_3)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    bytes_14 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_36 = module_0.deduplicate(bytes_14)
    assert var_36 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    module_0.deduplicate(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.devoice(var_17)
    str_1 = "1X,mBK\\"
    var_24 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(var_24)
    assert var_29 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    var_35 = module_0.deduplicate(bytes_10)
    assert var_35 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_12)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_13)
    var_39 = module_0.starts_with_vowel(var_36)
    assert var_39 is False
    var_40 = module_0.ends_with_vowel(var_38)
    assert var_40 is False
    module_0.deduplicate(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_6)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    var_22 = module_0.ends_dentals(bytes_8)
    assert var_22 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_10)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_11)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.deduplicate(bytes_10)
    assert var_28 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_dentals(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_6)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_15)
    assert var_20 is False
    module_0.starts_with_vowel(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.devoice(var_7)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_6)
    assert var_19 is False
    module_0.ends_dentals(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    module_0.ends_dentals(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.devoice(var_9)
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False
    str_3 = "1X,mBK\\"
    var_20 = module_0.devoice(str_3)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_26)
    assert var_29 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.ends_dentals(var_30)
    assert var_33 is False
    module_0.devoice(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    bool_0 = True
    module_0.ends_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.devoice(var_21)
    module_0.deduplicate(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.devoice(var_8)
    str_1 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_1)
    assert var_15 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "1X,mBK\\"
    var_17 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_dentals(var_30)
    assert var_33 is False
    var_34 = module_0.ends_dentals(bytes_11)
    assert var_34 is False
    module_0.ends_dentals(var_33)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    int_0 = -2960
    module_0.devoice(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_1)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_1)
    assert var_22 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.devoice(bytes_8)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_2)
    assert var_25 is False
    str_3 = "1X,mBK\\"
    var_26 = module_0.devoice(str_3)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(str_3)
    assert var_29 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    var_37 = module_0.deduplicate(bytes_11)
    assert var_37 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_dentals(var_25)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_4)
    module_0.starts_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    str_0 = "K3A!V\x0c#87"
    var_22 = module_0.starts_with_vowel(str_0)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_12)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_dentals(var_30)
    assert var_32 is False
    module_0.starts_with_vowel(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.deduplicate(bytes_10)
    assert var_25 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.ends_dentals(bytes_9)
    assert var_26 is False
    str_2 = "1X,mBK\\"
    var_27 = module_0.devoice(str_2)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_12)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(var_27)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_14)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_34)
    assert var_36 is False
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    str_3 = "K3A!V\x0c#87"
    var_38 = module_0.starts_with_vowel(str_3)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(str_0)
    assert var_39 is False
    module_0.deduplicate(var_39)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_1)
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(bytes_10)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.ends_dentals(bytes_9)
    assert var_28 is False
    module_0.starts_with_vowel(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    str_0 = "1X,mBK\\"
    var_16 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_1)
    assert var_20 is False
    module_0.devoice(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bool_0 = False
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    module_0.deduplicate(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_0)
    assert var_14 is False
    module_0.starts_with_vowel(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    complex_0 = -4218.4 - 4269.597j
    set_0 = {complex_0}
    module_0.ends_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_3)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_3)
    assert var_17 is False
    str_4 = "1X,mBK\\"
    var_18 = module_0.devoice(str_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_18)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_dentals(bytes_7)
    assert var_28 is False
    str_5 = "K3A!V\x0c#87"
    var_29 = module_0.starts_with_vowel(str_5)
    assert var_29 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    module_0.starts_with_vowel(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_10)
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_0)
    assert var_15 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    str_2 = "1X,mBK\\"
    var_17 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.deduplicate(var_20)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_7)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_3 = "1X,mBK\\"
    var_25 = module_0.devoice(str_3)
    str_4 = "K3A!V\x0c#87"
    var_26 = module_0.starts_with_vowel(str_4)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(str_4)
    assert var_29 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    module_0.ends_dentals(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    module_0.deduplicate(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.devoice(var_20)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_28)
    assert var_30 is False
    var_31 = module_0.ends_dentals(var_28)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.ends_dentals(var_32)
    assert var_35 is False
    var_36 = module_0.ends_dentals(bytes_12)
    assert var_36 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_14)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_15)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_4 = module_0.starts_with_vowel(tuple_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_13 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_0)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_8)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.ends_dentals(bytes_7)
    assert var_22 is False
    str_1 = "1X,mBK\\"
    var_23 = module_0.devoice(str_1)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(bytes_9)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    var_33 = module_0.ends_dentals(var_31)
    assert var_33 is False
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.deduplicate(var_4)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_16)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.ends_dentals(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.deduplicate(var_23)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_11)
    var_30 = module_0.ends_dentals(var_27)
    assert var_30 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_12)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_13)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.ends_with_vowel(var_33)
    assert var_35 is False
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.deduplicate(var_31)
    assert var_37 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_38 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_39 = module_0.starts_with_vowel(str_1)
    assert var_39 is False
    module_0.ends_with_vowel(var_25)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_8)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(bytes_7)
    assert var_23 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_2)
    assert var_24 is False
    module_0.ends_dentals(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.devoice(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_14)
    assert var_19 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    module_0.starts_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_6)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_7)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_8)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_9)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(var_17)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_11)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    str_0 = "1X,mBK\\"
    var_25 = module_0.devoice(str_0)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_12)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_13)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.starts_with_vowel(var_25)
    assert var_30 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_31 = module_0.ends_with_vowel(str_1)
    assert var_31 is False
    var_32 = module_0.starts_with_vowel(str_1)
    assert var_32 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_14)
    module_0.ends_dentals(var_31)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_16 = module_0.starts_with_vowel(tuple_0)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.deduplicate(var_17)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    bytes_11 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_11)
    assert var_28 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.devoice(bytes_11)
    module_0.ends_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(var_10)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    str_0 = "1X,mBK\\"
    var_18 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_1)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_1)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_10)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(bytes_9)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_14)
    assert var_29 is False
    module_0.deduplicate(var_29)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_3)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_3)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    module_0.deduplicate(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.starts_with_vowel(var_23)
    assert var_24 is False
    module_0.devoice(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_1)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    str_2 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    none_type_0 = None
    list_0 = [var_11, var_15, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.deduplicate(var_10)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_dentals(bytes_6)
    assert var_21 is False
    str_1 = "1X,mBK\\"
    var_22 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_22)
    assert var_27 is False
    str_2 = "1X,mBK\\"
    var_28 = module_0.devoice(str_2)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(str_2)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_dentals(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_13)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_14 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_14)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    var_41 = module_0.ends_with_vowel(var_39)
    assert var_41 is False
    var_42 = module_0.ends_with_vowel(bytes_13)
    assert var_42 is False
    bytes_15 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_43 = module_0.devoice(bytes_15)
    var_44 = module_0.ends_with_vowel(var_43)
    assert var_44 is False
    bytes_16 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_45 = module_0.devoice(bytes_16)
    var_46 = module_0.starts_with_vowel(var_43)
    assert var_46 is False
    var_47 = module_0.ends_with_vowel(var_45)
    assert var_47 is False
    module_0.ends_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    complex_0 = -1165.64795 - 1145.236795j
    module_0.ends_with_vowel(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.devoice(var_4)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    str_0 = "`<)4H\rS\x0c"
    var_19 = module_0.ends_dentals(str_0)
    assert var_19 is False
    str_1 = "\\Z8@Jg"
    var_20 = module_0.ends_with_vowel(str_1)
    assert var_20 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    int_0 = -25
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_10)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    str_0 = "1X,mBK\\"
    var_17 = module_0.devoice(str_0)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_17)
    assert var_22 is False
    float_0 = -1956.16
    module_0.devoice(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    module_0.devoice(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    module_0.deduplicate(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    str_1 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_10 = module_0.starts_with_vowel(tuple_0)
    assert var_10 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_13)
    assert var_18 is False
    module_0.devoice(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_5)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.deduplicate(var_11)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    str_1 = "1X,mBK\\"
    var_23 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_9)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_23)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.devoice(bytes_11)
    str_2 = "1X,mBK\\"
    var_35 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_36 = module_0.starts_with_vowel(str_3)
    assert var_36 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    var_39 = module_0.starts_with_vowel(str_3)
    assert var_39 is False
    module_0.devoice(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_7)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(bytes_6)
    assert var_18 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.devoice(var_19)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.devoice(var_31)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_33 = module_0.starts_with_vowel(tuple_0)
    assert var_33 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_12)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.starts_with_vowel(var_34)
    assert var_37 is False
    var_38 = module_0.ends_with_vowel(var_36)
    assert var_38 is False
    var_39 = module_0.devoice(bytes_13)
    var_40 = module_0.deduplicate(var_34)
    assert var_40 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_14 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_41 = module_0.deduplicate(bytes_14)
    assert var_41 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_42 = module_0.starts_with_vowel(var_41)
    assert var_42 is False
    bytes_15 = b"=\xc4\xb3D\xea8"
    var_43 = module_0.ends_with_vowel(bytes_15)
    assert var_43 is False
    str_0 = "1X,mBK\\"
    var_44 = module_0.devoice(str_0)
    var_45 = module_0.ends_dentals(str_0)
    assert var_45 is False
    var_46 = module_0.devoice(var_44)
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_4)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_7)
    assert var_15 is False
    str_0 = "1X,mBK\\"
    var_16 = module_0.devoice(str_0)
    var_17 = module_0.ends_dentals(str_0)
    assert var_17 is False
    var_18 = module_0.devoice(var_16)
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    str_2 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_8)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    module_0.ends_dentals(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_4)
    assert var_24 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.deduplicate(var_8)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_1 = (str_3, bool_0, dict_0)
    var_17 = module_0.devoice(tuple_1)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    str_4 = "1X,mBK\\"
    var_19 = module_0.devoice(str_4)
    str_5 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_5)
    assert var_20 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_4)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_5)
    assert var_23 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_5)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_6)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    module_0.devoice(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    float_0 = -1279.5978
    module_0.devoice(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    set_0 = {var_5}
    module_0.starts_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    dict_0 = {}
    var_2 = module_0.deduplicate(dict_0)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_10)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.deduplicate(var_26)
    module_0.starts_with_vowel(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_16)
    module_0.ends_dentals(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_7)
    assert var_19 is False
    str_0 = "1X,mBK\\"
    var_20 = module_0.devoice(str_0)
    var_21 = module_0.ends_dentals(str_0)
    assert var_21 is False
    var_22 = module_0.devoice(var_20)
    str_1 = "\\Z8@Jg"
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False
    dict_0 = {}
    var_24 = module_0.deduplicate(dict_0)
    module_0.starts_with_vowel(var_21)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_4)
    assert var_9 is False
    str_0 = "1X,mBK\\"
    var_10 = module_0.devoice(str_0)
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.devoice(var_18)
    str_1 = "1X,mBK\\"
    var_20 = module_0.devoice(str_1)
    var_21 = module_0.ends_dentals(str_1)
    assert var_21 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    str_0 = ",h?4eohz%\nnY{"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    dict_0 = {}
    var_9 = module_0.deduplicate(dict_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_8)
    var_21 = module_0.starts_with_vowel(var_20)
    assert var_21 is False
    str_1 = "`<)4H\rS\x0c"
    var_22 = module_0.ends_dentals(str_1)
    assert var_22 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_1)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_2)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.deduplicate(bytes_9)
    assert var_26 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.devoice(bytes_9)
    dict_0 = {}
    var_28 = module_0.deduplicate(dict_0)
    none_type_0 = None
    module_0.deduplicate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_3)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_5)
    module_0.starts_with_vowel(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_0 = "1X,mBK\\"
    var_12 = module_0.devoice(str_0)
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_13 = module_0.devoice(tuple_0)
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    module_0.starts_with_vowel(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(var_4)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    str_0 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_0)
    assert var_18 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_19 = module_0.devoice(tuple_0)
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    var_21 = module_0.deduplicate(str_0)
    assert var_21 == "K3A!V\x0c#87"
    module_0.deduplicate(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.deduplicate(var_14)
    assert var_17 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_1 = {}
    var_18 = module_0.deduplicate(dict_1)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_6)
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_7)
    str_1 = "1X,mBK\\"
    var_22 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_23 = module_0.starts_with_vowel(str_2)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(str_2)
    assert var_26 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_27 = module_0.ends_with_vowel(bytes_9)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    module_0.deduplicate(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    module_0.ends_dentals(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    dict_0 = {}
    var_4 = module_0.devoice(dict_0)
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.deduplicate(var_6)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_13 = module_0.starts_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.devoice(var_22)
    str_1 = "1X,mBK\\"
    var_29 = module_0.devoice(str_1)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.starts_with_vowel(var_29)
    assert var_34 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_11)
    var_36 = module_0.ends_with_vowel(var_35)
    assert var_36 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_dentals(var_35)
    assert var_38 is False
    var_39 = module_0.ends_with_vowel(var_37)
    assert var_39 is False
    module_0.deduplicate(var_36)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bool_0 = False
    module_0.starts_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    dict_0 = {}
    var_11 = module_0.deduplicate(dict_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_6)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    module_0.ends_with_vowel(var_26)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    dict_0 = {}
    var_6 = module_0.devoice(dict_0)
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_1)
    var_7 = module_0.devoice(tuple_0)
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    str_1 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_1)
    assert var_19 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_23 = module_0.ends_with_vowel(bytes_7)
    assert var_23 is False
    str_2 = "1X,mBK\\"
    var_24 = module_0.devoice(str_2)
    var_25 = module_0.ends_dentals(str_2)
    assert var_25 is False
    var_26 = module_0.devoice(var_24)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_28)
    assert var_30 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.deduplicate(var_7)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.devoice(var_17)
    str_1 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_1)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    str_2 = "1X,mBK\\"
    var_22 = module_0.devoice(str_2)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_22)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.ends_dentals(var_28)
    assert var_31 is False
    module_0.ends_dentals(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    module_0.ends_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_7)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    module_0.ends_with_vowel(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    int_0 = -1479
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_2)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.devoice(var_9)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_3 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_3)
    assert var_12 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_13 = module_0.devoice(tuple_0)
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    var_15 = module_0.deduplicate(str_3)
    assert var_15 == "K3A!V\x0c#87"
    module_0.ends_with_vowel(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_5)
    assert var_16 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_6)
    assert var_17 is False
    str_2 = "1X,mBK\\"
    var_18 = module_0.devoice(str_2)
    var_19 = module_0.ends_dentals(str_2)
    assert var_19 is False
    var_20 = module_0.devoice(var_18)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_3)
    assert var_22 is False
    str_4 = "1X,mBK\\"
    var_23 = module_0.devoice(str_4)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(var_23)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(bytes_8)
    assert var_29 is False
    module_0.deduplicate(var_29)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_11 = module_0.devoice(str_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.deduplicate(var_12)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.starts_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_0)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_0)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.devoice(bytes_9)
    module_0.ends_dentals(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    module_0.ends_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_15 = module_0.devoice(tuple_0)
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    dict_1 = {}
    var_19 = module_0.deduplicate(dict_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.devoice(var_25)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_10)
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_11)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_28)
    assert var_30 is False
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_12)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_13)
    var_35 = module_0.starts_with_vowel(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    var_37 = module_0.deduplicate(var_34)
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    module_0.ends_with_vowel(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_3)
    str_2 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_13 = module_0.starts_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_15 = module_0.starts_with_vowel(tuple_1)
    assert var_15 is False
    str_3 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_4)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_3)
    assert var_18 is False
    dict_0 = {}
    var_19 = module_0.deduplicate(dict_0)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_4)
    module_0.deduplicate(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    int_0 = 1080
    module_0.ends_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    var_15 = module_0.ends_dentals(str_0)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    str_1 = "1X,mBK\\"
    var_17 = module_0.devoice(str_1)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_7)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.starts_with_vowel(var_23)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_8)
    assert var_30 is False
    module_0.devoice(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    var_5 = module_0.ends_dentals(str_0)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_dentals(bytes_2)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    dict_0 = {}
    var_18 = module_0.devoice(dict_0)
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_3)
    assert var_22 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_4)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(str_4)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.starts_with_vowel(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(bytes_7)
    assert var_30 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    module_0.ends_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    module_0.deduplicate(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    str_1 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    str_2 = "%OJ<'vPCn@4"
    var_14 = module_0.deduplicate(str_2)
    assert var_14 == "%OJ<'vPCn@4"
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_5)
    assert var_15 is False
    bool_0 = False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    str_1 = "1X,mBK\\"
    var_9 = module_0.devoice(str_1)
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_2 = module_0.ends_dentals(list_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    str_4 = "1X,mBK\\"
    var_9 = module_0.devoice(str_4)
    str_5 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_5)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_5)
    assert var_13 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_6 = "%OJ<'vPCn@4"
    var_15 = module_0.deduplicate(str_6)
    assert var_15 == "%OJ<'vPCn@4"
    str_7 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_7)
    assert var_16 is False
    str_8 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_8)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_8)
    assert var_18 is False
    module_0.starts_with_vowel(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    str_2 = "1X,mBK\\"
    var_3 = module_0.devoice(str_2)
    assert var_3 == "1X,mBK\\"
    str_3 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_3)
    assert var_4 is False
    str_4 = "ORrJ2:"
    var_5 = module_0.starts_with_vowel(str_4)
    assert var_5 is False
    bool_0 = False
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(var_0)


def test_case_1125():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.deduplicate(var_12)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "%OJ<'vPCn@4"
    var_19 = module_0.deduplicate(str_0)
    assert var_19 == "%OJ<'vPCn@4"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_6)
    assert var_25 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(bytes_8)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_dentals(var_27)
    assert var_30 is False
    bytes_11 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_31 = module_0.deduplicate(bytes_11)
    assert var_31 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_32 = module_0.starts_with_vowel(var_31)
    assert var_32 is False
    bytes_12 = b"=\xc4\xb3D\xea8"
    var_33 = module_0.ends_with_vowel(bytes_12)
    assert var_33 is False
    module_0.deduplicate(var_28)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_1)
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_1 = (str_0, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_1)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    str_1 = "`<)4H\rS\x0c"
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_2)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_3)
    var_20 = module_0.devoice(var_19)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_0 = [set_1, str_4, str_4]
    var_21 = module_0.ends_dentals(list_0)
    assert var_21 is False
    str_5 = "1X,mBK\\"
    var_22 = module_0.devoice(str_5)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_4)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_5)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_22)
    assert var_27 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_6)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_7)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(bytes_6)
    assert var_33 is False
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.deduplicate(bytes_8)
    assert var_34 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_35 = module_0.starts_with_vowel(var_34)
    assert var_35 is False
    module_0.ends_with_vowel(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_4)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_11 = module_0.starts_with_vowel(tuple_0)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    float_1 = 18.04463
    module_0.starts_with_vowel(float_1)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    str_0 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.devoice(dict_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    str_1 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_15)
    assert var_20 is False
    module_0.starts_with_vowel(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    module_0.ends_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    dict_0 = {}
    var_11 = module_0.deduplicate(dict_0)
    str_1 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(bytes_3)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    module_0.ends_with_vowel(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_2)
    assert var_6 is False
    dict_0 = {}
    var_7 = module_0.deduplicate(dict_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.devoice(var_13)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_3)
    str_3 = "ORrJ2:"
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    str_4 = "1X,mBK\\"
    var_17 = module_0.devoice(str_4)
    var_18 = module_0.ends_dentals(str_4)
    assert var_18 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_19 = module_0.ends_with_vowel(tuple_0)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_4)
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.deduplicate(bytes_6)
    var_27 = module_0.starts_with_vowel(var_26)
    assert var_27 is False
    module_0.deduplicate(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(var_4)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    str_1 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_12 = module_0.starts_with_vowel(tuple_1)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(bytes_3)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_1 = -1663.70075
    tuple_2 = (float_1,)
    var_19 = module_0.starts_with_vowel(tuple_2)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(tuple_2)
    assert var_20 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_1)
    assert var_1 is False
    str_0 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.devoice(dict_0)
    module_0.ends_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_8)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_5)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_3)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_3)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_7)
    var_28 = module_0.devoice(var_22)
    str_4 = "\\Z8@Jg"
    var_29 = module_0.ends_with_vowel(str_4)
    assert var_29 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_8)
    dict_1 = {}
    var_31 = module_0.deduplicate(dict_1)
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_32 = module_0.deduplicate(bytes_9)
    module_0.ends_with_vowel(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    dict_0 = {}
    var_8 = module_0.devoice(dict_0)
    str_0 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_1)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_0)
    assert var_12 == "K3A!V\x0c#87"
    str_2 = "%OJ<'vPCn@4"
    var_13 = module_0.deduplicate(str_2)
    assert var_13 == "%OJ<'vPCn@4"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    str_3 = "1X,mBK\\"
    var_18 = module_0.devoice(str_3)
    var_19 = module_0.ends_dentals(str_3)
    assert var_19 is False
    var_20 = module_0.devoice(var_18)
    str_4 = "ymWXCWpM"
    bool_1 = False
    dict_2 = {bool_1: bool_1, str_4: bool_1, bool_1: str_4}
    tuple_1 = (str_4, bool_1, dict_2)
    var_21 = module_0.devoice(tuple_1)
    var_22 = module_0.ends_dentals(var_21)
    assert var_22 is False
    module_0.ends_dentals(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    float_0 = -1013.0
    module_0.starts_with_vowel(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    module_0.devoice(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    str_3 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_3)
    assert var_12 == "K3A!V\x0c#87"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_5)
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_23 = module_0.starts_with_vowel(tuple_1)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(tuple_1)
    assert var_24 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_8)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_9)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.deduplicate(bytes_8)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    float_0 = 809.108
    module_0.ends_with_vowel(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    str_1 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    str_3 = "1X,mBK\\"
    var_12 = module_0.devoice(str_3)
    var_13 = module_0.ends_dentals(str_3)
    assert var_13 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_4)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_4)
    assert var_15 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_16 = module_0.starts_with_vowel(tuple_1)
    assert var_16 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_4)
    module_0.ends_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    str_3 = "1X,mBK\\"
    var_10 = module_0.devoice(str_3)
    str_4 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_4)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_4)
    assert var_14 is False
    str_5 = "\\Z8@Jg"
    var_15 = module_0.ends_with_vowel(str_5)
    assert var_15 is False
    str_6 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_6)
    assert var_16 is False
    str_7 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_7)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_6)
    assert var_18 is False
    str_8 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_8)
    assert var_19 is False
    str_9 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_9)
    assert var_20 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_4)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_4)
    var_23 = module_0.ends_dentals(bytes_4)
    assert var_23 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_5)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    none_type_0 = None
    module_0.devoice(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    object_0 = module_1.object()
    module_0.ends_with_vowel(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_1)
    assert var_10 is False
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_0 = (str_3, bool_0, dict_0)
    var_12 = module_0.devoice(tuple_0)
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    var_14 = module_0.deduplicate(str_2)
    assert var_14 == "K3A!V\x0c#87"
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_3)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_4)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.devoice(bytes_4)
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_19 = module_0.starts_with_vowel(tuple_1)
    assert var_19 is False
    str_4 = "\\Z8@Jg"
    var_20 = module_0.ends_with_vowel(str_4)
    assert var_20 is False
    str_5 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_5)
    assert var_21 is False
    str_6 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_6)
    assert var_22 is False
    var_23 = module_0.ends_dentals(str_5)
    assert var_23 is False
    module_0.devoice(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.deduplicate(dict_0)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_10 = module_0.ends_dentals(list_0)
    assert var_10 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_11 = module_0.starts_with_vowel(tuple_1)
    assert var_11 is False
    module_0.starts_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "%OJ<'vPCn@4"
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.devoice(var_8)
    module_0.ends_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.deduplicate(var_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_3)
    assert var_8 is False
    str_0 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_0)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    str_1 = "`<)4H\rS\x0c"
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    module_0.starts_with_vowel(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(var_8)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.devoice(var_17)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_0)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(str_0)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.devoice(var_22)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_10)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(bytes_10)
    assert var_34 is False
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_12)
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_36 = module_0.devoice(bytes_13)
    var_37 = module_0.ends_with_vowel(var_36)
    assert var_37 is False
    var_38 = module_0.ends_dentals(var_36)
    assert var_38 is False
    var_39 = module_0.ends_dentals(var_36)
    assert var_39 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bool_0 = True
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.devoice(dict_0)
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_1)
    module_0.starts_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_4)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_21 = module_0.ends_dentals(list_0)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(str_1)
    assert var_22 is False
    module_0.ends_with_vowel(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bool_0 = False
    module_0.starts_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_3)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_7)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.deduplicate(var_10)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    str_1 = "1X,mBK\\"
    var_27 = module_0.devoice(str_1)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(str_1)
    assert var_30 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_11)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_12 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_33 = module_0.deduplicate(bytes_12)
    assert var_33 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.starts_with_vowel(var_33)
    assert var_34 is False
    module_0.starts_with_vowel(var_30)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_4)
    assert var_11 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    dict_0 = {}
    var_18 = module_0.devoice(dict_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    str_3 = "ORrJ2:"
    var_27 = module_0.starts_with_vowel(str_3)
    assert var_27 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_11)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.deduplicate(var_30)
    assert var_33 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_32)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    dict_0 = {}
    module_0.starts_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    none_type_0 = None
    module_0.ends_with_vowel(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    str_2 = "ORrJ2:"
    var_5 = module_0.starts_with_vowel(str_2)
    assert var_5 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_3)
    assert var_7 is False
    str_4 = "\\Z8@Jg"
    var_8 = module_0.ends_with_vowel(str_4)
    assert var_8 is False
    str_5 = "1X,mBK\\"
    var_9 = module_0.devoice(str_5)
    assert var_9 == "1X,mBK\\"
    var_10 = module_0.ends_dentals(str_5)
    assert var_10 is False
    var_11 = module_0.devoice(str_4)
    assert var_11 == "\\Z8@Jg"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_1)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_1)
    assert var_17 is False
    str_6 = "1X,mBK\\"
    var_18 = module_0.devoice(str_6)
    var_19 = module_0.ends_dentals(str_6)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_18)
    assert var_20 is False
    module_0.deduplicate(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_5)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    str_0 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_0)
    assert var_24 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_1)
    assert var_25 is False
    var_26 = module_0.ends_dentals(str_0)
    assert var_26 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_27 = module_0.devoice(tuple_0)
    var_28 = module_0.ends_dentals(var_27)
    assert var_28 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_29 = module_0.ends_dentals(list_0)
    assert var_29 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_10)
    var_31 = module_0.ends_with_vowel(var_30)
    assert var_31 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_11)
    var_33 = module_0.starts_with_vowel(var_30)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(var_32)
    assert var_34 is False
    var_35 = module_0.devoice(bytes_11)
    var_36 = module_0.devoice(var_30)
    module_0.starts_with_vowel(var_34)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    str_1 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    str_2 = "%OJ<'vPCn@4"
    var_7 = module_0.deduplicate(str_2)
    assert var_7 == "%OJ<'vPCn@4"
    dict_0 = {}
    var_8 = module_0.deduplicate(dict_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_3)
    str_3 = "1X,mBK\\"
    var_11 = module_0.devoice(str_3)
    module_0.devoice(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    float_0 = 3047.249738
    module_0.devoice(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_6 = module_0.ends_with_vowel(tuple_0)
    assert var_6 is False
    none_type_0 = None
    module_0.deduplicate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_3)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_3)
    assert var_13 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(var_1)
    assert var_3 is False
    module_0.devoice(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_4 = module_0.ends_dentals(list_0)
    assert var_4 is False
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    str_2 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_3)
    assert var_13 is False
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    module_0.ends_with_vowel(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_3)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_3)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    str_4 = "1X,mBK\\"
    var_21 = module_0.devoice(str_4)
    var_22 = module_0.ends_dentals(str_4)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_21)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    float_0 = 2357.533
    module_0.deduplicate(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    str_2 = "1X,mBK\\"
    var_2 = module_0.devoice(str_2)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_2)
    assert var_3 is False
    var_4 = module_0.devoice(str_1)
    assert var_4 == "\\Z8@Jg"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.devoice(var_10)
    str_3 = "ORrJ2:"
    var_12 = module_0.starts_with_vowel(str_3)
    assert var_12 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_3)
    assert var_14 is False
    str_4 = "1X,mBK\\"
    var_15 = module_0.devoice(str_4)
    var_16 = module_0.ends_dentals(str_4)
    assert var_16 is False
    var_17 = module_0.devoice(var_15)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    str_5 = "K3A!V\x0c#87"
    var_23 = module_0.starts_with_vowel(str_5)
    assert var_23 is False
    str_6 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_6)
    assert var_24 is False
    var_25 = module_0.ends_dentals(str_5)
    assert var_25 is False
    str_7 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_7, str_7, str_7}
    list_0 = [set_0, str_7, str_7]
    var_26 = module_0.ends_dentals(list_0)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(str_7)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(list_0)
    assert var_28 is False
    module_0.starts_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.starts_with_vowel(var_2)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    str_2 = "1X,mBK\\"
    var_6 = module_0.devoice(str_2)
    assert var_6 == "1X,mBK\\"
    var_7 = module_0.ends_dentals(str_2)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_6)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_2)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_15 = module_0.starts_with_vowel(tuple_0)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    module_0.starts_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_3)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_5)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_6)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(bytes_5)
    assert var_12 is False
    str_0 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_0)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    var_15 = module_0.ends_dentals(str_1)
    assert var_15 is False
    var_16 = module_0.devoice(str_0)
    module_0.devoice(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    module_0.starts_with_vowel(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_4)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_13 = module_0.ends_dentals(list_0)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(list_0)
    assert var_15 is False
    module_0.ends_with_vowel(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    str_0 = "]ffNxf!M16g"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(bytes_2)
    assert var_11 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_2)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    set_0 = set()
    tuple_1 = (set_0,)
    var_18 = module_0.ends_with_vowel(tuple_1)
    assert var_18 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    module_0.ends_dentals(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_9 = module_0.devoice(tuple_0)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(bytes_5)
    assert var_18 is False
    set_0 = set()
    tuple_1 = (set_0,)
    var_19 = module_0.ends_with_vowel(tuple_1)
    assert var_19 is False
    float_0 = -1663.70075
    tuple_2 = (float_0,)
    var_20 = module_0.starts_with_vowel(tuple_2)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(tuple_2)
    assert var_21 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.devoice(var_28)
    module_0.devoice(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "`<)4H\rS\x0c"
    var_5 = module_0.ends_dentals(str_2)
    assert var_5 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    var_8 = module_0.ends_dentals(str_3)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    var_10 = module_0.devoice(var_7)
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_4)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_4)
    assert var_19 is False
    str_5 = "1X,mBK\\"
    var_20 = module_0.devoice(str_5)
    var_21 = module_0.ends_dentals(str_5)
    assert var_21 is False
    var_22 = module_0.devoice(var_20)
    str_6 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_6, str_6, str_6}
    list_0 = [set_1, str_6, str_6]
    var_23 = module_0.ends_dentals(list_0)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_6)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(list_0)
    assert var_25 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.deduplicate(bytes_5)
    assert var_26 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.devoice(bytes_5)
    module_0.ends_with_vowel(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_1)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "ymWXCWpM"
    bool_1 = False
    dict_2 = {bool_1: bool_1, str_2: bool_1, bool_1: str_2}
    tuple_1 = (str_2, bool_1, dict_2)
    var_4 = module_0.devoice(tuple_1)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    var_6 = module_0.deduplicate(str_1)
    assert var_6 == "K3A!V\x0c#87"
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    str_3 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_3)
    assert var_8 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_4)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_3)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_0)
    assert var_11 is False
    str_5 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_5)
    assert var_12 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_1)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_2)
    var_19 = module_0.deduplicate(var_13)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(dict_2)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = "%OJ<'vPCn@4"
    var_6 = module_0.deduplicate(str_0)
    assert var_6 == "%OJ<'vPCn@4"
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    str_2 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    str_3 = "1X,mBK\\"
    var_14 = module_0.devoice(str_3)
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    var_16 = module_0.devoice(str_2)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_0 = [set_0, str_4, str_4]
    var_17 = module_0.ends_dentals(list_0)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_4)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(list_0)
    assert var_19 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_4)
    assert var_24 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_6)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.deduplicate(bytes_7)
    assert var_26 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.starts_with_vowel(var_26)
    assert var_27 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_28 = module_0.starts_with_vowel(tuple_0)
    assert var_28 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_29 = module_0.starts_with_vowel(tuple_1)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(tuple_1)
    assert var_30 is False
    module_0.devoice(var_29)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    module_0.ends_dentals(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(list_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.ends_dentals(bytes_3)
    assert var_13 is False
    dict_0 = {}
    var_14 = module_0.deduplicate(dict_0)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_5)
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_dentals(bytes_5)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.deduplicate(var_18)
    str_2 = "1X,mBK\\"
    var_25 = module_0.devoice(str_2)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(str_2)
    assert var_28 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.deduplicate(bytes_9)
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_30 = module_0.deduplicate(bytes_10)
    var_31 = module_0.starts_with_vowel(var_30)
    assert var_31 is False
    module_0.ends_with_vowel(var_31)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    str_2 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.ends_dentals(bytes_8)
    assert var_24 is False
    module_0.ends_dentals(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    module_0.deduplicate(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    str_1 = "`<)4H\rS\x0c"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    module_0.devoice(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    str_0 = "%OJ<'vPCn@4"
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "%OJ<'vPCn@4"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(bytes_1)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    module_0.starts_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_3)
    assert var_8 is False
    str_2 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_2)
    assert var_9 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_3)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_2)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    str_4 = "1X,mBK\\"
    var_13 = module_0.devoice(str_4)
    str_5 = "1X,mBK\\"
    var_14 = module_0.devoice(str_5)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_5)
    assert var_17 is False
    module_0.ends_dentals(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_8 = module_0.starts_with_vowel(tuple_1)
    assert var_8 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(bytes_4)
    assert var_18 is False
    module_0.deduplicate(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "%OJ<'vPCn@4"
    var_4 = module_0.deduplicate(str_0)
    assert var_4 == "%OJ<'vPCn@4"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_9 = module_0.ends_dentals(list_0)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    str_2 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_2)
    assert var_11 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    var_16 = module_0.devoice(var_13)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_1 = [set_1, str_4, str_4]
    var_17 = module_0.ends_dentals(list_1)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_4)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(list_1)
    assert var_19 is False
    str_5 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_5)
    assert var_20 is False
    module_0.starts_with_vowel(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    str_0 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_7 = module_0.starts_with_vowel(tuple_0)
    assert var_7 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_13 = module_0.ends_dentals(list_0)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(list_0)
    assert var_15 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(bytes_4)
    assert var_20 is False
    str_3 = "\\Z8@Jg"
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    module_0.ends_with_vowel(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.devoice(var_11)
    str_0 = "`<)4H\rS\x0c"
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_2)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_26 = module_0.ends_dentals(list_0)
    assert var_26 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_4)
    assert var_27 is False
    var_28 = module_0.starts_with_vowel(str_4)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(bytes_9)
    assert var_34 is False
    module_0.starts_with_vowel(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    module_0.deduplicate(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.deduplicate(var_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    str_1 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    var_11 = module_0.devoice(var_8)
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False
    str_3 = "K3A!V\x0c#87"
    var_18 = module_0.starts_with_vowel(str_3)
    assert var_18 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_0)
    var_19 = module_0.devoice(tuple_0)
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    var_21 = module_0.deduplicate(str_3)
    assert var_21 == "K3A!V\x0c#87"
    module_0.devoice(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_6)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_5)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.devoice(var_20)
    dict_0 = {}
    module_0.starts_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.deduplicate(var_2)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    module_0.devoice(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    str_1 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_9 = module_0.devoice(tuple_0)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    var_11 = module_0.deduplicate(str_1)
    assert var_11 == "K3A!V\x0c#87"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.devoice(var_12)
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_5)
    assert var_19 is False
    str_3 = "1X,mBK\\"
    var_20 = module_0.devoice(str_3)
    var_21 = module_0.ends_dentals(str_3)
    assert var_21 is False
    var_22 = module_0.devoice(var_20)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_6)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_24 = module_0.starts_with_vowel(tuple_1)
    assert var_24 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_25 = module_0.ends_with_vowel(bytes_7)
    assert var_25 is False
    str_4 = "K3A!V\x0c#87"
    var_26 = module_0.starts_with_vowel(str_4)
    assert var_26 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_27 = module_0.ends_with_vowel(str_5)
    assert var_27 is False
    var_28 = module_0.ends_dentals(str_4)
    assert var_28 is False
    var_29 = module_0.ends_dentals(bytes_7)
    assert var_29 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_8)
    module_0.deduplicate(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.devoice(var_15)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_1 = (str_3, bool_0, dict_0)
    var_27 = module_0.devoice(tuple_1)
    var_28 = module_0.ends_dentals(var_27)
    assert var_28 is False
    str_4 = "ORrJ2:"
    var_29 = module_0.starts_with_vowel(str_4)
    assert var_29 is False
    module_0.starts_with_vowel(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.deduplicate(var_4)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "\\Z8@Jg"
    var_11 = module_0.ends_with_vowel(str_0)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.starts_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(bytes_6)
    assert var_19 is False
    str_1 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_1)
    assert var_20 is False
    bytes_8 = b"=\xc4\xb3D\xea8"
    var_21 = module_0.ends_with_vowel(bytes_8)
    assert var_21 is False
    str_2 = "1X,mBK\\"
    var_22 = module_0.devoice(str_2)
    var_23 = module_0.ends_dentals(str_2)
    assert var_23 is False
    var_24 = module_0.devoice(var_22)
    var_25 = module_0.devoice(var_22)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_3)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(str_3)
    assert var_27 is False
    str_4 = "`<)4H\rS\x0c"
    var_28 = module_0.ends_dentals(str_4)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(bytes_9)
    assert var_34 is False
    str_5 = "1X,mBK\\"
    var_35 = module_0.devoice(str_5)
    str_6 = "K3A!V\x0c#87"
    var_36 = module_0.starts_with_vowel(str_6)
    assert var_36 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_11)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    var_39 = module_0.starts_with_vowel(str_6)
    assert var_39 is False
    bool_0 = False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_2)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    str_2 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_2)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_4)
    assert var_19 is False
    module_0.ends_dentals(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_9)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    str_0 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_0)
    assert var_14 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_0)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_dentals(var_18)
    assert var_21 is False
    var_22 = module_0.ends_dentals(bytes_5)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    str_2 = "1X,mBK\\"
    var_28 = module_0.devoice(str_2)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(str_2)
    assert var_31 is False
    dict_0 = {}
    var_32 = module_0.devoice(dict_0)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_10)
    var_34 = module_0.ends_with_vowel(var_33)
    assert var_34 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_35 = module_0.devoice(bytes_11)
    var_36 = module_0.ends_dentals(var_33)
    assert var_36 is False
    bytes_12 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_37 = module_0.deduplicate(bytes_12)
    assert var_37 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_38 = module_0.devoice(bytes_12)
    str_3 = "`<)4H\rS\x0c"
    var_39 = module_0.ends_dentals(str_3)
    assert var_39 is False
    bytes_13 = b"=\xc4\xb3D\xea8"
    var_40 = module_0.ends_with_vowel(bytes_13)
    assert var_40 is False
    str_4 = "1X,mBK\\"
    var_41 = module_0.devoice(str_4)
    var_42 = module_0.ends_dentals(str_4)
    assert var_42 is False
    var_43 = module_0.devoice(var_41)
    var_44 = module_0.devoice(var_41)
    dict_1 = {}
    var_45 = module_0.deduplicate(dict_1)
    module_0.starts_with_vowel(var_30)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    str_3 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_3)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    str_1 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_1)
    assert var_12 is False
    str_2 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_3)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_2)
    assert var_15 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_0 = [set_0, str_4, str_4]
    var_16 = module_0.ends_dentals(list_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_4)
    assert var_17 is False
    module_0.devoice(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    str_0 = "< p$"
    set_0 = {str_0}
    module_0.starts_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_5)
    assert var_13 is False
    str_0 = "1X,mBK\\"
    var_14 = module_0.devoice(str_0)
    var_15 = module_0.ends_dentals(str_0)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_17 = module_0.ends_dentals(list_0)
    assert var_17 is False
    str_2 = "\\Z8@Jg"
    var_18 = module_0.ends_with_vowel(str_2)
    assert var_18 is False
    dict_0 = {}
    var_19 = module_0.deduplicate(dict_0)
    module_0.devoice(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_8 = module_0.ends_dentals(list_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    module_0.ends_with_vowel(set_1)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.ends_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    int_0 = -803
    set_0 = {int_0, int_0, int_0}
    module_0.ends_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_7)
    module_0.ends_dentals(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    dict_0 = {}
    var_2 = module_0.deduplicate(dict_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_4)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_5)
    var_18 = module_0.ends_dentals(bytes_4)
    assert var_18 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_1 = [set_1, str_4, str_4]
    var_19 = module_0.ends_dentals(list_1)
    assert var_19 is False
    module_0.devoice(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_10 = module_0.ends_dentals(list_0)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.devoice(var_16)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.deduplicate(var_20)
    assert var_23 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    str_0 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_5)
    assert var_14 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_6)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_8)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(bytes_7)
    assert var_20 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.deduplicate(bytes_9)
    assert var_21 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_22 = module_0.devoice(bytes_9)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_24 = module_0.ends_dentals(list_0)
    assert var_24 is False
    module_0.ends_with_vowel(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_16 = module_0.starts_with_vowel(tuple_0)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(tuple_0)
    assert var_17 is False
    str_2 = "ORrJ2:"
    var_18 = module_0.starts_with_vowel(str_2)
    assert var_18 is False
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    str_4 = "1X,mBK\\"
    var_25 = module_0.devoice(str_4)
    var_26 = module_0.ends_dentals(str_4)
    assert var_26 is False
    var_27 = module_0.starts_with_vowel(var_25)
    assert var_27 is False
    module_0.deduplicate(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    str_1 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_0)
    assert var_10 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_2)
    module_0.ends_with_vowel(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_8 = module_0.ends_with_vowel(list_0)
    assert var_8 is False
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.devoice(var_13)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.deduplicate(var_20)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    dict_0 = {}
    var_27 = module_0.devoice(dict_0)
    module_0.devoice(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    str_2 = "\\Z8@Jg"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_3)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    module_0.deduplicate(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    str_0 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_0)
    assert var_9 == "%OJ<'vPCn@4"
    module_0.devoice(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(list_0)
    assert var_2 is False
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_3)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(list_0)
    assert var_8 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_9 = module_0.starts_with_vowel(tuple_0)
    assert var_9 is False
    module_0.ends_dentals(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_1)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.devoice(var_20)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    var_26 = module_0.ends_dentals(bytes_6)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(bytes_8)
    assert var_32 is False
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_33 = module_0.deduplicate(bytes_10)
    assert var_33 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.devoice(bytes_10)
    bytes_11 = b"=\xc4\xb3D\xea8"
    var_35 = module_0.ends_with_vowel(bytes_11)
    assert var_35 is False
    str_3 = "1X,mBK\\"
    var_36 = module_0.devoice(str_3)
    bytes_12 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_37 = module_0.devoice(bytes_12)
    var_38 = module_0.ends_with_vowel(var_37)
    assert var_38 is False
    bytes_13 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_39 = module_0.devoice(bytes_13)
    var_40 = module_0.starts_with_vowel(var_37)
    assert var_40 is False
    var_41 = module_0.starts_with_vowel(var_36)
    assert var_41 is False
    module_0.ends_dentals(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.deduplicate(var_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    str_1 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_2)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_1)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    module_0.devoice(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_4 = module_0.ends_dentals(list_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_1)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(list_0)
    assert var_6 is False
    module_0.devoice(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    dict_0 = {}
    var_8 = module_0.devoice(dict_0)
    module_0.devoice(var_5)


def test_case_1236():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1237():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_6)
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_17 = module_0.ends_with_vowel(list_0)
    assert var_17 is False
    str_1 = "1X,mBK\\"
    var_18 = module_0.devoice(str_1)
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_7)
    assert var_19 is False
    str_2 = "K3A!V\x0c#87"
    var_20 = module_0.starts_with_vowel(str_2)
    assert var_20 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    var_22 = module_0.ends_dentals(str_2)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_7)
    assert var_23 is False
    dict_1 = {}
    var_24 = module_0.deduplicate(dict_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    module_0.devoice(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(tuple_0)
    assert var_3 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_4 = module_0.starts_with_vowel(tuple_1)
    assert var_4 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_0)
    assert var_9 is False
    dict_0 = {}
    var_10 = module_0.deduplicate(dict_0)
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_1)
    str_3 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    str_4 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_4)
    assert var_13 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_5)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_4)
    assert var_15 is False
    module_0.starts_with_vowel(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    list_0 = []
    module_0.starts_with_vowel(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bool_0 = False
    str_0 = "-$&< rbwvx0r0|"
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_2)
    str_2 = "ORrJ2:"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    tuple_0 = ()
    module_0.ends_dentals(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_5 = module_0.devoice(tuple_0)
    var_6 = module_0.ends_dentals(var_5)
    assert var_6 is False
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_4)
    assert var_6 is False
    module_0.ends_dentals(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    str_0 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_2)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(var_10)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(bytes_5)
    assert var_19 is False
    module_0.ends_with_vowel(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bool_0 = True
    bytes_0 = b"b\x05\x16\x97\x99\xd7.V\x9a8\xd0\x91\xc2?\x85"
    dict_0 = {bool_0: bytes_0, bytes_0: bool_0}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_2 = "1X,mBK\\"
    var_6 = module_0.devoice(str_2)
    assert var_6 == "1X,mBK\\"
    var_7 = module_0.ends_dentals(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_1)
    assert var_9 is False
    str_3 = "1X,mBK\\"
    var_10 = module_0.devoice(str_3)
    assert var_10 == "1X,mBK\\"
    var_11 = module_0.devoice(bytes_1)
    assert var_11 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_5)
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    none_type_0 = None
    module_0.devoice(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_8 = module_0.ends_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "#iW\rr^3:"
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    str_1 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    str_2 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    str_3 = "\\Z8@Jg"
    var_13 = module_0.ends_with_vowel(str_3)
    assert var_13 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_14 = module_0.starts_with_vowel(tuple_1)
    assert var_14 is False
    module_0.starts_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_2)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    dict_0 = {}
    var_10 = module_0.deduplicate(dict_0)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_4)
    set_0 = set()
    tuple_0 = (set_0,)
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    str_3 = "1X,mBK\\"
    var_15 = module_0.devoice(str_3)
    var_16 = module_0.ends_dentals(str_3)
    assert var_16 is False
    var_17 = module_0.ends_dentals(str_3)
    assert var_17 is False
    str_4 = "%OJ<'vPCn@4"
    var_18 = module_0.deduplicate(str_4)
    bytes_5 = b"dV\xd8n_n\xe0\x87K"
    var_19 = module_0.ends_dentals(bytes_5)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_8)
    var_25 = module_0.ends_dentals(bytes_7)
    assert var_25 is False
    bool_0 = True
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_1)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(tuple_1)
    assert var_4 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    int_0 = 1176
    bool_1 = False
    tuple_2 = (bool_1,)
    tuple_3 = (int_0, tuple_2)
    var_7 = module_0.ends_with_vowel(tuple_3)
    assert var_7 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    module_0.devoice(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_6)
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_2)
    assert var_7 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    list_0 = [bytes_2, bytes_2]
    var_9 = module_0.devoice(list_0)
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_3)
    assert var_13 is False
    str_5 = "#iW\rr^3:"
    var_14 = module_0.ends_dentals(str_5)
    assert var_14 is False
    module_0.devoice(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    int_0 = 15
    module_0.ends_dentals(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_1)
    assert var_5 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    dict_0 = {}
    var_8 = module_0.devoice(dict_0)
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_1 = (str_2, bool_0, dict_1)
    var_9 = module_0.devoice(tuple_1)
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    str_3 = "#iW\rr^3:"
    var_11 = module_0.ends_dentals(str_3)
    assert var_11 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    module_0.ends_dentals(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    str_1 = "\\Z8@Jg"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_5)
    assert var_12 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_6)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_with_vowel(bytes_6)
    assert var_14 is False
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_3)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_9)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    var_23 = module_0.ends_dentals(var_21)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_0)
    assert var_25 is False
    module_0.ends_dentals(var_25)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    str_0 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_0)
    assert var_15 is False
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_16)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.devoice(var_22)
    module_0.ends_with_vowel(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    str_3 = "1X,mBK\\"
    var_9 = module_0.devoice(str_3)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_9)
    assert var_14 is False
    str_4 = "K3A!V\x0c#87"
    var_15 = module_0.starts_with_vowel(str_4)
    assert var_15 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_2)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    str_3 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_3)
    assert var_4 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_1)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_0)
    assert var_9 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_10 = module_0.ends_with_vowel(tuple_1)
    assert var_10 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_0 = [set_0, str_4, str_4]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(list_0)
    assert var_13 is False
    str_5 = "1X,mBK\\"
    var_14 = module_0.devoice(str_5)
    bytes_2 = b"dV\xd8n_n\xe0\x87K"
    var_15 = module_0.ends_dentals(bytes_2)
    assert var_15 is False
    dict_0 = {}
    var_16 = module_0.devoice(dict_0)
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    module_0.ends_with_vowel(var_2)


def test_case_1267():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_5 = module_0.devoice(tuple_0)
    var_6 = module_0.ends_dentals(var_5)
    assert var_6 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(list_0)
    assert var_9 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.ends_dentals(bytes_7)
    assert var_25 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_9)
    assert var_26 is False
    str_3 = "1X,mBK\\"
    var_27 = module_0.devoice(str_3)
    var_28 = module_0.ends_dentals(str_3)
    assert var_28 is False
    var_29 = module_0.devoice(var_27)
    module_0.ends_dentals(var_25)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_5)
    str_0 = "%OJ<'vPCn@4"
    var_12 = module_0.deduplicate(str_0)
    assert var_12 == "%OJ<'vPCn@4"
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_6)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_1)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_1 = [set_0, str_2, str_2]
    var_18 = module_0.ends_dentals(list_1)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(list_1)
    assert var_20 is False
    set_1 = set()
    tuple_0 = (set_1,)
    var_21 = module_0.ends_with_vowel(tuple_0)
    assert var_21 is False
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = -15
    module_0.ends_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.ends_dentals(var_5)
    assert var_6 is False
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    var_10 = module_0.deduplicate(str_0)
    assert var_10 == "K3A!V\x0c#87"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    set_1 = set()
    tuple_1 = (set_1,)
    var_22 = module_0.ends_with_vowel(tuple_1)
    assert var_22 is False
    str_3 = "`<)4H\rS\x0c"
    var_23 = module_0.ends_dentals(str_3)
    assert var_23 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_24 = module_0.ends_with_vowel(bytes_7)
    assert var_24 is False
    module_0.deduplicate(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    complex_0 = -2919.904 - 2813.45j
    module_0.deduplicate(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_4 = module_0.starts_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(tuple_0)
    assert var_5 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    assert var_7 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_0)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.ends_with_vowel(bytes_2)
    assert var_15 is False
    bool_2 = True
    tuple_1 = (bool_2, bool_2)
    list_1 = [tuple_1]
    var_16 = module_0.ends_with_vowel(list_1)
    assert var_16 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(bytes_4)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    tuple_2 = ()
    complex_0 = 3006.839 + 5889.8j
    dict_0 = {tuple_2: complex_0, bytes_4: tuple_1, bool_0: str_2, var_0: var_9}
    module_0.devoice(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_9)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_4)
    assert var_13 is False
    str_1 = "1X,mBK\\"
    var_14 = module_0.devoice(str_1)
    var_15 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    str_2 = "`<)4H\rS\x0c"
    var_20 = module_0.ends_dentals(str_2)
    assert var_20 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_21 = module_0.ends_with_vowel(bytes_7)
    assert var_21 is False
    str_3 = "1X,mBK\\"
    var_22 = module_0.devoice(str_3)
    var_23 = module_0.ends_dentals(str_3)
    assert var_23 is False
    var_24 = module_0.devoice(var_22)
    var_25 = module_0.devoice(var_22)
    bytes_8 = b"dV\xd8n_n\xe0\x87K"
    var_26 = module_0.ends_dentals(bytes_8)
    assert var_26 is False
    str_4 = "1X,mBK\\"
    var_27 = module_0.devoice(str_4)
    var_28 = module_0.ends_dentals(str_4)
    assert var_28 is False
    bytes_9 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_29 = module_0.deduplicate(bytes_9)
    assert var_29 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.ends_dentals(bytes_9)
    assert var_31 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_32 = module_0.devoice(bytes_10)
    var_33 = module_0.ends_with_vowel(var_32)
    assert var_33 is False
    bytes_11 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_11)
    var_35 = module_0.ends_dentals(var_32)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    var_37 = module_0.deduplicate(bytes_11)
    assert var_37 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.deduplicate(var_13)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_dentals(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    str_1 = "ORrJ2:"
    var_25 = module_0.starts_with_vowel(str_1)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.deduplicate(bytes_8)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_32 = module_0.deduplicate(bytes_10)
    assert var_32 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_33 = module_0.devoice(bytes_10)
    var_34 = module_0.ends_dentals(bytes_10)
    assert var_34 is False
    bytes_11 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_35 = module_0.ends_dentals(bytes_11)
    assert var_35 is False
    list_1 = [bytes_11, bytes_11]
    var_36 = module_0.devoice(list_1)
    module_0.starts_with_vowel(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    int_0 = -2554
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_0)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_0)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_0)
    assert var_9 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_0)
    assert var_14 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    module_0.starts_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_4)
    assert var_9 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_7)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_7)
    set_0 = set()
    tuple_0 = (set_0,)
    var_16 = module_0.ends_with_vowel(tuple_0)
    assert var_16 is False
    str_1 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_9)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.deduplicate(var_18)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_25 = module_0.ends_with_vowel(str_2)
    assert var_25 is False
    module_0.deduplicate(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    int_0 = 2352
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_3 = module_0.ends_with_vowel(list_0)
    assert var_3 is False
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "%OJ<'vPCn@4"
    var_2 = module_0.deduplicate(str_0)
    assert var_2 == "%OJ<'vPCn@4"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    list_0 = [bytes_1, bytes_1]
    var_5 = module_0.devoice(list_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_1 = [tuple_0]
    var_12 = module_0.ends_with_vowel(list_1)
    assert var_12 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    int_0 = 1176
    bool_1 = False
    tuple_1 = (bool_1,)
    tuple_2 = (int_0, tuple_1)
    var_15 = module_0.ends_with_vowel(tuple_2)
    assert var_15 is False
    module_0.starts_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_0 = module_0.ends_with_vowel(tuple_1)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    set_0 = set()
    tuple_2 = (set_0,)
    var_1 = module_0.ends_with_vowel(tuple_2)
    assert var_1 is False
    float_0 = -1663.70075
    tuple_3 = (float_0,)
    var_2 = module_0.starts_with_vowel(tuple_3)
    assert var_2 is False
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    set_0 = set()
    tuple_1 = (set_0,)
    var_1 = module_0.ends_with_vowel(tuple_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    float_1 = -405.8
    module_0.ends_with_vowel(float_1)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    set_0 = set()
    tuple_1 = (set_0,)
    var_7 = module_0.ends_with_vowel(tuple_1)
    assert var_7 is False
    str_3 = "1X,mBK\\"
    var_8 = module_0.devoice(str_3)
    assert var_8 == "1X,mBK\\"
    var_9 = module_0.ends_dentals(str_3)
    assert var_9 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_1)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_4 = "\\Z8@Jg"
    var_11 = module_0.ends_with_vowel(str_4)
    assert var_11 is False
    str_5 = "1X,mBK\\"
    var_12 = module_0.devoice(str_5)
    assert var_12 == "1X,mBK\\"
    var_13 = module_0.ends_dentals(str_5)
    assert var_13 is False
    var_14 = module_0.devoice(str_4)
    assert var_14 == "\\Z8@Jg"
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_2)
    assert var_15 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_3)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_2 = (set_1,)
    var_17 = module_0.ends_with_vowel(tuple_2)
    assert var_17 is False
    var_18 = module_0.devoice(var_16)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(var_18)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_6 = 'UErxwv/"J/CaV&Z,q!'
    set_2 = {str_6, str_6, str_6}
    list_1 = [set_2, str_6, str_6]
    var_20 = module_0.ends_dentals(list_1)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_6)
    assert var_21 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_4)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_5)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_5)
    module_0.ends_dentals(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "(q]I"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.devoice(var_5)
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    bool_1 = True
    tuple_1 = (bool_1, bool_1)
    list_0 = [tuple_1]
    var_10 = module_0.ends_with_vowel(list_0)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.devoice(var_17)
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_1 = [set_0, str_3, str_3]
    var_19 = module_0.ends_dentals(list_1)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(str_3)
    assert var_20 is False
    str_4 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_4)
    assert var_21 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_5)
    assert var_22 is False
    var_23 = module_0.ends_dentals(str_4)
    assert var_23 is False
    str_6 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_6, str_6, str_6}
    list_2 = [set_1, str_6, str_6]
    var_24 = module_0.ends_dentals(list_2)
    assert var_24 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_16 = module_0.ends_dentals(bytes_6)
    assert var_16 is False
    str_1 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_18 = module_0.devoice(tuple_0)
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    var_20 = module_0.deduplicate(str_1)
    assert var_20 == "K3A!V\x0c#87"
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_21 = module_0.starts_with_vowel(tuple_1)
    assert var_21 is False
    str_3 = "1X,mBK\\"
    var_22 = module_0.devoice(str_3)
    var_23 = module_0.ends_dentals(str_3)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_22)
    assert var_24 is False
    module_0.devoice(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_18 = module_0.starts_with_vowel(tuple_0)
    assert var_18 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_19 = module_0.ends_dentals(list_0)
    assert var_19 is False
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.ends_dentals(bytes_7)
    assert var_20 is False
    str_1 = "1X,mBK\\"
    var_21 = module_0.devoice(str_1)
    var_22 = module_0.devoice(bytes_7)
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    var_10 = module_0.ends_dentals(str_2)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_9)
    assert var_11 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(var_15)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    str_3 = "K3A!V\x0c#87"
    var_22 = module_0.starts_with_vowel(str_3)
    assert var_22 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_4)
    assert var_23 is False
    var_24 = module_0.ends_dentals(str_3)
    assert var_24 is False
    str_5 = "K3A!V\x0c#87"
    var_25 = module_0.starts_with_vowel(str_5)
    assert var_25 is False
    str_6 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_6: bool_0, bool_0: str_6}
    tuple_1 = (str_6, bool_0, dict_0)
    var_26 = module_0.devoice(tuple_1)
    var_27 = module_0.ends_dentals(var_26)
    assert var_27 is False
    var_28 = module_0.deduplicate(str_5)
    assert var_28 == "K3A!V\x0c#87"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_6)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_7)
    var_32 = module_0.ends_dentals(var_29)
    assert var_32 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_34 = module_0.devoice(bytes_9)
    var_35 = module_0.ends_with_vowel(var_34)
    assert var_35 is False
    var_36 = module_0.ends_dentals(var_34)
    assert var_36 is False
    module_0.devoice(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    dict_0 = {}
    var_3 = module_0.deduplicate(dict_0)
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    assert var_7 == "1X,mBK\\"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(list_0)
    assert var_10 is False
    str_3 = "1X,mBK\\"
    var_11 = module_0.devoice(str_3)
    assert var_11 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_1)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(var_11)
    assert var_16 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_3)
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    module_0.ends_dentals(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    str_0 = "(q]I"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "ORrJ2:"
    var_13 = module_0.starts_with_vowel(str_1)
    assert var_13 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_6)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_dentals(var_18)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(bytes_7)
    assert var_21 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_22 = module_0.ends_with_vowel(bytes_9)
    assert var_22 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_23 = module_0.ends_with_vowel(list_0)
    assert var_23 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_2, str_2, str_2}
    list_1 = [set_1, str_2, str_2]
    var_24 = module_0.ends_dentals(list_1)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(str_2)
    assert var_25 is False
    module_0.starts_with_vowel(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_1 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    module_0.deduplicate(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    module_0.starts_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "%OJ<'vPCn@4"
    var_1 = module_0.deduplicate(str_1)
    assert var_1 == "%OJ<'vPCn@4"
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bool_0 = True
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.deduplicate(dict_0)
    dict_1 = {}
    var_2 = module_0.devoice(dict_1)
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_3 = module_0.ends_with_vowel(tuple_1)
    assert var_3 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    bytes_1 = b"^\xd5\xd00{J"
    var_8 = module_0.deduplicate(bytes_1)
    dict_2 = {var_8: var_8, bytes_1: var_8}
    bool_1 = False
    list_0 = [dict_2, var_8, bool_1, bytes_1]
    var_9 = module_0.devoice(list_0)
    str_2 = "ymWXCWpM"
    bool_2 = False
    dict_3 = {bool_2: bool_2, str_2: bool_2, bool_2: str_2}
    tuple_2 = (str_2, bool_2, dict_3)
    var_10 = module_0.devoice(tuple_2)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    str_3 = "1X,mBK\\"
    var_12 = module_0.devoice(str_3)
    var_13 = module_0.ends_dentals(str_3)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_12)
    assert var_14 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(bytes_2)
    assert var_20 is False
    module_0.ends_dentals(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    str_0 = "(q]I"
    var_11 = module_0.devoice(str_0)
    var_12 = module_0.devoice(var_11)
    var_13 = module_0.starts_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"^\xd5\xd00{J"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"^\xd5\xd00{J"
    dict_0 = {var_14: var_14, bytes_4: var_14}
    bool_0 = False
    list_0 = [dict_0, var_14, bool_0, bytes_4]
    var_15 = module_0.devoice(list_0)
    dict_1 = {}
    var_16 = module_0.devoice(dict_1)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.devoice(bytes_5)
    bytes_6 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    bool_1 = True
    tuple_0 = (bool_1, bool_1)
    list_1 = [tuple_0]
    var_20 = module_0.ends_with_vowel(list_1)
    assert var_20 is False
    module_0.ends_dentals(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"^\xd5\xd00{J"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"^\xd5\xd00{J"
    dict_0 = {var_6: var_6, bytes_2: var_6}
    bool_0 = False
    list_0 = [dict_0, var_6, bool_0, bytes_2]
    var_7 = module_0.devoice(list_0)
    dict_1 = {}
    var_8 = module_0.deduplicate(dict_1)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.devoice(bytes_5)
    str_0 = "ORrJ2:"
    var_14 = module_0.starts_with_vowel(str_0)
    assert var_14 is False
    module_0.devoice(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    bool_0 = False
    set_0 = {bool_0}
    var_0 = module_0.devoice(set_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_5)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_5)
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_13)
    assert var_18 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_19 = module_0.starts_with_vowel(tuple_1)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(tuple_1)
    assert var_20 is False
    bool_0 = True
    tuple_2 = (bool_0, bool_0)
    list_0 = [tuple_2]
    var_21 = module_0.ends_with_vowel(list_0)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_1)
    assert var_1 is False
    bool_0 = False
    set_0 = {bool_0}
    var_2 = module_0.devoice(set_0)
    var_3 = module_0.devoice(var_2)
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    complex_0 = -282.781674 - 830j
    module_0.ends_dentals(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bool_0 = True
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_3 = module_0.devoice(tuple_0)
    var_4 = module_0.ends_dentals(var_3)
    assert var_4 is False
    var_5 = module_0.deduplicate(str_1)
    assert var_5 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_2)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_5)
    assert var_7 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_3)
    assert var_8 is False
    str_1 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    str_3 = "%OJ<'vPCn@4"
    var_13 = module_0.deduplicate(str_3)
    assert var_13 == "%OJ<'vPCn@4"
    var_14 = module_0.ends_with_vowel(str_3)
    assert var_14 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_with_vowel(bytes_5)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_25)
    assert var_27 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_1 = [set_0, str_4, str_4]
    var_28 = module_0.ends_dentals(list_1)
    assert var_28 is False
    module_0.devoice(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_1 = module_0.ends_with_vowel(list_0)
    assert var_1 is False
    module_0.starts_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = ")sE\nhxARG\r;/4"
    var_1 = module_0.devoice(str_1)
    assert var_1 == ")sE\nhxARG\r;/4"
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_2 = module_0.devoice(tuple_0)
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_0)
    assert var_8 is False
    dict_1 = {}
    var_9 = module_0.devoice(dict_1)
    str_3 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_3)
    assert var_10 is False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bool_0 = False
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_3)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.ends_dentals(var_8)
    assert var_9 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_6)
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.ends_dentals(bytes_7)
    assert var_18 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_8)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_1 = (set_0,)
    var_20 = module_0.ends_with_vowel(tuple_1)
    assert var_20 is False
    var_21 = module_0.devoice(var_19)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_0 = [set_1, str_1, str_1]
    var_22 = module_0.ends_dentals(list_0)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(str_1)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(list_0)
    assert var_24 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.devoice(var_15)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    dict_0 = {}
    var_18 = module_0.devoice(dict_0)
    str_1 = "\\Z8@Jg"
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_20 = module_0.ends_with_vowel(bytes_6)
    assert var_20 is False
    str_2 = "1X,mBK\\"
    var_21 = module_0.devoice(str_2)
    var_22 = module_0.ends_dentals(str_2)
    assert var_22 is False
    var_23 = module_0.devoice(var_21)
    module_0.starts_with_vowel(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    str_2 = "ORrJ2:"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.deduplicate(bytes_7)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.devoice(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    complex_0 = -1425.596 - 2369.4669j
    module_0.ends_with_vowel(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.devoice(var_3)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_0)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_0)
    assert var_12 is False
    module_0.ends_with_vowel(var_11)


def test_case_1318():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1319():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_2)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.devoice(var_13)
    str_0 = "1X,mBK\\"
    var_20 = module_0.devoice(str_0)
    var_21 = module_0.ends_dentals(str_0)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(var_20)
    assert var_22 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_23 = module_0.ends_dentals(bytes_6)
    assert var_23 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_7)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_25 = module_0.ends_with_vowel(tuple_0)
    assert var_25 is False
    var_26 = module_0.devoice(var_24)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "#iW\rr^3:"
    var_27 = module_0.ends_dentals(str_1)
    assert var_27 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_8)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_9)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    var_33 = module_0.devoice(bytes_9)
    var_34 = module_0.deduplicate(var_28)
    assert var_34 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "`<)4H\rS\x0c"
    var_35 = module_0.ends_dentals(str_2)
    assert var_35 is False
    module_0.ends_dentals(var_31)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    module_0.starts_with_vowel(var_4)


def test_case_1321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1322():
    complex_0 = 1396.3 + 1220.28987j
    module_0.starts_with_vowel(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_6 = module_0.ends_with_vowel(tuple_1)
    assert var_6 is False
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    bytes_5 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.devoice(bytes_5)
    module_0.ends_with_vowel(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "ORrJ2:"
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.ends_dentals(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_6)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    str_1 = "#iW\rr^3:"
    var_17 = module_0.ends_dentals(str_1)
    assert var_17 is False
    str_2 = "`<)4H\rS\x0c"
    var_18 = module_0.ends_dentals(str_2)
    assert var_18 is False
    str_3 = "K3A!V\x0c#87"
    var_19 = module_0.starts_with_vowel(str_3)
    assert var_19 is False
    str_4 = "ymWXCWpM"
    bool_0 = False
    dict_1 = {bool_0: bool_0, str_4: bool_0, bool_0: str_4}
    tuple_0 = (str_4, bool_0, dict_1)
    var_20 = module_0.devoice(tuple_0)
    var_21 = module_0.ends_dentals(var_20)
    assert var_21 is False
    var_22 = module_0.deduplicate(str_3)
    assert var_22 == "K3A!V\x0c#87"
    module_0.devoice(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"^\xd5\xd00{J"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"^\xd5\xd00{J"
    dict_0 = {var_3: var_3, bytes_1: var_3}
    bool_0 = False
    list_0 = [dict_0, var_3, bool_0, bytes_1]
    var_4 = module_0.devoice(list_0)
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_2 = "1X,mBK\\"
    var_7 = module_0.devoice(str_2)
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    str_3 = "`<)4H\rS\x0c"
    var_10 = module_0.ends_dentals(str_3)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    none_type_0 = None
    module_0.deduplicate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_2)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    dict_0 = {}
    var_9 = module_0.devoice(dict_0)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_10 = module_0.starts_with_vowel(tuple_0)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    str_0 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    var_14 = module_0.ends_dentals(str_1)
    assert var_14 is False
    var_15 = module_0.devoice(str_0)
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_17 = module_0.starts_with_vowel(str_3)
    assert var_17 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_3)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(str_3)
    assert var_20 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.devoice(var_12)
    str_1 = ")sE\nhxARG\r;/4"
    var_14 = module_0.devoice(str_1)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.starts_with_vowel(var_15)
    assert var_16 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_17 = module_0.ends_dentals(list_0)
    assert var_17 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_7)
    var_25 = module_0.deduplicate(var_19)
    assert var_25 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "%OJ<'vPCn@4"
    var_26 = module_0.deduplicate(str_3)
    assert var_26 == "%OJ<'vPCn@4"
    var_27 = module_0.ends_with_vowel(str_3)
    assert var_27 is False
    module_0.ends_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_2)
    assert var_4 is False
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_1)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    assert var_7 == "1X,mBK\\"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_2)
    assert var_9 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_4)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    assert var_13 == "1X,mBK\\"
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    str_4 = "`<)4H\rS\x0c"
    var_16 = module_0.ends_dentals(str_4)
    assert var_16 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_5)
    assert var_17 is False
    str_5 = "1X,mBK\\"
    var_18 = module_0.devoice(str_5)
    assert var_18 == "1X,mBK\\"
    var_19 = module_0.ends_dentals(str_5)
    assert var_19 is False
    var_20 = module_0.devoice(var_18)
    assert var_20 == "1X,mBK\\"
    var_21 = module_0.devoice(var_18)
    assert var_21 == "1X,mBK\\"
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_22 = module_0.ends_dentals(bytes_6)
    assert var_22 is False
    str_6 = "\\Z8@Jg"
    var_23 = module_0.ends_with_vowel(str_6)
    assert var_23 is False
    str_7 = "1X,mBK\\"
    var_24 = module_0.devoice(str_7)
    assert var_24 == "1X,mBK\\"
    var_25 = module_0.ends_dentals(str_7)
    assert var_25 is False
    var_26 = module_0.devoice(str_6)
    assert var_26 == "\\Z8@Jg"
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_7)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_8)
    var_30 = module_0.starts_with_vowel(var_27)
    assert var_30 is False
    var_31 = module_0.ends_with_vowel(var_29)
    assert var_31 is False
    var_32 = module_0.deduplicate(bytes_7)
    assert var_32 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    set_0 = set()
    tuple_0 = (set_0,)
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_0 = [set_1, str_1, str_1]
    var_2 = module_0.ends_dentals(list_0)
    assert var_2 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    str_2 = "#iW\rr^3:"
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    module_0.starts_with_vowel(set_1)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    set_1 = {bool_0}
    var_1 = module_0.devoice(set_1)
    var_2 = module_0.devoice(var_1)
    str_1 = "%OJ<'vPCn@4"
    var_3 = module_0.deduplicate(str_1)
    assert var_3 == "%OJ<'vPCn@4"
    str_2 = "K3A!V\x0c#87"
    var_4 = module_0.starts_with_vowel(str_2)
    assert var_4 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_3)
    assert var_5 is False
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    str_4 = "#iW\rr^3:"
    var_7 = module_0.ends_dentals(str_4)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_4)
    assert var_8 is False
    str_5 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_5)
    assert var_9 is False
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_11 = module_0.ends_dentals(list_0)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(list_0)
    assert var_13 is False
    module_0.deduplicate(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bool_0 = False
    set_0 = {bool_0}
    var_4 = module_0.devoice(set_0)
    var_5 = module_0.devoice(var_4)
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_6)
    assert var_11 is False
    bool_1 = False
    bool_2 = True
    list_0 = [bool_1, bool_1, bool_2, bool_1]
    var_12 = module_0.ends_with_vowel(list_0)
    assert var_12 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_13 = module_0.ends_dentals(list_1)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_1)
    assert var_14 is False
    str_2 = "%OJ<'vPCn@4"
    var_15 = module_0.deduplicate(str_2)
    assert var_15 == "%OJ<'vPCn@4"
    module_0.devoice(var_8)


def test_case_1336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "(q]I"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_1 = module_0.ends_dentals(list_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_6 = module_0.ends_dentals(list_1)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_9 = module_0.ends_with_vowel(str_2)
    assert var_9 is False
    str_3 = "%OJ<'vPCn@4"
    var_10 = module_0.deduplicate(str_3)
    assert var_10 == "%OJ<'vPCn@4"
    var_11 = module_0.ends_with_vowel(str_3)
    assert var_11 is False
    str_4 = "1X,mBK\\"
    var_12 = module_0.devoice(str_4)
    str_5 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_5)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_5)
    assert var_16 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    module_0.ends_dentals(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    str_0 = "1X,mBK\\"
    var_9 = module_0.devoice(str_0)
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_9)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(bytes_3)
    assert var_16 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_5)
    assert var_17 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_with_vowel(bytes_6)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_6)
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_21 = module_0.devoice(list_0)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_9)
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_10)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_28)
    assert var_30 is False
    bytes_11 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_31 = module_0.ends_dentals(bytes_11)
    assert var_31 is False
    str_1 = "1X,mBK\\"
    var_32 = module_0.devoice(str_1)
    var_33 = module_0.devoice(bytes_11)
    module_0.devoice(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.deduplicate(var_0)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "(q]I"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    module_0.devoice(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "#iW\rr^3:"
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_0)
    assert var_7 is False
    str_2 = "1X,mBK\\"
    var_8 = module_0.devoice(str_2)
    assert var_8 == "1X,mBK\\"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    str_3 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    list_0 = [tuple_1]
    var_17 = module_0.ends_with_vowel(list_0)
    assert var_17 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "`<)4H\rS\x0c"
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.devoice(var_3)
    assert var_6 == "1X,mBK\\"
    str_2 = "\\Z8@Jg"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    module_0.deduplicate(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_0 = "`<)4H\rS\x0c"
    var_3 = module_0.ends_dentals(str_0)
    assert var_3 is False
    str_1 = "ORrJ2:"
    var_4 = module_0.starts_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_4)
    assert var_9 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_5)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_with_vowel(bytes_5)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_5)
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_13 = module_0.ends_with_vowel(list_0)
    assert var_13 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_6)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_dentals(bytes_6)
    assert var_16 is False
    module_0.starts_with_vowel(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    str_0 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_0)
    assert var_6 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "`<)4H\rS\x0c"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_0)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_0)
    assert var_9 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_10 = module_0.starts_with_vowel(tuple_0)
    assert var_10 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_1 = (set_0,)
    var_13 = module_0.ends_with_vowel(tuple_1)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_2 = "1X,mBK\\"
    var_15 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(str_3)
    assert var_19 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_5)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.deduplicate(var_20)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_4 = "ORrJ2:"
    var_27 = module_0.starts_with_vowel(str_4)
    assert var_27 is False
    float_1 = -1663.70075
    tuple_2 = (float_1,)
    var_28 = module_0.starts_with_vowel(tuple_2)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(tuple_2)
    assert var_29 is False
    str_5 = "1X,mBK\\"
    var_30 = module_0.devoice(str_5)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_7)
    var_32 = module_0.ends_with_vowel(var_31)
    assert var_32 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_33 = module_0.devoice(bytes_8)
    var_34 = module_0.starts_with_vowel(var_31)
    assert var_34 is False
    var_35 = module_0.starts_with_vowel(var_30)
    assert var_35 is False
    module_0.deduplicate(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "%OJ<'vPCn@4"
    var_1 = module_0.deduplicate(str_0)
    assert var_1 == "%OJ<'vPCn@4"
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_2 = module_0.ends_with_vowel(tuple_1)
    assert var_2 is False
    str_1 = "`<)4H\rS\x0c"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    var_7 = module_0.devoice(var_5)
    assert var_7 == "1X,mBK\\"
    var_8 = module_0.devoice(var_5)
    assert var_8 == "1X,mBK\\"
    str_3 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_4)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_3)
    assert var_11 is False
    str_5 = "1X,mBK\\"
    var_12 = module_0.devoice(str_5)
    assert var_12 == "1X,mBK\\"
    var_13 = module_0.ends_dentals(str_5)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_12)
    assert var_14 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_2)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_3)
    var_18 = module_0.starts_with_vowel(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_3)
    var_21 = module_0.devoice(var_15)
    bool_1 = True
    tuple_2 = (bool_1, bool_1)
    list_0 = [tuple_2]
    var_22 = module_0.ends_with_vowel(list_0)
    assert var_22 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_4)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_5)
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_6)
    var_29 = module_0.ends_with_vowel(var_28)
    assert var_29 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_30 = module_0.devoice(bytes_7)
    var_31 = module_0.starts_with_vowel(var_28)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(var_30)
    assert var_32 is False
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(bytes_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.deduplicate(var_5)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_dentals(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_16 = module_0.devoice(bytes_6)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_17 = module_0.deduplicate(bytes_7)
    assert var_17 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.starts_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(bytes_7)
    assert var_19 is False
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_20 = module_0.devoice(tuple_0)
    var_21 = module_0.ends_dentals(var_20)
    assert var_21 is False
    str_1 = "1X,mBK\\"
    var_22 = module_0.devoice(str_1)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_9)
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    bytes_10 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.deduplicate(bytes_10)
    assert var_27 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.devoice(bytes_10)
    module_0.ends_with_vowel(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    list_0 = []
    module_0.starts_with_vowel(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_5 = module_0.ends_with_vowel(list_0)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bool_2 = False
    set_0 = {bool_2}
    var_7 = module_0.devoice(set_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.deduplicate(var_7)
    module_0.ends_dentals(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    tuple_0 = ()
    var_2 = module_0.devoice(tuple_0)
    bool_0 = False
    set_0 = {bool_0}
    var_3 = module_0.devoice(set_0)
    var_4 = module_0.devoice(var_3)
    var_5 = module_0.deduplicate(var_3)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_1)
    assert var_12 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.devoice(var_23)
    str_0 = "K3A!V\x0c#87"
    var_25 = module_0.starts_with_vowel(str_0)
    assert var_25 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_26 = module_0.ends_with_vowel(str_1)
    assert var_26 is False
    var_27 = module_0.ends_dentals(str_0)
    assert var_27 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_28 = module_0.deduplicate(bytes_7)
    var_29 = module_0.starts_with_vowel(var_28)
    assert var_29 is False
    module_0.starts_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    module_0.devoice(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    str_1 = "`<)4H\rS\x0c"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    str_2 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_2)
    assert var_3 is False
    bool_0 = False
    set_1 = {bool_0}
    var_4 = module_0.devoice(set_1)
    var_5 = module_0.devoice(var_4)
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_3 = module_0.ends_with_vowel(list_0)
    assert var_3 is False
    bool_2 = False
    set_0 = {bool_2}
    var_4 = module_0.devoice(set_0)
    var_5 = module_0.devoice(var_4)
    var_6 = module_0.deduplicate(var_4)
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_7 = module_0.ends_dentals(bytes_1)
    assert var_7 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_8 = module_0.devoice(list_1)
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "#iW\rr^3:"
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_10 = module_0.ends_with_vowel(tuple_0)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(var_11)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_1 = (str_1, bool_0, dict_0)
    var_16 = module_0.devoice(tuple_1)
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    none_type_0 = None
    module_0.starts_with_vowel(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    str_3 = "K3A!V\x0c#87"
    var_10 = module_0.starts_with_vowel(str_3)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.devoice(var_11)
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    str_4 = "1X,mBK\\"
    var_19 = module_0.devoice(str_4)
    var_20 = module_0.ends_dentals(str_4)
    assert var_20 is False
    var_21 = module_0.devoice(var_19)
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_6)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(var_22)
    assert var_23 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_7)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_dentals(bytes_7)
    assert var_26 is False
    str_5 = "1X,mBK\\"
    var_27 = module_0.devoice(str_5)
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.deduplicate(bytes_8)
    assert var_28 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.ends_dentals(var_27)
    assert var_29 is False
    str_6 = "`<)4H\rS\x0c"
    var_30 = module_0.ends_dentals(str_6)
    assert var_30 is False
    module_0.ends_dentals(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(bytes_4)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.devoice(var_16)
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_3 = module_0.devoice(tuple_0)
    var_4 = module_0.ends_dentals(var_3)
    assert var_4 is False
    dict_1 = {}
    var_5 = module_0.devoice(dict_1)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    var_8 = module_0.devoice(bytes_2)
    str_2 = "(q]I"
    var_9 = module_0.devoice(str_2)
    var_10 = module_0.devoice(var_9)
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    list_0 = [bytes_3, bytes_3]
    var_13 = module_0.devoice(list_0)
    str_3 = "#iW\rr^3:"
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(str_3)
    assert var_15 is False
    module_0.ends_with_vowel(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_1)
    assert var_3 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.devoice(var_4)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.devoice(bytes_2)
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_4)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_with_vowel(bytes_4)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_4)
    str_2 = "K3A!V\x0c#87"
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_2)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(bytes_7)
    assert var_28 is False
    var_29 = module_0.ends_dentals(bytes_7)
    assert var_29 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_30 = module_0.ends_with_vowel(tuple_0)
    assert var_30 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    str_0 = "N"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    set_0 = set()
    tuple_0 = (set_0,)
    var_1 = module_0.ends_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_4 = module_0.ends_dentals(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.devoice(var_5)
    str_1 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    var_15 = module_0.devoice(str_1)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.ends_dentals(bytes_5)
    assert var_21 is False
    module_0.devoice(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == "1X,mBK\\"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(var_7)
    assert var_8 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_9 = module_0.ends_dentals(list_0)
    assert var_9 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    str_0 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_3)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_6)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_14 = module_0.starts_with_vowel(tuple_1)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(tuple_1)
    assert var_15 is False
    var_16 = module_0.ends_dentals(tuple_1)
    assert var_16 is False
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    list_0 = [bytes_1, bytes_1]
    var_4 = module_0.devoice(list_0)
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_5 = module_0.starts_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(tuple_0)
    assert var_6 is False
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    str_0 = "%OJ<'vPCn@4"
    var_8 = module_0.deduplicate(str_0)
    assert var_8 == "%OJ<'vPCn@4"
    var_9 = module_0.ends_with_vowel(str_0)
    assert var_9 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_1)
    assert var_11 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_3)
    assert var_14 is False
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_15 = module_0.ends_with_vowel(tuple_2)
    assert var_15 is False
    str_2 = "1X,mBK\\"
    var_16 = module_0.devoice(str_2)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.starts_with_vowel(var_16)
    assert var_21 is False
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.devoice(bytes_3)
    bool_0 = True
    module_0.starts_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    str_0 = "%OJ<'vPCn@4"
    var_7 = module_0.deduplicate(str_0)
    assert var_7 == "%OJ<'vPCn@4"
    var_8 = module_0.ends_with_vowel(str_0)
    assert var_8 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    str_1 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    str_2 = "1X,mBK\\"
    var_14 = module_0.devoice(str_2)
    var_15 = module_0.ends_dentals(str_2)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    var_17 = module_0.devoice(var_14)
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_18 = module_0.devoice(list_0)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_4)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    str_3 = "\\Z8@Jg"
    var_21 = module_0.ends_with_vowel(str_3)
    assert var_21 is False
    str_4 = "1X,mBK\\"
    var_22 = module_0.devoice(str_4)
    var_23 = module_0.ends_dentals(str_4)
    assert var_23 is False
    var_24 = module_0.devoice(str_3)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_25 = module_0.devoice(bytes_5)
    bool_1 = False
    dict_1 = {bytes_5: var_25, var_25: bool_1, bool_1: bytes_5}
    var_26 = module_0.starts_with_vowel(dict_1)
    assert var_26 is False
    str_5 = "\\Z8@Jg"
    var_27 = module_0.ends_with_vowel(str_5)
    assert var_27 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_28 = module_0.devoice(bytes_6)
    bytes_7 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_29 = module_0.deduplicate(bytes_7)
    assert var_29 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_30 = module_0.ends_dentals(var_29)
    assert var_30 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(var_7)
    assert var_12 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_5)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_18 = module_0.devoice(tuple_0)
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.ends_dentals(bytes_6)
    assert var_20 is False
    list_0 = [bytes_6, bytes_6]
    var_21 = module_0.devoice(list_0)
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.devoice(bytes_3)
    bool_0 = False
    dict_0 = {bytes_3: var_6, var_6: bool_0, bool_0: bytes_3}
    var_7 = module_0.starts_with_vowel(dict_0)
    assert var_7 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_4)
    assert var_8 is False
    list_0 = [bytes_4, bytes_4]
    var_9 = module_0.devoice(list_0)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_5)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.devoice(var_10)
    module_0.ends_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_3)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_3)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    module_0.starts_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bool_0 = False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.devoice(var_1)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(list_0)
    assert var_10 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bool_0 = False
    set_0 = {bool_0}
    module_0.starts_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(var_2)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_12 = module_0.deduplicate(bytes_5)
    assert var_12 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_13 = module_0.ends_dentals(var_12)
    assert var_13 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_6)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    bytes_7 = b"dV\xd8n_n\xe0\x87K"
    var_16 = module_0.ends_dentals(bytes_7)
    assert var_16 is False
    bool_0 = True
    module_0.starts_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    str_0 = "~&KnWE+1U"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_5)
    assert var_10 is False
    str_2 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(var_18)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_1)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_1 = [set_1, str_1, str_1]
    var_8 = module_0.ends_dentals(list_1)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(list_1)
    assert var_10 is False
    str_2 = "1X,mBK\\"
    var_11 = module_0.devoice(str_2)
    var_12 = module_0.ends_dentals(str_2)
    assert var_12 is False
    bool_0 = False
    bool_1 = True
    list_2 = [bool_0, bool_0, bool_1, bool_0]
    var_13 = module_0.ends_with_vowel(list_2)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.ends_dentals(var_14)
    assert var_17 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_4)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.devoice(bytes_4)
    str_3 = "ORrJ2:"
    var_20 = module_0.starts_with_vowel(str_3)
    assert var_20 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_21 = module_0.deduplicate(bytes_5)
    assert var_21 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.deduplicate(bytes_6)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.ends_dentals(var_22)
    assert var_23 is False
    tuple_0 = ()
    var_24 = module_0.devoice(tuple_0)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.deduplicate(bytes_7)
    assert var_25 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_28 = module_0.ends_with_vowel(str_4)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(str_4)
    assert var_29 is False
    module_0.ends_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(var_9)
    assert var_11 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.devoice(bytes_4)
    bool_0 = False
    dict_0 = {bytes_4: var_12, var_12: bool_0, bool_0: bytes_4}
    var_13 = module_0.starts_with_vowel(dict_0)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    str_1 = "(q]I"
    var_19 = module_0.devoice(str_1)
    var_20 = module_0.devoice(var_19)
    var_21 = module_0.starts_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.deduplicate(bytes_8)
    assert var_27 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(var_26)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    str_0 = "W0{S=g~k)"
    str_1 = "k s<wxuw0]S(C$"
    str_2 = "`<)4H\rS\x0c"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_with_vowel(bytes_2)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_4)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(bytes_3)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    module_0.ends_dentals(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    module_0.ends_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "#iW\rr^3:"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(list_0)
    assert var_9 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    str_3 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    var_18 = module_0.ends_dentals(var_16)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "ORrJ2:"
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_5 = module_0.ends_with_vowel(tuple_0)
    assert var_5 is False
    var_6 = module_0.devoice(var_4)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    set_1 = set()
    tuple_1 = (set_1,)
    var_10 = module_0.ends_with_vowel(tuple_1)
    assert var_10 is False
    module_0.ends_dentals(set_1)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"^\xd5\xd00{J"
    var_1 = module_0.deduplicate(bytes_0)
    dict_1 = {var_1: var_1, bytes_0: var_1}
    bool_0 = False
    list_0 = [dict_1, var_1, bool_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    str_0 = "K3A!V\x0c#87"
    var_3 = module_0.starts_with_vowel(str_0)
    assert var_3 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(str_0)
    assert var_5 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_1)
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    str_2 = "#iW\rr^3:"
    var_8 = module_0.ends_dentals(str_2)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_2)
    assert var_9 is False
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.ends_dentals(var_2)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_4)
    assert var_12 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_5)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_14 = module_0.ends_with_vowel(tuple_0)
    assert var_14 is False
    var_15 = module_0.devoice(var_13)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(var_15)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "%OJ<'vPCn@4"
    var_17 = module_0.deduplicate(str_1)
    assert var_17 == "%OJ<'vPCn@4"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_2, str_2, str_2}
    list_0 = [set_1, str_2, str_2]
    var_18 = module_0.ends_dentals(list_0)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(str_2)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(list_0)
    assert var_20 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_21 = module_0.devoice(list_1)
    str_3 = ")sE\nhxARG\r;/4"
    var_22 = module_0.devoice(str_3)
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(bytes_0)
    assert var_5 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.devoice(var_8)
    module_0.devoice(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    int_0 = -842
    module_0.ends_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_2 = module_0.ends_with_vowel(tuple_1)
    assert var_2 is False
    str_0 = "1X,mBK\\"
    var_3 = module_0.devoice(str_0)
    assert var_3 == "1X,mBK\\"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_3)
    assert var_5 is False
    module_0.ends_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_3)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_2)
    assert var_10 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_11 = module_0.devoice(tuple_0)
    var_12 = module_0.ends_dentals(var_11)
    assert var_12 is False
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_0)
    assert var_7 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_10 = module_0.ends_with_vowel(tuple_0)
    assert var_10 is False
    var_11 = module_0.devoice(var_9)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(var_11)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False
    bytes_6 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_6)
    assert var_18 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.ends_with_vowel(bytes_7)
    assert var_20 is False
    var_21 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_23)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_23)
    assert var_26 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_0)
    assert var_3 is False
    list_0 = [bytes_0, bytes_0]
    var_4 = module_0.devoice(list_0)
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "(q]I"
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.starts_with_vowel(bytes_1)
    assert var_7 is False
    str_1 = "ORrJ2:"
    var_8 = module_0.starts_with_vowel(str_1)
    assert var_8 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    bool_0 = False
    set_0 = {bool_0}
    var_12 = module_0.devoice(set_0)
    var_13 = module_0.devoice(var_12)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.deduplicate(bytes_4)
    assert var_19 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "%OJ<'vPCn@4"
    var_20 = module_0.deduplicate(str_2)
    assert var_20 == "%OJ<'vPCn@4"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    var_26 = module_0.deduplicate(var_23)
    assert var_26 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    tuple_0 = ()
    var_27 = module_0.devoice(tuple_0)
    str_3 = "#iW\rr^3:"
    var_28 = module_0.ends_dentals(str_3)
    assert var_28 is False
    module_0.ends_dentals(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_0 = module_0.ends_with_vowel(tuple_1)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    float_0 = -1663.70075
    tuple_2 = (float_0,)
    var_4 = module_0.starts_with_vowel(tuple_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_1)
    assert var_8 is False
    str_1 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    var_11 = module_0.ends_dentals(str_1)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_1)
    assert var_12 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_2)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.ends_dentals(var_13)
    assert var_14 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_3)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.ends_dentals(bytes_3)
    assert var_17 is False
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_0)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_4)
    assert var_6 is False
    str_1 = "~&KnWE+1U"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    str_2 = ")sE\nhxARG\r;/4"
    var_8 = module_0.devoice(str_2)
    assert var_8 == ")sE\nhxARG\r;/4"
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_9 = module_0.ends_with_vowel(bytes_1)
    assert var_9 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    var_12 = module_0.devoice(bytes_2)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_3)
    assert var_15 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_4)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_4)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_22 = module_0.ends_with_vowel(str_4)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(str_4)
    assert var_23 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_6)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_dentals(var_25)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_25)
    assert var_28 is False
    set_0 = set()
    tuple_1 = (set_0,)
    var_29 = module_0.ends_with_vowel(tuple_1)
    assert var_29 is False
    module_0.devoice(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(var_5)
    assert var_7 is False
    str_1 = "#iW\rr^3:"
    var_8 = module_0.ends_dentals(str_1)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_16 = module_0.ends_with_vowel(tuple_0)
    assert var_16 is False
    var_17 = module_0.devoice(var_15)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(var_17)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    var_23 = module_0.ends_dentals(bytes_6)
    assert var_23 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_25 = module_0.ends_dentals(var_24)
    assert var_25 is False
    str_2 = "ORrJ2:"
    var_26 = module_0.starts_with_vowel(str_2)
    assert var_26 is False
    module_0.ends_dentals(var_23)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(bytes_0)
    assert var_6 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.devoice(bytes_2)
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    bool_0 = False
    set_0 = {bool_0}
    var_11 = module_0.devoice(set_0)
    var_12 = module_0.devoice(var_11)
    module_0.starts_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    tuple_0 = ()
    var_5 = module_0.devoice(tuple_0)
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.devoice(bytes_2)
    str_0 = "(q]I"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    str_1 = "1X,mBK\\"
    var_10 = module_0.devoice(str_1)
    bool_0 = True
    module_0.ends_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "K3A!V\x0c#87"
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(str_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_0 = [set_0, str_3, str_3]
    var_8 = module_0.ends_dentals(list_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_3)
    assert var_9 is False
    module_0.ends_dentals(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    float_0 = 648.841522
    module_0.deduplicate(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    tuple_0 = ()
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "#iW\rr^3:"
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_1)
    assert var_3 is False
    str_2 = "`<)4H\rS\x0c"
    var_4 = module_0.ends_dentals(str_2)
    assert var_4 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_3 = "1X,mBK\\"
    var_6 = module_0.devoice(str_3)
    var_7 = module_0.ends_dentals(str_3)
    assert var_7 is False
    var_8 = module_0.devoice(var_6)
    var_9 = module_0.devoice(var_6)
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bool_0 = False
    module_0.ends_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_4)
    assert var_13 is False
    str_1 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_1)
    assert var_16 is False
    var_17 = module_0.ends_dentals(bytes_4)
    assert var_17 is False
    str_3 = "1X,mBK\\"
    var_18 = module_0.devoice(str_3)
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_19 = module_0.ends_dentals(bytes_5)
    assert var_19 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_21 = module_0.ends_with_vowel(tuple_0)
    assert var_21 is False
    var_22 = module_0.devoice(var_20)
    assert var_22 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(var_22)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_24 = module_0.starts_with_vowel(tuple_1)
    assert var_24 is False
    float_1 = 3821.0
    list_0 = [float_1, float_1, float_1]
    var_25 = module_0.devoice(list_0)
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_26 = module_0.deduplicate(bytes_7)
    assert var_26 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_27 = module_0.devoice(bytes_7)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    module_0.deduplicate(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_0)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(tuple_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_2)
    assert var_14 is False
    module_0.ends_dentals(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_6 = module_0.ends_with_vowel(tuple_1)
    assert var_6 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_1 = [set_0, str_0, str_0]
    var_7 = module_0.ends_dentals(list_1)
    assert var_7 is False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    str_2 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    str_3 = "1X,mBK\\"
    var_5 = module_0.devoice(str_3)
    var_6 = module_0.ends_dentals(str_3)
    assert var_6 is False
    var_7 = module_0.devoice(str_2)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_0)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_2)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.devoice(bytes_3)
    str_4 = "%OJ<'vPCn@4"
    var_16 = module_0.deduplicate(str_4)
    assert var_16 == "%OJ<'vPCn@4"
    var_17 = module_0.ends_with_vowel(str_4)
    assert var_17 is False
    str_5 = "(q]I"
    var_18 = module_0.devoice(str_5)
    var_19 = module_0.devoice(var_18)
    var_20 = module_0.starts_with_vowel(var_19)
    assert var_20 is False
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_0 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.ends_dentals(var_15)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_19)
    assert var_21 is False
    var_22 = module_0.starts_with_vowel(bytes_6)
    assert var_22 is False
    module_0.starts_with_vowel(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    str_0 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "%OJ<'vPCn@4"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_1)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_5)
    var_17 = module_0.devoice(var_16)
    str_2 = "(q]I"
    var_18 = module_0.devoice(str_2)
    var_19 = module_0.devoice(var_18)
    var_20 = module_0.starts_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.starts_with_vowel(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_26 = module_0.ends_dentals(bytes_8)
    assert var_26 is False
    bytes_9 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(bytes_9)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_28 = module_0.ends_with_vowel(tuple_0)
    assert var_28 is False
    var_29 = module_0.devoice(var_27)
    assert var_29 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_3 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_3: bool_0, bool_0: str_3}
    tuple_1 = (str_3, bool_0, dict_0)
    var_30 = module_0.devoice(tuple_1)
    var_31 = module_0.ends_dentals(var_30)
    assert var_31 is False
    module_0.deduplicate(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_5 = module_0.devoice(list_0)
    str_0 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.devoice(var_8)
    var_11 = module_0.devoice(var_8)
    str_2 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.devoice(str_2)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_4)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_2)
    assert var_17 is False
    dict_1 = {}
    var_18 = module_0.deduplicate(dict_1)
    int_0 = 1176
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (int_0, tuple_0)
    var_19 = module_0.ends_with_vowel(tuple_1)
    assert var_19 is False
    str_5 = "(q]I"
    var_20 = module_0.devoice(str_5)
    var_21 = module_0.devoice(var_20)
    var_22 = module_0.starts_with_vowel(var_21)
    assert var_22 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_23 = module_0.ends_dentals(bytes_3)
    assert var_23 is False
    list_1 = [bytes_3, bytes_3]
    var_24 = module_0.devoice(list_1)
    var_25 = module_0.deduplicate(str_5)
    module_0.starts_with_vowel(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_9)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(bytes_4)
    assert var_14 is False
    module_0.devoice(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    str_0 = "ORrJ2:"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.ends_dentals(var_2)
    assert var_3 is False
    str_1 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    assert var_5 == "1X,mBK\\"
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    var_7 = module_0.devoice(str_1)
    assert var_7 == "\\Z8@Jg"
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_4)
    assert var_10 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    module_0.ends_with_vowel(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    assert var_6 == "1X,mBK\\"
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_6)
    assert var_8 is False
    int_0 = -1036
    module_0.deduplicate(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_4)
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_11)
    assert var_16 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_17 = module_0.starts_with_vowel(tuple_0)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(tuple_0)
    assert var_18 is False
    str_0 = "%OJ<'vPCn@4"
    var_19 = module_0.deduplicate(str_0)
    assert var_19 == "%OJ<'vPCn@4"
    var_20 = module_0.ends_with_vowel(str_0)
    assert var_20 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_7)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_23 = module_0.deduplicate(bytes_8)
    assert var_23 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_1 = "`<)4H\rS\x0c"
    var_24 = module_0.ends_dentals(str_1)
    assert var_24 is False
    module_0.ends_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_4)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.ends_dentals(var_12)
    assert var_15 is False
    bytes_7 = b"dV\xd8n_n\xe0\x87K"
    var_16 = module_0.ends_dentals(bytes_7)
    assert var_16 is False
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    var_2 = module_0.devoice(list_0)
    str_0 = "%OJ<'vPCn@4"
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "%OJ<'vPCn@4"
    var_4 = module_0.ends_with_vowel(str_0)
    assert var_4 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_5 = module_0.ends_with_vowel(str_1)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_8 = module_0.ends_with_vowel(bytes_2)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_1)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_3)
    assert var_14 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_1 = [set_0, str_2, str_2]
    var_15 = module_0.ends_dentals(list_1)
    assert var_15 is False
    dict_1 = {}
    var_16 = module_0.devoice(dict_1)
    str_3 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(var_22)
    assert var_24 is False
    module_0.starts_with_vowel(var_21)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    bool_0 = False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_6 = module_0.starts_with_vowel(tuple_0)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    str_0 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_0)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_6)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_8)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    var_27 = module_0.ends_dentals(bytes_8)
    assert var_27 is False
    str_1 = "ORrJ2:"
    var_28 = module_0.starts_with_vowel(str_1)
    assert var_28 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_29 = module_0.devoice(bytes_9)
    var_30 = module_0.ends_with_vowel(var_29)
    assert var_30 is False
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_31 = module_0.devoice(bytes_10)
    var_32 = module_0.starts_with_vowel(var_29)
    assert var_32 is False
    var_33 = module_0.ends_with_vowel(var_31)
    assert var_33 is False
    module_0.devoice(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_4)
    assert var_10 is False
    list_1 = [bytes_4, bytes_4]
    var_11 = module_0.devoice(list_1)
    str_0 = ")sE\nhxARG\r;/4"
    var_12 = module_0.devoice(str_0)
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.ends_dentals(var_13)
    assert var_15 is False
    str_2 = "#iW\rr^3:"
    var_16 = module_0.ends_dentals(str_2)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    module_0.devoice(var_17)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    str_1 = "1X,mBK\\"
    var_7 = module_0.devoice(str_1)
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_8 = module_0.ends_with_vowel(tuple_1)
    assert var_8 is False
    module_0.devoice(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bytes_0 = b"dV\xd8n_n\xe0\x87K"
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.devoice(bytes_3)
    str_3 = "\\Z8@Jg"
    var_14 = module_0.ends_with_vowel(str_3)
    assert var_14 is False
    var_15 = module_0.devoice(str_3)
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    str_4 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_21 = module_0.ends_with_vowel(str_4)
    assert var_21 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_22 = module_0.ends_with_vowel(list_0)
    assert var_22 is False
    module_0.starts_with_vowel(var_18)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bool_0 = False
    set_0 = {bool_0}
    var_6 = module_0.devoice(set_0)
    var_7 = module_0.devoice(var_6)
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    var_10 = module_0.devoice(bytes_1)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_3)
    assert var_11 is False
    var_12 = module_0.starts_with_vowel(str_3)
    assert var_12 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_15)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_5)
    var_25 = module_0.devoice(var_19)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_6)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_7)
    var_29 = module_0.starts_with_vowel(var_26)
    assert var_29 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.deduplicate(bytes_8)
    assert var_30 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.ends_dentals(bytes_7)
    assert var_31 is False
    module_0.deduplicate(var_16)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = False
    set_0 = {bool_0}
    var_1 = module_0.devoice(set_0)
    var_2 = module_0.devoice(var_1)
    var_3 = module_0.deduplicate(var_1)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    var_8 = module_0.ends_dentals(var_5)
    assert var_8 is False
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_8)
    assert var_10 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_11 = module_0.ends_with_vowel(list_0)
    assert var_11 is False
    str_2 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    str_3 = "1X,mBK\\"
    var_13 = module_0.devoice(str_3)
    var_14 = module_0.ends_dentals(str_3)
    assert var_14 is False
    var_15 = module_0.devoice(str_2)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_4)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_2)
    assert var_17 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_0)
    assert var_8 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_10 = module_0.starts_with_vowel(bytes_2)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_4)
    assert var_14 is False
    str_2 = "`<)4H\rS\x0c"
    var_15 = module_0.ends_dentals(str_2)
    assert var_15 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_5)
    assert var_16 is False
    str_3 = "1X,mBK\\"
    var_17 = module_0.devoice(str_3)
    var_18 = module_0.ends_dentals(str_3)
    assert var_18 is False
    var_19 = module_0.devoice(var_17)
    var_20 = module_0.devoice(var_17)
    str_4 = "(q]I"
    var_21 = module_0.devoice(str_4)
    var_22 = module_0.devoice(var_21)
    var_23 = module_0.starts_with_vowel(var_22)
    assert var_23 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_6)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    var_27 = module_0.ends_dentals(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    str_5 = "\\Z8@Jg"
    var_29 = module_0.ends_with_vowel(str_5)
    assert var_29 is False
    str_6 = "1X,mBK\\"
    var_30 = module_0.devoice(str_6)
    var_31 = module_0.ends_dentals(str_6)
    assert var_31 is False
    var_32 = module_0.devoice(str_5)
    str_7 = "Kd tt@\x0c9{k:|lpK9"
    var_33 = module_0.ends_with_vowel(str_7)
    assert var_33 is False
    var_34 = module_0.ends_with_vowel(str_5)
    assert var_34 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_35 = module_0.ends_with_vowel(list_0)
    assert var_35 is False
    module_0.ends_dentals(var_14)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    list_0 = [bytes_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    dict_1 = {}
    var_4 = module_0.deduplicate(dict_1)
    str_0 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_2 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_2)
    var_6 = module_0.devoice(tuple_0)
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    var_8 = module_0.deduplicate(str_0)
    str_2 = "#iW\rr^3:"
    var_9 = module_0.ends_dentals(str_2)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_2)
    assert var_10 is False
    none_type_0 = None
    module_0.ends_dentals(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    module_0.ends_dentals(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.deduplicate(bytes_4)
    assert var_12 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_dentals(bytes_5)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_12)
    assert var_16 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.devoice(bytes_6)
    bool_0 = False
    dict_0 = {bytes_6: var_17, var_17: bool_0, bool_0: bytes_6}
    var_18 = module_0.starts_with_vowel(dict_0)
    assert var_18 is False
    module_0.deduplicate(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bool_0 = False
    module_0.starts_with_vowel(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_1)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.deduplicate(bytes_3)
    assert var_14 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_15 = module_0.starts_with_vowel(tuple_0)
    assert var_15 is False
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_16 = module_0.ends_with_vowel(str_0)
    assert var_16 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_21 = module_0.starts_with_vowel(tuple_1)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(tuple_1)
    assert var_22 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_8)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_dentals(var_24)
    assert var_26 is False
    module_0.ends_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_1 = module_0.ends_with_vowel(list_0)
    assert var_1 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    str_0 = "(q]I"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "(q]I"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "(q]I"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    complex_0 = 3503.6 + 2151.26j
    module_0.ends_with_vowel(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_5 = module_0.devoice(list_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = False
    bool_1 = True
    list_2 = [bool_0, bool_0, bool_1, bool_0]
    var_16 = module_0.ends_with_vowel(list_2)
    assert var_16 is False
    bytes_6 = b"dV\xd8n_n\xe0\x87K"
    var_17 = module_0.ends_dentals(bytes_6)
    assert var_17 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_7)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_8)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.devoice(var_23)
    module_0.deduplicate(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(bytes_3)
    assert var_14 is False
    module_0.ends_dentals(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    dict_0 = {}
    var_3 = module_0.deduplicate(dict_0)
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_4)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_4)
    str_0 = "#iW\rr^3:"
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_6)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_17 = module_0.ends_with_vowel(bytes_7)
    assert var_17 is False
    bytes_8 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_8)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_with_vowel(bytes_8)
    assert var_19 is False
    var_20 = module_0.devoice(bytes_8)
    set_0 = set()
    tuple_0 = (set_0,)
    var_21 = module_0.ends_with_vowel(tuple_0)
    assert var_21 is False
    str_1 = "(q]I"
    var_22 = module_0.devoice(str_1)
    var_23 = module_0.devoice(var_22)
    var_24 = module_0.starts_with_vowel(var_23)
    assert var_24 is False
    bytes_9 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_25 = module_0.ends_dentals(bytes_9)
    assert var_25 is False
    list_0 = [bytes_9, bytes_9]
    var_26 = module_0.devoice(list_0)
    var_27 = module_0.deduplicate(str_1)
    assert var_27 == "(q]I"
    str_2 = "#iW\rr^3:"
    var_28 = module_0.ends_dentals(str_2)
    assert var_28 is False
    str_3 = "1X,mBK\\"
    var_29 = module_0.devoice(str_3)
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_30 = module_0.deduplicate(bytes_10)
    assert var_30 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_31 = module_0.ends_dentals(var_29)
    assert var_31 is False
    str_4 = "K3A!V\x0c#87"
    var_32 = module_0.starts_with_vowel(str_4)
    assert var_32 is False
    str_5 = "Kd tt@\x0c9{k:|lpK9"
    var_33 = module_0.ends_with_vowel(str_5)
    assert var_33 is False
    var_34 = module_0.ends_dentals(str_4)
    assert var_34 is False
    module_0.ends_dentals(var_33)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    str_0 = "`<)4H\rS\x0c"
    var_5 = module_0.ends_dentals(str_0)
    assert var_5 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_6 = module_0.ends_dentals(list_0)
    assert var_6 is False
    str_2 = "\\Z8@Jg"
    var_7 = module_0.ends_with_vowel(str_2)
    assert var_7 is False
    str_3 = "1X,mBK\\"
    var_8 = module_0.devoice(str_3)
    var_9 = module_0.ends_dentals(str_3)
    assert var_9 is False
    var_10 = module_0.devoice(str_2)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_11 = module_0.ends_with_vowel(str_4)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(str_2)
    assert var_12 is False
    str_5 = "1X,mBK\\"
    var_13 = module_0.devoice(str_5)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_3)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.starts_with_vowel(var_13)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    str_6 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_6, str_6, str_6}
    list_1 = [set_1, str_6, str_6]
    var_23 = module_0.ends_dentals(list_1)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_6)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(list_1)
    assert var_25 is False
    str_7 = "1X,mBK\\"
    var_26 = module_0.devoice(str_7)
    var_27 = module_0.ends_dentals(str_7)
    assert var_27 is False
    var_28 = module_0.ends_dentals(str_7)
    assert var_28 is False
    str_8 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_8: bool_0, bool_0: str_8}
    tuple_0 = (str_8, bool_0, dict_0)
    var_29 = module_0.devoice(tuple_0)
    var_30 = module_0.ends_dentals(var_29)
    assert var_30 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    str_0 = "(q]I"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    var_12 = module_0.ends_dentals(bytes_3)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_9)
    assert var_13 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_14 = module_0.devoice(bytes_4)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.deduplicate(bytes_5)
    assert var_15 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.ends_dentals(var_15)
    assert var_16 is False
    str_1 = "ORrJ2:"
    var_17 = module_0.starts_with_vowel(str_1)
    assert var_17 is False
    bytes_6 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.deduplicate(bytes_7)
    assert var_19 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.ends_dentals(var_19)
    assert var_20 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_8)
    var_22 = module_0.ends_with_vowel(var_21)
    assert var_22 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_9)
    var_24 = module_0.ends_dentals(var_21)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(var_23)
    assert var_25 is False
    module_0.ends_dentals(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_3 = module_0.starts_with_vowel(bytes_1)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_3)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_3)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_4)
    assert var_8 is False
    var_9 = module_0.devoice(var_4)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"^\xd5\xd00{J"
    var_10 = module_0.deduplicate(bytes_4)
    assert var_10 == b"^\xd5\xd00{J"
    dict_0 = {var_10: var_10, bytes_4: var_10}
    bool_0 = False
    list_0 = [dict_0, var_10, bool_0, bytes_4]
    var_11 = module_0.devoice(list_0)
    var_12 = module_0.devoice(list_0)
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_1 = [set_0, str_0, str_0]
    var_13 = module_0.ends_dentals(list_1)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(str_0)
    assert var_14 is False
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.devoice(bytes_5)
    bytes_6 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.deduplicate(bytes_6)
    assert var_16 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_7)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_dentals(var_18)
    assert var_19 is False
    str_1 = "1X,mBK\\"
    var_20 = module_0.devoice(str_1)
    var_21 = module_0.ends_dentals(str_1)
    assert var_21 is False
    var_22 = module_0.ends_dentals(str_1)
    assert var_22 is False
    module_0.starts_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    object_0 = module_1.object()
    module_0.devoice(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.deduplicate(bytes_0)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_6 = module_0.ends_with_vowel(list_0)
    assert var_6 is False
    str_0 = "(q]I"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    list_1 = [bytes_2, bytes_2]
    var_11 = module_0.devoice(list_1)
    var_12 = module_0.deduplicate(str_0)
    assert var_12 == "(q]I"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_3)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_4)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    var_18 = module_0.deduplicate(var_15)
    assert var_18 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "1X,mBK\\"
    var_19 = module_0.devoice(str_1)
    var_20 = module_0.ends_dentals(str_1)
    assert var_20 is False
    var_21 = module_0.ends_dentals(str_1)
    assert var_21 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_2 = [set_0, str_2, str_2]
    var_22 = module_0.ends_dentals(list_2)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(str_2)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(list_2)
    assert var_24 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_25 = module_0.ends_with_vowel(bytes_5)
    assert var_25 is False
    str_3 = "1X,mBK\\"
    var_26 = module_0.devoice(str_3)
    var_27 = module_0.ends_dentals(str_3)
    assert var_27 is False
    var_28 = module_0.devoice(var_26)
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_4, str_4, str_4}
    list_3 = [set_1, str_4, str_4]
    var_29 = module_0.ends_dentals(list_3)
    assert var_29 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_30 = module_0.deduplicate(bytes_6)
    assert var_30 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_31 = module_0.starts_with_vowel(var_30)
    assert var_31 is False
    var_32 = module_0.ends_with_vowel(bytes_6)
    assert var_32 is False
    var_33 = module_0.deduplicate(str_4)
    assert var_33 == 'UErxwv/"J/CaV&Z,q!'
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_34 = module_0.ends_dentals(bytes_7)
    assert var_34 is False
    module_0.ends_dentals(var_25)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_6)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_7)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_8)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    var_21 = module_0.deduplicate(bytes_8)
    assert var_21 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_9 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_22 = module_0.devoice(bytes_9)
    bool_0 = False
    dict_0 = {bytes_9: var_22, var_22: bool_0, bool_0: bytes_9}
    var_23 = module_0.starts_with_vowel(dict_0)
    assert var_23 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_24 = module_0.ends_with_vowel(str_0)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(str_0)
    assert var_25 is False
    bytes_10 = b"dV\xd8n_n\xe0\x87K"
    var_26 = module_0.ends_dentals(bytes_10)
    assert var_26 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.devoice(var_11)
    tuple_0 = ()
    var_13 = module_0.devoice(tuple_0)
    str_0 = "`<)4H\rS\x0c"
    var_14 = module_0.ends_dentals(str_0)
    assert var_14 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.ends_dentals(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.deduplicate(bytes_6)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_25 = module_0.ends_with_vowel(list_0)
    assert var_25 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_with_vowel(var_27)
    assert var_28 is False
    var_29 = module_0.ends_dentals(var_27)
    assert var_29 is False
    var_30 = module_0.ends_dentals(var_27)
    assert var_30 is False
    var_31 = module_0.ends_dentals(var_26)
    assert var_31 is False
    str_1 = "(q]I"
    var_32 = module_0.devoice(str_1)
    var_33 = module_0.devoice(var_32)
    var_34 = module_0.starts_with_vowel(var_33)
    assert var_34 is False
    bytes_9 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_35 = module_0.ends_dentals(bytes_9)
    assert var_35 is False
    list_1 = [bytes_9, bytes_9]
    var_36 = module_0.devoice(list_1)
    var_37 = module_0.deduplicate(str_1)
    assert var_37 == "(q]I"
    bytes_10 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_38 = module_0.devoice(bytes_10)
    object_0 = module_1.object()
    module_0.ends_dentals(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.devoice(var_4)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    str_0 = "9#uHWMgkuu@KG7[3"
    var_15 = module_0.starts_with_vowel(str_0)
    assert var_15 is False
    str_1 = "1X,mBK\\"
    var_16 = module_0.devoice(str_1)
    var_17 = module_0.ends_dentals(str_1)
    assert var_17 is False
    var_18 = module_0.ends_dentals(str_1)
    assert var_18 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_7)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    module_0.ends_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_1 = module_0.ends_with_vowel(list_0)
    assert var_1 is False
    str_0 = "1X,mBK\\"
    var_2 = module_0.devoice(str_0)
    assert var_2 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    bool_1 = False
    set_0 = {bool_1}
    var_6 = module_0.devoice(set_0)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.deduplicate(var_6)
    dict_0 = {}
    var_9 = module_0.devoice(dict_0)
    str_1 = "(q]I"
    var_10 = module_0.devoice(str_1)
    var_11 = module_0.devoice(var_10)
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    bytes_2 = b"^\xd5\xd00{J"
    var_13 = module_0.deduplicate(bytes_2)
    dict_1 = {var_13: var_13, bytes_2: var_13}
    bool_2 = False
    list_1 = [dict_1, var_13, bool_2, bytes_2]
    var_14 = module_0.devoice(list_1)
    module_0.ends_dentals(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_3 = module_0.starts_with_vowel(tuple_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    str_0 = "K3A!V\x0c#87"
    var_5 = module_0.starts_with_vowel(str_0)
    assert var_5 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_6 = module_0.ends_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    str_2 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    module_0.ends_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    str_2 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_2)
    assert var_6 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.devoice(bytes_1)
    assert var_7 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bool_0 = False
    dict_0 = {bytes_1: var_7, var_7: bool_0, bool_0: bytes_1}
    var_8 = module_0.starts_with_vowel(dict_0)
    assert var_8 is False
    str_3 = "K3A!V\x0c#87"
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    str_4 = "ymWXCWpM"
    bool_1 = False
    dict_1 = {bool_1: bool_1, str_4: bool_1, bool_1: str_4}
    tuple_0 = (str_4, bool_1, dict_1)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    var_12 = module_0.deduplicate(str_3)
    assert var_12 == "K3A!V\x0c#87"
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_2)
    assert var_13 is False
    list_0 = [bytes_2, bytes_2]
    var_14 = module_0.devoice(list_0)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_3)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.ends_with_vowel(bytes_3)
    assert var_16 is False
    str_5 = "%OJ<'vPCn@4"
    var_17 = module_0.deduplicate(str_5)
    assert var_17 == "%OJ<'vPCn@4"
    bool_2 = True
    tuple_1 = (bool_2, bool_2)
    list_1 = [tuple_1]
    var_18 = module_0.ends_with_vowel(list_1)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_5)
    var_25 = module_0.devoice(var_19)
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bytes_0 = b"^\xd5\xd00{J"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"^\xd5\xd00{J"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {var_0: var_0, bytes_0: var_0}
    bool_0 = False
    list_0 = [dict_0, var_0, bool_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    str_0 = "(q]I"
    var_2 = module_0.devoice(str_0)
    var_3 = module_0.devoice(var_2)
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.ends_dentals(bytes_1)
    assert var_5 is False
    list_1 = [bytes_1, bytes_1]
    var_6 = module_0.devoice(list_1)
    var_7 = module_0.deduplicate(str_0)
    assert var_7 == "(q]I"
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    list_2 = [bytes_2, bytes_2]
    var_9 = module_0.devoice(list_2)
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    module_0.devoice(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    str_0 = "%OJ<'vPCn@4"
    var_8 = module_0.deduplicate(str_0)
    assert var_8 == "%OJ<'vPCn@4"
    str_1 = "9#uHWMgkuu@KG7[3"
    var_9 = module_0.starts_with_vowel(str_1)
    assert var_9 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.ends_dentals(bytes_3)
    assert var_10 is False
    list_0 = [bytes_3, bytes_3]
    var_11 = module_0.devoice(list_0)
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    str_2 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_14 = module_0.ends_with_vowel(str_3)
    assert var_14 is False
    var_15 = module_0.ends_dentals(str_2)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_1 = [set_0, str_4, str_4]
    var_17 = module_0.ends_dentals(list_1)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_4)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_6)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_5)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    var_28 = module_0.ends_dentals(var_26)
    assert var_28 is False
    var_29 = module_0.starts_with_vowel(bytes_7)
    assert var_29 is False
    module_0.deduplicate(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    str_0 = "9#uHWMgkuu@KG7[3"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "#iW\rr^3:"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(str_1)
    assert var_2 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_0)
    assert var_5 is False
    module_0.starts_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bool_0 = False
    dict_0 = {bytes_1: var_2, var_2: bool_0, bool_0: bytes_1}
    var_3 = module_0.starts_with_vowel(dict_0)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "ymWXCWpM"
    bool_1 = False
    dict_1 = {bool_1: bool_1, str_0: bool_1, bool_1: str_0}
    tuple_0 = (str_0, bool_1, dict_1)
    var_10 = module_0.devoice(tuple_0)
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    int_0 = 1176
    bool_2 = False
    tuple_1 = (bool_2,)
    tuple_2 = (int_0, tuple_1)
    var_12 = module_0.ends_with_vowel(tuple_2)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    set_0 = set()
    tuple_3 = (set_0,)
    var_17 = module_0.ends_with_vowel(tuple_3)
    assert var_17 is False
    module_0.ends_with_vowel(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "#iW\rr^3:"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_1)
    assert var_11 is False
    bytes_3 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_12 = module_0.deduplicate(bytes_3)
    assert var_12 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_13 = module_0.devoice(list_0)
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(str_0)
    assert var_1 is False
    var_2 = module_0.starts_with_vowel(var_0)
    assert var_2 is False
    str_1 = "1X,mBK\\"
    var_3 = module_0.devoice(str_1)
    assert var_3 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_0)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    var_7 = module_0.ends_dentals(var_4)
    assert var_7 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_10)
    assert var_15 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    module_0.ends_with_vowel(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_4)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_5)
    assert var_10 is False
    str_0 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_0)
    assert var_11 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_0)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bool_0 = True
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.devoice(var_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(var_2)
    assert var_5 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_8 = module_0.starts_with_vowel(tuple_0)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(tuple_0)
    assert var_9 is False
    var_10 = module_0.ends_dentals(tuple_0)
    assert var_10 is False
    str_2 = "`<)4H\rS\x0c"
    var_11 = module_0.ends_dentals(str_2)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_4)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.devoice(var_12)
    int_0 = 2
    module_0.ends_dentals(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    var_2 = module_0.starts_with_vowel(bytes_0)
    assert var_2 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_4 = module_0.ends_with_vowel(tuple_1)
    assert var_4 is False
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "#iW\rr^3:"
    var_1 = module_0.ends_dentals(str_1)
    assert var_1 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_2 = module_0.ends_with_vowel(str_2)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(str_2)
    assert var_3 is False
    str_3 = "1X,mBK\\"
    var_4 = module_0.devoice(str_3)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_4)
    assert var_6 is False
    str_4 = "1X,mBK\\"
    var_7 = module_0.devoice(str_4)
    assert var_7 == "1X,mBK\\"
    str_5 = "K3A!V\x0c#87"
    var_8 = module_0.starts_with_vowel(str_5)
    assert var_8 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_0)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(str_5)
    assert var_11 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.devoice(bytes_1)
    bool_0 = False
    dict_0 = {bytes_1: var_12, var_12: bool_0, bool_0: bytes_1}
    var_13 = module_0.starts_with_vowel(dict_0)
    assert var_13 is False
    str_6 = "1X,mBK\\"
    var_14 = module_0.devoice(str_6)
    var_15 = module_0.ends_dentals(str_6)
    assert var_15 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_2)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_3)
    var_19 = module_0.ends_dentals(var_16)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(var_18)
    assert var_20 is False
    str_7 = "~&KnWE+1U"
    var_21 = module_0.ends_dentals(str_7)
    assert var_21 is False
    module_0.starts_with_vowel(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_0)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_3)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(bytes_2)
    assert var_8 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_9 = module_0.devoice(list_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_5)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_dentals(var_11)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_dentals(var_11)
    assert var_15 is False
    str_1 = ")sE\nhxARG\r;/4"
    var_16 = module_0.devoice(str_1)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_7)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(bytes_7)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_2 = "\\Z8@Jg"
    var_23 = module_0.ends_with_vowel(str_2)
    assert var_23 is False
    module_0.ends_dentals(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    float_0 = -1663.70075
    module_0.ends_with_vowel(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_1)
    assert var_9 == "%OJ<'vPCn@4"
    var_10 = module_0.ends_with_vowel(str_1)
    assert var_10 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_2)
    assert var_11 is False
    str_2 = "K3A!V\x0c#87"
    var_12 = module_0.starts_with_vowel(str_2)
    assert var_12 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_1 = -1663.70075
    tuple_1 = (float_1,)
    var_14 = module_0.starts_with_vowel(tuple_1)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(tuple_1)
    assert var_15 is False
    var_16 = module_0.ends_dentals(tuple_1)
    assert var_16 is False
    tuple_2 = ()
    var_17 = module_0.devoice(tuple_2)
    module_0.starts_with_vowel(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_0)
    str_0 = "ORrJ2:"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_4)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_5)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_5)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_11)
    assert var_15 is False
    var_16 = module_0.devoice(var_11)
    assert var_16 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_19 = module_0.ends_with_vowel(bytes_6)
    assert var_19 is False
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.ends_dentals(bytes_7)
    assert var_20 is False
    str_2 = "1X,mBK\\"
    var_21 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_22 = module_0.starts_with_vowel(str_3)
    assert var_22 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_8)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.starts_with_vowel(str_3)
    assert var_25 is False
    bytes_9 = b"=\xc4\xb3D\xea8"
    var_26 = module_0.ends_with_vowel(bytes_9)
    assert var_26 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_27 = module_0.deduplicate(bytes_10)
    assert var_27 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_28 = module_0.ends_with_vowel(bytes_10)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_10)
    str_4 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_30 = module_0.ends_with_vowel(str_4)
    assert var_30 is False
    var_31 = module_0.deduplicate(str_4)
    assert var_31 == "[YJ\r-1]~}RBJ\x0c\n@"
    module_0.deduplicate(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    str_0 = "9#uHWMgkuu@KG7[3"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.devoice(dict_0)
    bool_0 = False
    set_0 = {bool_0}
    var_2 = module_0.devoice(set_0)
    var_3 = module_0.devoice(var_2)
    var_4 = module_0.deduplicate(var_2)
    str_1 = "1X,mBK\\"
    var_5 = module_0.devoice(str_1)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_5)
    assert var_10 is False
    bool_1 = True
    module_0.ends_with_vowel(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.deduplicate(str_0)
    assert var_2 == "[YJ\r-1]~}RBJ\x0c\n@"
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_0)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_1 = "9#uHWMgkuu@KG7[3"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_7 = module_0.ends_dentals(bytes_1)
    assert var_7 is False
    str_2 = "ORrJ2:"
    var_8 = module_0.starts_with_vowel(str_2)
    assert var_8 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_3)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.ends_dentals(var_10)
    assert var_11 is False
    str_3 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_3)
    assert var_12 is False
    var_13 = module_0.devoice(str_3)
    bytes_4 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_14 = module_0.deduplicate(bytes_4)
    assert var_14 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    module_0.ends_dentals(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_2 = module_0.starts_with_vowel(bytes_0)
    assert var_2 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.starts_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    tuple_0 = ()
    var_6 = module_0.devoice(tuple_0)
    str_1 = "ORrJ2:"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_3)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(var_9)
    assert var_10 is False
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_1 = (str_2, bool_0, dict_0)
    var_11 = module_0.devoice(tuple_1)
    var_12 = module_0.ends_dentals(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.starts_with_vowel(var_13)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(var_15)
    assert var_17 is False
    str_3 = "1X,mBK\\"
    var_18 = module_0.devoice(str_3)
    var_19 = module_0.ends_dentals(str_3)
    assert var_19 is False
    var_20 = module_0.ends_dentals(str_3)
    assert var_20 is False
    str_4 = "\\Z8@Jg"
    var_21 = module_0.ends_with_vowel(str_4)
    assert var_21 is False
    str_5 = "1X,mBK\\"
    var_22 = module_0.devoice(str_5)
    var_23 = module_0.ends_dentals(str_5)
    assert var_23 is False
    var_24 = module_0.devoice(str_4)
    none_type_0 = None
    module_0.deduplicate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == "1X,mBK\\"
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    bool_0 = True
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bool_0 = True
    module_0.ends_dentals(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_5 = module_0.ends_with_vowel(list_0)
    assert var_5 is False
    bool_2 = True
    tuple_0 = (bool_2, bool_2)
    list_1 = [tuple_0]
    var_6 = module_0.ends_with_vowel(list_1)
    assert var_6 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    list_2 = [bytes_2, bytes_2]
    var_8 = module_0.devoice(list_2)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_3)
    assert var_9 is False
    str_0 = "\\Z8@Jg"
    var_10 = module_0.ends_with_vowel(str_0)
    assert var_10 is False
    var_11 = module_0.devoice(str_0)
    var_12 = module_0.deduplicate(var_11)
    assert var_12 == "\\Z8@Jg"
    module_0.ends_with_vowel(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_0)
    assert var_4 is False
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    var_5 = module_0.ends_dentals(list_0)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(list_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(var_10)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.ends_dentals(str_1)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_4)
    assert var_22 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_7)
    bool_0 = False
    set_1 = {bool_0}
    var_29 = module_0.devoice(set_1)
    var_30 = module_0.devoice(var_29)
    module_0.starts_with_vowel(var_26)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    dict_0 = {}
    var_1 = module_0.deduplicate(dict_0)
    str_1 = "`<)4H\rS\x0c"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    str_2 = "1X,mBK\\"
    var_4 = module_0.devoice(str_2)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.ends_dentals(str_2)
    assert var_5 is False
    var_6 = module_0.devoice(var_4)
    assert var_6 == "1X,mBK\\"
    var_7 = module_0.devoice(var_4)
    assert var_7 == "1X,mBK\\"
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_3)
    assert var_8 is False
    var_9 = module_0.starts_with_vowel(str_3)
    assert var_9 is False
    str_4 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_10 = module_0.ends_with_vowel(str_4)
    assert var_10 is False
    var_11 = module_0.deduplicate(str_4)
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_1)
    assert var_12 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_2)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_1)
    assert var_17 is False
    var_18 = module_0.ends_dentals(bytes_1)
    assert var_18 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_19 = module_0.ends_with_vowel(bytes_3)
    assert var_19 is False
    str_5 = "1X,mBK\\"
    var_20 = module_0.devoice(str_5)
    var_21 = module_0.ends_dentals(str_5)
    assert var_21 is False
    var_22 = module_0.devoice(var_20)
    bool_0 = True
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(bytes_0)
    assert var_2 is False
    str_0 = "%OJ<'vPCn@4"
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "%OJ<'vPCn@4"
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.devoice(dict_0)
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    str_2 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_2, str_2, str_2}
    list_0 = [set_0, str_2, str_2]
    var_9 = module_0.ends_dentals(list_0)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(str_2)
    assert var_10 is False
    module_0.ends_dentals(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    str_0 = "9#uHWMgkuu@KG7[3"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_0)
    assert var_5 is False
    str_0 = "(q]I"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.devoice(var_6)
    var_8 = module_0.starts_with_vowel(var_7)
    assert var_8 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_2)
    assert var_9 is False
    list_0 = [bytes_2, bytes_2]
    var_10 = module_0.devoice(list_0)
    var_11 = module_0.deduplicate(str_0)
    assert var_11 == "(q]I"
    module_0.devoice(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(bytes_0)
    assert var_6 is False
    tuple_0 = ()
    var_7 = module_0.devoice(tuple_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.deduplicate(var_10)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = "ORrJ2:"
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.ends_dentals(var_16)
    assert var_17 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.ends_dentals(bytes_6)
    assert var_18 is False
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    var_20 = module_0.devoice(bytes_6)
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_21 = module_0.deduplicate(bytes_7)
    assert var_21 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_8)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_9)
    var_25 = module_0.starts_with_vowel(var_22)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(var_24)
    assert var_26 is False
    var_27 = module_0.devoice(bytes_9)
    var_28 = module_0.devoice(var_27)
    complex_0 = -2118.041034 - 1769.966j
    str_3 = "%OJ<'vPCn@4"
    list_1 = [complex_0, str_3, complex_0]
    var_29 = module_0.ends_dentals(list_1)
    assert var_29 is False
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "K3A!V\x0c#87"
    var_1 = module_0.starts_with_vowel(str_1)
    assert var_1 is False
    str_2 = "1X,mBK\\"
    var_2 = module_0.devoice(str_2)
    assert var_2 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_3 = "1X,mBK\\"
    var_8 = module_0.devoice(str_3)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_3)
    assert var_11 is False
    set_0 = set()
    tuple_0 = (set_0,)
    var_12 = module_0.ends_with_vowel(tuple_0)
    assert var_12 is False
    str_4 = "(q]I"
    var_13 = module_0.devoice(str_4)
    var_14 = module_0.devoice(var_13)
    var_15 = module_0.starts_with_vowel(var_14)
    assert var_15 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_16 = module_0.ends_dentals(bytes_3)
    assert var_16 is False
    list_0 = [bytes_3, bytes_3]
    var_17 = module_0.devoice(list_0)
    var_18 = module_0.deduplicate(str_4)
    assert var_18 == "(q]I"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(bytes_4)
    assert var_24 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_25 = module_0.ends_dentals(bytes_6)
    assert var_25 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_26 = module_0.deduplicate(bytes_7)
    assert var_26 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_1 = (set_1,)
    var_27 = module_0.ends_with_vowel(tuple_1)
    assert var_27 is False
    var_28 = module_0.devoice(var_26)
    assert var_28 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_29 = module_0.deduplicate(var_28)
    assert var_29 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.devoice(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_1 = module_0.ends_with_vowel(str_1)
    assert var_1 is False
    var_2 = module_0.ends_dentals(str_0)
    assert var_2 is False
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -4658
    module_0.devoice(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    list_0 = [bytes_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(bytes_1)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_dentals(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(bytes_4)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_1 = ")sE\nhxARG\r;/4"
    var_17 = module_0.devoice(str_1)
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_18 = module_0.deduplicate(bytes_5)
    assert var_18 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_2 = "1X,mBK\\"
    var_19 = module_0.devoice(str_2)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_6)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(str_2)
    assert var_22 is False
    bytes_7 = b"^\xd5\xd00{J"
    var_23 = module_0.deduplicate(bytes_7)
    assert var_23 == b"^\xd5\xd00{J"
    dict_0 = {var_23: var_23, bytes_7: var_23}
    bool_0 = False
    list_1 = [dict_0, var_23, bool_0, bytes_7]
    var_24 = module_0.devoice(list_1)
    var_25 = module_0.devoice(list_1)
    module_0.devoice(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    str_0 = "%OJ<'vPCn@4"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "%OJ<'vPCn@4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    complex_0 = -2118.041034 - 1769.966j
    str_1 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_1, complex_0]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.starts_with_vowel(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(var_10)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    int_0 = 2561
    module_0.devoice(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    str_0 = "#iW\rr^3:"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    int_0 = 1176
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    var_2 = module_0.ends_with_vowel(tuple_1)
    assert var_2 is False
    bool_1 = False
    set_0 = {bool_1}
    var_3 = module_0.devoice(set_0)
    var_4 = module_0.devoice(var_3)
    var_5 = module_0.deduplicate(var_3)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_0)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_1)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.devoice(bytes_2)
    bool_2 = False
    dict_0 = {bytes_2: var_10, var_10: bool_2, bool_2: bytes_2}
    var_11 = module_0.starts_with_vowel(dict_0)
    assert var_11 is False
    str_1 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    var_15 = module_0.devoice(str_1)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_16 = module_0.ends_with_vowel(str_3)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    module_0.ends_with_vowel(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_0 = module_0.devoice(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.devoice(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    str_0 = "`<)4H\rS\x0c"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"^\xd5\xd00{J"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"^\xd5\xd00{J"
    dict_0 = {var_1: var_1, bytes_0: var_1}
    bool_0 = False
    list_0 = [dict_0, var_1, bool_0, bytes_0]
    var_2 = module_0.devoice(list_0)
    var_3 = module_0.devoice(list_0)
    str_1 = "\\Z8@Jg"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    int_0 = 1176
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (int_0, tuple_0)
    var_5 = module_0.ends_with_vowel(tuple_1)
    assert var_5 is False
    str_2 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_2)
    assert var_6 is False
    str_3 = "1X,mBK\\"
    var_7 = module_0.devoice(str_3)
    var_8 = module_0.ends_dentals(str_3)
    assert var_8 is False
    var_9 = module_0.devoice(str_2)
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_10 = module_0.ends_with_vowel(str_4)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_1)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.ends_dentals(var_14)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_5)
    var_20 = module_0.ends_dentals(var_17)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(var_19)
    assert var_21 is False
    var_22 = module_0.deduplicate(bytes_5)
    assert var_22 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_23 = module_0.devoice(bytes_6)
    var_24 = module_0.ends_with_vowel(var_23)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.starts_with_vowel(var_23)
    assert var_26 is False
    var_27 = module_0.ends_with_vowel(var_25)
    assert var_27 is False
    var_28 = module_0.devoice(bytes_7)
    bytes_8 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_29 = module_0.deduplicate(bytes_8)
    assert var_29 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    module_0.deduplicate(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    str_1 = "\\Z8@Jg"
    var_2 = module_0.ends_with_vowel(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_1)
    assert var_3 == "\\Z8@Jg"
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == "\\Z8@Jg"
    str_2 = "1X,mBK\\"
    var_5 = module_0.devoice(str_2)
    assert var_5 == "1X,mBK\\"
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.ends_dentals(var_5)
    assert var_7 is False
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_2)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_4 = module_0.ends_with_vowel(tuple_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_3)
    assert var_5 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(var_5)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "(q]I"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.devoice(var_7)
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    int_0 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_0, tuple_1)
    var_10 = module_0.ends_with_vowel(tuple_2)
    assert var_10 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_11 = module_0.deduplicate(bytes_3)
    assert var_11 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.ends_with_vowel(bytes_3)
    assert var_12 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_4)
    assert var_13 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_5)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_3 = (set_1,)
    var_15 = module_0.ends_with_vowel(tuple_3)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    assert var_16 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    dict_0 = {}
    var_17 = module_0.deduplicate(dict_0)
    str_1 = "\\Z8@Jg"
    var_18 = module_0.ends_with_vowel(str_1)
    assert var_18 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_19 = module_0.ends_dentals(bytes_6)
    assert var_19 is False
    str_2 = "1X,mBK\\"
    var_20 = module_0.devoice(str_2)
    str_3 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_3)
    assert var_21 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_7)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(str_3)
    assert var_24 is False
    module_0.starts_with_vowel(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_3)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_3)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_5)
    assert var_9 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_10 = module_0.devoice(bytes_4)
    bool_0 = False
    dict_0 = {bytes_4: var_10, var_10: bool_0, bool_0: bytes_4}
    var_11 = module_0.starts_with_vowel(dict_0)
    assert var_11 is False
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_0)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(str_0)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_6)
    var_17 = module_0.starts_with_vowel(var_14)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(var_16)
    assert var_18 is False
    var_19 = module_0.devoice(bytes_6)
    var_20 = module_0.devoice(var_14)
    str_1 = "\\Z8@Jg"
    var_21 = module_0.ends_with_vowel(str_1)
    assert var_21 is False
    var_22 = module_0.devoice(str_1)
    var_23 = module_0.deduplicate(var_22)
    assert var_23 == "\\Z8@Jg"
    int_0 = 123
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.starts_with_vowel(var_5)
    assert var_8 is False
    var_9 = module_0.ends_with_vowel(var_7)
    assert var_9 is False
    var_10 = module_0.deduplicate(var_7)
    assert var_10 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    complex_0 = 1520.0032 + 1328.7j
    module_0.ends_dentals(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(bytes_1)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_2)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_3)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_dentals(bytes_2)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_5)
    var_15 = module_0.starts_with_vowel(var_12)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(var_14)
    assert var_16 is False
    var_17 = module_0.devoice(bytes_5)
    var_18 = module_0.devoice(var_17)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_0 = [set_0, str_1, str_1]
    var_19 = module_0.ends_dentals(list_0)
    assert var_19 is False
    bytes_6 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_6)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.starts_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_6)
    assert var_22 is False
    var_23 = module_0.deduplicate(str_1)
    assert var_23 == 'UErxwv/"J/CaV&Z,q!'
    str_2 = ")sE\nhxARG\r;/4"
    var_24 = module_0.devoice(str_2)
    module_0.starts_with_vowel(var_22)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.starts_with_vowel(var_6)
    assert var_9 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    str_0 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.deduplicate(var_7)
    assert var_8 == "\\Z8@Jg"
    bytes_2 = b"^\xd5\xd00{J"
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b"^\xd5\xd00{J"
    dict_0 = {var_9: var_9, bytes_2: var_9}
    bool_0 = False
    list_0 = [dict_0, var_9, bool_0, bytes_2]
    var_10 = module_0.devoice(list_0)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.devoice(bytes_3)
    bool_1 = False
    dict_1 = {bytes_3: var_11, var_11: bool_1, bool_1: bytes_3}
    var_12 = module_0.starts_with_vowel(dict_1)
    assert var_12 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_1)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_1)
    assert var_14 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_4)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_5)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_4)
    assert var_17 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.devoice(bytes_7)
    var_24 = module_0.deduplicate(var_18)
    assert var_24 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.deduplicate(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    int_0 = 1176
    bool_1 = False
    tuple_1 = (bool_1,)
    tuple_2 = (int_0, tuple_1)
    var_4 = module_0.ends_with_vowel(tuple_2)
    assert var_4 is False
    bool_2 = True
    tuple_3 = (bool_2, bool_2)
    list_0 = [tuple_3]
    var_5 = module_0.ends_with_vowel(list_0)
    assert var_5 is False
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_0)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.devoice(bytes_0)
    var_8 = module_0.ends_with_vowel(bytes_0)
    assert var_8 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.deduplicate(bytes_1)
    assert var_9 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.devoice(bytes_1)
    var_11 = module_0.ends_dentals(bytes_1)
    assert var_11 is False
    dict_1 = {}
    var_12 = module_0.devoice(dict_1)
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_3)
    assert var_5 is False
    var_6 = module_0.deduplicate(var_3)
    assert var_6 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    complex_0 = -2118.041034 - 1769.966j
    str_0 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_0, complex_0]
    var_7 = module_0.ends_dentals(list_0)
    assert var_7 is False
    str_1 = "\\Z8@Jg"
    var_8 = module_0.ends_with_vowel(str_1)
    assert var_8 is False
    str_2 = "1X,mBK\\"
    var_9 = module_0.devoice(str_2)
    var_10 = module_0.ends_dentals(str_2)
    assert var_10 is False
    var_11 = module_0.devoice(str_1)
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.devoice(bytes_3)
    bool_0 = False
    dict_0 = {bytes_3: var_12, var_12: bool_0, bool_0: bytes_3}
    var_13 = module_0.starts_with_vowel(dict_0)
    assert var_13 is False
    module_0.starts_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    str_0 = '.J"-Kc.'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.starts_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    tuple_0 = (var_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.ends_dentals(var_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_4)
    assert var_6 is False
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    list_1 = [tuple_1]
    var_8 = module_0.ends_with_vowel(list_1)
    assert var_8 is False
    dict_0 = {}
    var_9 = module_0.deduplicate(dict_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_2)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_3)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(bytes_3)
    assert var_14 is False
    str_1 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_1)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_1)
    assert var_16 is False
    module_0.ends_dentals(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_dentals(var_0)
    assert var_3 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_2)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_2)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.deduplicate(bytes_3)
    assert var_6 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.starts_with_vowel(var_6)
    assert var_7 is False
    module_0.ends_dentals(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = ")sE\nhxARG\r;/4"
    var_1 = module_0.devoice(str_1)
    assert var_1 == ")sE\nhxARG\r;/4"
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_0)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_3)
    assert var_7 is False
    var_8 = module_0.devoice(var_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    module_0.devoice(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "#iW\rr^3:"
    var_4 = module_0.ends_dentals(str_0)
    assert var_4 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_5 = module_0.ends_with_vowel(list_0)
    assert var_5 is False
    str_1 = "1X,mBK\\"
    var_6 = module_0.devoice(str_1)
    var_7 = module_0.ends_dentals(str_1)
    assert var_7 is False
    str_2 = "\\Z8@Jg"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.devoice(str_2)
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_with_vowel(var_12)
    assert var_13 is False
    var_14 = module_0.ends_dentals(var_12)
    assert var_14 is False
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_1 = [set_0, str_3, str_3]
    var_15 = module_0.ends_dentals(list_1)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(str_3)
    assert var_16 is False
    str_4 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_17 = module_0.ends_with_vowel(str_4)
    assert var_17 is False
    bool_2 = False
    module_0.devoice(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_0)
    assert var_6 is False
    str_0 = "ORrJ2:"
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "1X,mBK\\"
    var_8 = module_0.devoice(str_1)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_9 = module_0.deduplicate(bytes_2)
    assert var_9 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.ends_dentals(var_8)
    assert var_10 is False
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_11 = module_0.starts_with_vowel(tuple_0)
    assert var_11 is False
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_12 = module_0.devoice(list_0)
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(bytes_2)
    assert var_10 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    str_0 = "\\Z8@Jg"
    var_16 = module_0.ends_with_vowel(str_0)
    assert var_16 is False
    str_1 = "1X,mBK\\"
    var_17 = module_0.devoice(str_1)
    var_18 = module_0.ends_dentals(str_1)
    assert var_18 is False
    var_19 = module_0.devoice(str_0)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_20 = module_0.ends_with_vowel(str_2)
    assert var_20 is False
    var_21 = module_0.ends_with_vowel(str_0)
    assert var_21 is False
    bytes_6 = b"dV\xd8n_n\xe0\x87K"
    var_22 = module_0.ends_dentals(bytes_6)
    assert var_22 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_23 = module_0.deduplicate(bytes_7)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.starts_with_vowel(var_23)
    assert var_24 is False
    var_25 = module_0.ends_with_vowel(bytes_7)
    assert var_25 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_8)
    var_27 = module_0.ends_with_vowel(var_26)
    assert var_27 is False
    bytes_9 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_28 = module_0.devoice(bytes_9)
    var_29 = module_0.ends_dentals(var_26)
    assert var_29 is False
    var_30 = module_0.ends_with_vowel(var_28)
    assert var_30 is False
    var_31 = module_0.deduplicate(bytes_9)
    assert var_31 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    str_3 = "\\Z8@Jg"
    var_32 = module_0.ends_with_vowel(str_3)
    assert var_32 is False
    var_33 = module_0.devoice(str_3)
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_3)
    assert var_6 is False
    str_0 = "1X,mBK\\"
    var_7 = module_0.devoice(str_0)
    var_8 = module_0.ends_dentals(str_0)
    assert var_8 is False
    var_9 = module_0.devoice(var_7)
    str_1 = "(q]I"
    var_10 = module_0.devoice(str_1)
    var_11 = module_0.devoice(var_10)
    var_12 = module_0.starts_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_13 = module_0.ends_dentals(bytes_4)
    assert var_13 is False
    list_0 = [bytes_4, bytes_4]
    var_14 = module_0.devoice(list_0)
    var_15 = module_0.deduplicate(str_1)
    assert var_15 == "(q]I"
    module_0.ends_with_vowel(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    list_0 = [bytes_0, bytes_0]
    var_1 = module_0.devoice(list_0)
    bytes_1 = b"dV\xd8n_n\xe0\x87K"
    var_2 = module_0.ends_dentals(bytes_1)
    assert var_2 is False
    str_0 = "\\Z8@Jg"
    var_3 = module_0.ends_with_vowel(str_0)
    assert var_3 is False
    var_4 = module_0.devoice(str_0)
    assert var_4 == "\\Z8@Jg"
    var_5 = module_0.deduplicate(var_4)
    assert var_5 == "\\Z8@Jg"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    str_1 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_8 = module_0.ends_with_vowel(str_2)
    assert var_8 is False
    var_9 = module_0.ends_dentals(str_1)
    assert var_9 is False
    var_10 = module_0.ends_dentals(bytes_2)
    assert var_10 is False
    bytes_3 = b"r\xbe\xc5\xcc\xfaW\x00\xe9\x99(g\xd3;\xf7"
    var_11 = module_0.starts_with_vowel(bytes_3)
    assert var_11 is False
    str_3 = "~&KnWE+1U"
    var_12 = module_0.ends_dentals(str_3)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    assert var_13 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_5)
    var_16 = module_0.ends_dentals(var_13)
    assert var_16 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(bytes_6)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(bytes_6)
    assert var_20 is False
    str_4 = "K3A!V\x0c#87"
    var_21 = module_0.starts_with_vowel(str_4)
    assert var_21 is False
    str_5 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_5: bool_0, bool_0: str_5}
    tuple_0 = (str_5, bool_0, dict_0)
    var_22 = module_0.devoice(tuple_0)
    var_23 = module_0.ends_dentals(var_22)
    assert var_23 is False
    var_24 = module_0.deduplicate(str_4)
    assert var_24 == "K3A!V\x0c#87"
    bytes_7 = b"=\xc4\xb3D\xea8"
    var_25 = module_0.ends_with_vowel(bytes_7)
    assert var_25 is False
    module_0.ends_dentals(var_25)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    dict_0 = {}
    var_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    module_0.devoice(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(bytes_0)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_dentals(bytes_2)
    assert var_7 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_9 = module_0.starts_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_11 = module_0.ends_dentals(bytes_4)
    assert var_11 is False
    bytes_5 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_12 = module_0.deduplicate(bytes_5)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_13 = module_0.ends_with_vowel(tuple_0)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    assert var_14 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(var_14)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_0, str_0, str_0}
    list_0 = [set_1, str_0, str_0]
    var_16 = module_0.ends_dentals(list_0)
    assert var_16 is False
    str_1 = "\\Z8@Jg"
    var_17 = module_0.ends_with_vowel(str_1)
    assert var_17 is False
    var_18 = module_0.devoice(str_1)
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.devoice(tuple_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    bool_1 = False
    bool_2 = True
    list_0 = [bool_1, bool_1, bool_2, bool_1]
    var_2 = module_0.ends_with_vowel(list_0)
    assert var_2 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.devoice(bytes_0)
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.deduplicate(str_1)
    assert var_5 == "[YJ\r-1]~}RBJ\x0c\n@"
    str_2 = "1X,mBK\\"
    var_6 = module_0.devoice(str_2)
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_7 = module_0.deduplicate(bytes_1)
    assert var_7 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.ends_dentals(var_6)
    assert var_8 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_2)
    var_10 = module_0.ends_with_vowel(var_9)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.starts_with_vowel(var_9)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(var_11)
    assert var_13 is False
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.devoice(var_14)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_4)
    var_17 = module_0.ends_with_vowel(var_16)
    assert var_17 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_5)
    var_19 = module_0.starts_with_vowel(var_16)
    assert var_19 is False
    module_0.deduplicate(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    dict_0 = {}
    var_0 = module_0.devoice(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_dentals(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.devoice(var_0)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_6 = module_0.ends_with_vowel(bytes_2)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(bytes_2)
    assert var_7 is False
    str_0 = "1X,mBK\\"
    var_8 = module_0.devoice(str_0)
    var_9 = module_0.ends_dentals(str_0)
    assert var_9 is False
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_3)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.deduplicate(var_13)
    assert var_16 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_17 = module_0.ends_dentals(bytes_5)
    assert var_17 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.deduplicate(bytes_6)
    assert var_18 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_19 = module_0.ends_with_vowel(tuple_0)
    assert var_19 is False
    var_20 = module_0.devoice(var_18)
    assert var_20 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_7 = b"r\xbe\xc5\xcc\xfaW\x00\xe9\x99(g\xd3;\xf7"
    var_21 = module_0.starts_with_vowel(bytes_7)
    assert var_21 is False
    bytes_8 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_22 = module_0.devoice(bytes_8)
    bytes_9 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_23 = module_0.deduplicate(bytes_9)
    assert var_23 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_24 = module_0.ends_dentals(var_23)
    assert var_24 is False
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_1 = {str_1, str_1, str_1}
    list_0 = [set_1, str_1, str_1]
    var_25 = module_0.ends_dentals(list_0)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(str_1)
    assert var_26 is False
    module_0.ends_with_vowel(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    str_0 = "~&KnWE+1U"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_1 = module_0.ends_dentals(bytes_0)
    assert var_1 is False
    str_1 = "1X,mBK\\"
    var_2 = module_0.devoice(str_1)
    assert var_2 == "1X,mBK\\"
    var_3 = module_0.devoice(bytes_0)
    assert var_3 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    tuple_0 = ()
    var_4 = module_0.devoice(tuple_0)
    var_5 = module_0.starts_with_vowel(str_1)
    assert var_5 is False
    tuple_1 = ()
    var_6 = module_0.devoice(tuple_1)
    module_0.deduplicate(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.deduplicate(var_3)
    assert var_4 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    str_0 = "1X,mBK\\"
    var_5 = module_0.devoice(str_0)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    module_0.ends_dentals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    str_0 = ")sE\nhxARG\r;/4"
    var_0 = module_0.devoice(str_0)
    assert var_0 == ")sE\nhxARG\r;/4"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    module_0.devoice(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    str_3 = "K3A!V\x0c#87"
    var_6 = module_0.starts_with_vowel(str_3)
    assert var_6 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_7 = module_0.ends_with_vowel(str_4)
    assert var_7 is False
    var_8 = module_0.ends_dentals(str_3)
    assert var_8 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_9 = module_0.ends_dentals(bytes_0)
    assert var_9 is False
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_10 = module_0.deduplicate(bytes_1)
    assert var_10 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_0 = set()
    tuple_0 = (set_0,)
    var_11 = module_0.ends_with_vowel(tuple_0)
    assert var_11 is False
    var_12 = module_0.devoice(var_10)
    assert var_12 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(var_12)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_14 = module_0.ends_with_vowel(bytes_2)
    assert var_14 is False
    str_5 = "1X,mBK\\"
    var_15 = module_0.devoice(str_5)
    var_16 = module_0.ends_dentals(str_5)
    assert var_16 is False
    var_17 = module_0.devoice(var_15)
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_3)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    var_21 = module_0.ends_dentals(bytes_4)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_18)
    assert var_22 is False
    var_23 = module_0.devoice(var_18)
    assert var_23 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_5)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_6)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.devoice(bytes_6)
    var_30 = module_0.devoice(var_29)
    str_6 = "%OJ<'vPCn@4"
    var_31 = module_0.deduplicate(str_6)
    assert var_31 == "%OJ<'vPCn@4"
    str_7 = "`<)4H\rS\x0c"
    var_32 = module_0.ends_dentals(str_7)
    assert var_32 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_33 = module_0.deduplicate(bytes_7)
    assert var_33 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_34 = module_0.devoice(bytes_7)
    var_35 = module_0.ends_with_vowel(bytes_7)
    assert var_35 is False
    var_36 = module_0.ends_with_vowel(var_34)
    assert var_36 is False
    module_0.starts_with_vowel(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    int_0 = -635
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.devoice(str_0)
    assert var_2 == "\\Z8@Jg"
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    str_1 = "1X,mBK\\"
    var_4 = module_0.devoice(str_1)
    assert var_4 == "1X,mBK\\"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_2 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_2: bool_0, bool_0: str_2}
    tuple_0 = (str_2, bool_0, dict_0)
    var_6 = module_0.devoice(tuple_0)
    var_7 = module_0.ends_dentals(var_6)
    assert var_7 is False
    str_3 = "1X,mBK\\"
    var_8 = module_0.devoice(str_3)
    str_4 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_4)
    assert var_9 == "%OJ<'vPCn@4"
    var_10 = module_0.ends_with_vowel(str_4)
    assert var_10 is False
    module_0.deduplicate(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is False
    module_0.deduplicate(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    str_0 = "1X,mBK\\"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "1X,mBK\\"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(var_0)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_3)
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    var_9 = module_0.ends_dentals(var_7)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(var_7)
    assert var_10 is False
    var_11 = module_0.ends_dentals(var_7)
    assert var_11 is False
    str_1 = "\\Z8@Jg"
    var_12 = module_0.ends_with_vowel(str_1)
    assert var_12 is False
    str_2 = "1X,mBK\\"
    var_13 = module_0.devoice(str_2)
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    var_15 = module_0.devoice(str_1)
    str_3 = "%OJ<'vPCn@4"
    var_16 = module_0.deduplicate(str_3)
    assert var_16 == "%OJ<'vPCn@4"
    var_17 = module_0.ends_with_vowel(str_3)
    assert var_17 is False
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_18 = module_0.ends_with_vowel(list_0)
    assert var_18 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_4)
    var_20 = module_0.ends_with_vowel(var_19)
    assert var_20 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    var_22 = module_0.starts_with_vowel(var_19)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(var_21)
    assert var_23 is False
    var_24 = module_0.devoice(bytes_5)
    var_25 = module_0.devoice(var_24)
    str_4 = "#iW\rr^3:"
    var_26 = module_0.ends_dentals(str_4)
    assert var_26 is False
    bool_2 = False
    set_0 = {bool_2}
    var_27 = module_0.devoice(set_0)
    var_28 = module_0.devoice(var_27)
    var_29 = module_0.deduplicate(var_27)
    module_0.ends_with_vowel(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    assert var_1 == "\\Z8@Jg"
    var_2 = module_0.deduplicate(var_1)
    assert var_2 == "\\Z8@Jg"
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_3 = module_0.ends_with_vowel(bytes_0)
    assert var_3 is False
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    var_4 = module_0.ends_with_vowel(list_0)
    assert var_4 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_1)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_6 = module_0.deduplicate(bytes_2)
    assert var_6 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    dict_0 = {}
    var_7 = module_0.deduplicate(dict_0)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_4)
    var_11 = module_0.ends_dentals(var_8)
    assert var_11 is False
    var_12 = module_0.ends_with_vowel(bytes_4)
    assert var_12 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_5)
    assert var_13 is False
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_14 = module_0.deduplicate(bytes_6)
    var_15 = module_0.ends_with_vowel(bytes_6)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_6)
    str_1 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_1, str_1, str_1}
    list_1 = [set_0, str_1, str_1]
    var_17 = module_0.ends_dentals(list_1)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(str_1)
    assert var_18 is False
    var_19 = module_0.starts_with_vowel(list_1)
    assert var_19 is False
    bytes_7 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_20 = module_0.deduplicate(bytes_7)
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_21 = module_0.starts_with_vowel(tuple_1)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(tuple_1)
    assert var_22 is False
    var_23 = module_0.ends_dentals(tuple_1)
    assert var_23 is False
    module_0.ends_dentals(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.starts_with_vowel(var_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    bytes_3 = b"^\xd5\xd00{J"
    var_8 = module_0.deduplicate(bytes_3)
    assert var_8 == b"^\xd5\xd00{J"
    dict_0 = {var_8: var_8, bytes_3: var_8}
    bool_0 = False
    list_0 = [dict_0, var_8, bool_0, bytes_3]
    var_9 = module_0.devoice(list_0)
    var_10 = module_0.devoice(list_0)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_4)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_5)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    str_0 = "1X,mBK\\"
    var_17 = module_0.devoice(str_0)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(str_0)
    assert var_20 is False
    module_0.deduplicate(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_1)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_with_vowel(bytes_1)
    assert var_2 is False
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_2)
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    var_6 = module_0.ends_dentals(bytes_2)
    assert var_6 is False
    module_0.ends_dentals(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(var_1)
    assert var_3 is False
    var_4 = module_0.ends_dentals(var_1)
    assert var_4 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_5 = module_0.ends_dentals(bytes_2)
    assert var_5 is False
    str_0 = "1X,mBK\\"
    var_6 = module_0.devoice(str_0)
    var_7 = module_0.devoice(bytes_2)
    tuple_0 = ()
    var_8 = module_0.devoice(tuple_0)
    var_9 = module_0.starts_with_vowel(str_0)
    assert var_9 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.starts_with_vowel(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    var_15 = module_0.deduplicate(var_12)
    assert var_15 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_16 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_6)
    var_18 = module_0.ends_with_vowel(var_17)
    assert var_18 is False
    var_19 = module_0.ends_dentals(var_17)
    assert var_19 is False
    var_20 = module_0.starts_with_vowel(var_17)
    assert var_20 is False
    var_21 = module_0.ends_dentals(var_17)
    assert var_21 is False
    str_1 = "1X,mBK\\"
    var_22 = module_0.devoice(str_1)
    var_23 = module_0.ends_dentals(str_1)
    assert var_23 is False
    module_0.ends_with_vowel(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    str_0 = '.J"-Kc.'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.starts_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    tuple_0 = (var_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(var_3)
    assert var_5 is False
    var_6 = module_0.ends_dentals(var_3)
    assert var_6 is False
    set_0 = {var_3, var_5, var_2, bytes_1}
    var_7 = module_0.deduplicate(set_0)
    bytes_2 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_8 = module_0.deduplicate(bytes_2)
    float_0 = -1663.70075
    tuple_1 = (float_0,)
    var_9 = module_0.starts_with_vowel(tuple_1)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(tuple_1)
    assert var_10 is False
    var_11 = module_0.ends_dentals(tuple_1)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_13 = module_0.starts_with_vowel(str_2)
    assert var_13 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_14 = module_0.devoice(bytes_3)
    var_15 = module_0.ends_with_vowel(var_14)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    float_1 = -1663.70075
    tuple_2 = (float_1,)
    var_17 = module_0.starts_with_vowel(tuple_2)
    assert var_17 is False
    var_18 = module_0.ends_with_vowel(tuple_2)
    assert var_18 is False
    str_3 = "1X,mBK\\"
    var_19 = module_0.devoice(str_3)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_4)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_5)
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    var_24 = module_0.starts_with_vowel(var_19)
    assert var_24 is False
    module_0.starts_with_vowel(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    float_0 = 2888.0
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.devoice(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "1X,mBK\\"
    var_1 = module_0.devoice(str_0)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    tuple_0 = ()
    var_3 = module_0.devoice(tuple_0)
    var_4 = module_0.starts_with_vowel(str_0)
    assert var_4 is False
    bytes_1 = b"=\xc4\xb3D\xea8"
    var_5 = module_0.ends_with_vowel(bytes_1)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.ends_with_vowel(var_6)
    assert var_7 is False
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_3)
    var_9 = module_0.ends_dentals(var_6)
    assert var_9 is False
    bytes_4 = b"\x87"
    int_0 = 100
    tuple_1 = (bytes_4, int_0)
    var_10 = module_0.deduplicate(tuple_1)
    var_11 = module_0.devoice(bytes_4)
    bytes_5 = b"dV\xd8n_n\xe0\x87K"
    var_12 = module_0.ends_dentals(bytes_5)
    assert var_12 is False
    str_1 = "1X,mBK\\"
    var_13 = module_0.devoice(str_1)
    str_2 = "K3A!V\x0c#87"
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_6)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    var_17 = module_0.starts_with_vowel(str_2)
    assert var_17 is False
    float_0 = 3821.0
    list_0 = [float_0, float_0, float_0]
    var_18 = module_0.devoice(list_0)
    str_3 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_3, str_3, str_3}
    list_1 = [set_0, str_3, str_3]
    var_19 = module_0.ends_dentals(list_1)
    assert var_19 is False
    bytes_7 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_20 = module_0.deduplicate(bytes_7)
    assert var_20 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_21 = module_0.starts_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(bytes_7)
    assert var_22 is False
    var_23 = module_0.deduplicate(str_3)
    assert var_23 == 'UErxwv/"J/CaV&Z,q!'
    bytes_8 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_24 = module_0.deduplicate(bytes_8)
    assert var_24 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_25 = module_0.starts_with_vowel(var_24)
    assert var_25 is False
    var_26 = module_0.ends_with_vowel(bytes_8)
    assert var_26 is False
    module_0.deduplicate(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "`<)4H\rS\x0c"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_7 = module_0.deduplicate(bytes_2)
    assert var_7 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.ends_with_vowel(bytes_2)
    assert var_9 is False
    var_10 = module_0.ends_with_vowel(var_8)
    assert var_10 is False
    str_1 = "1X,mBK\\"
    var_11 = module_0.devoice(str_1)
    var_12 = module_0.ends_dentals(str_1)
    assert var_12 is False
    tuple_0 = ()
    var_13 = module_0.devoice(tuple_0)
    str_2 = "#iW\rr^3:"
    var_14 = module_0.ends_dentals(str_2)
    assert var_14 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_3)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_3)
    assert var_16 is False
    str_4 = 'UErxwv/"J/CaV&Z,q!'
    set_0 = {str_4, str_4, str_4}
    list_0 = [set_0, str_4, str_4]
    var_17 = module_0.ends_dentals(list_0)
    assert var_17 is False
    bytes_3 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_18 = module_0.deduplicate(bytes_3)
    assert var_18 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_19 = module_0.starts_with_vowel(var_18)
    assert var_19 is False
    var_20 = module_0.ends_with_vowel(bytes_3)
    assert var_20 is False
    var_21 = module_0.deduplicate(str_4)
    assert var_21 == 'UErxwv/"J/CaV&Z,q!'
    module_0.ends_dentals(var_19)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.starts_with_vowel(var_1)
    assert var_3 is False
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.starts_with_vowel(str_2)
    assert var_5 is False
    str_3 = "1X,mBK\\"
    var_6 = module_0.devoice(str_3)
    assert var_6 == "1X,mBK\\"
    str_4 = "K3A!V\x0c#87"
    var_7 = module_0.starts_with_vowel(str_4)
    assert var_7 is False
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.devoice(bytes_0)
    assert var_8 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.ends_with_vowel(var_8)
    assert var_9 is False
    var_10 = module_0.starts_with_vowel(str_4)
    assert var_10 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_1)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_2)
    var_14 = module_0.starts_with_vowel(var_11)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(var_13)
    assert var_15 is False
    var_16 = module_0.devoice(bytes_2)
    var_17 = module_0.devoice(var_16)
    str_5 = "(q]I"
    var_18 = module_0.devoice(str_5)
    var_19 = module_0.devoice(var_18)
    var_20 = module_0.starts_with_vowel(var_19)
    assert var_20 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_21 = module_0.ends_dentals(bytes_3)
    assert var_21 is False
    list_0 = [bytes_3, bytes_3]
    var_22 = module_0.devoice(list_0)
    var_23 = module_0.deduplicate(str_5)
    assert var_23 == "(q]I"
    str_6 = "K3A!V\x0c#87"
    var_24 = module_0.starts_with_vowel(str_6)
    assert var_24 is False
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_25 = module_0.ends_with_vowel(bytes_4)
    assert var_25 is False
    module_0.deduplicate(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    set_0 = set()
    tuple_0 = (set_0,)
    var_0 = module_0.ends_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.ends_with_vowel(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    str_0 = "K3A!V\x0c#87"
    var_0 = module_0.starts_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "ymWXCWpM"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_1: bool_0, bool_0: str_1}
    tuple_0 = (str_1, bool_0, dict_0)
    var_1 = module_0.devoice(tuple_0)
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "K3A!V\x0c#87"
    str_2 = "ymWXCWpM"
    bool_1 = False
    dict_1 = {bool_1: bool_1, str_2: bool_1, bool_1: str_2}
    tuple_1 = (str_2, bool_1, dict_1)
    var_4 = module_0.devoice(tuple_1)
    var_5 = module_0.ends_dentals(var_4)
    assert var_5 is False
    str_3 = "1X,mBK\\"
    var_6 = module_0.devoice(str_3)
    var_7 = module_0.ends_dentals(str_3)
    assert var_7 is False
    var_8 = module_0.starts_with_vowel(var_6)
    assert var_8 is False
    str_4 = "(q]I"
    var_9 = module_0.devoice(str_4)
    var_10 = module_0.devoice(var_9)
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    str_5 = "(q]I"
    var_12 = module_0.devoice(str_5)
    var_13 = module_0.devoice(var_12)
    var_14 = module_0.starts_with_vowel(var_13)
    assert var_14 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_0)
    assert var_15 is False
    list_0 = [bytes_0, bytes_0]
    var_16 = module_0.devoice(list_0)
    var_17 = module_0.deduplicate(str_5)
    assert var_17 == "(q]I"
    bytes_1 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_18 = module_0.ends_dentals(bytes_1)
    assert var_18 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_19 = module_0.devoice(bytes_2)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_3)
    var_21 = module_0.ends_with_vowel(var_20)
    assert var_21 is False
    var_22 = module_0.ends_dentals(var_20)
    assert var_22 is False
    var_23 = module_0.starts_with_vowel(var_20)
    assert var_23 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_24 = module_0.devoice(bytes_4)
    var_25 = module_0.ends_with_vowel(var_24)
    assert var_25 is False
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_26 = module_0.devoice(bytes_5)
    var_27 = module_0.starts_with_vowel(var_24)
    assert var_27 is False
    var_28 = module_0.ends_with_vowel(var_26)
    assert var_28 is False
    var_29 = module_0.deduplicate(var_26)
    assert var_29 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    float_0 = 3821.0
    list_1 = [float_0, float_0, float_0]
    var_30 = module_0.devoice(list_1)
    module_0.deduplicate(var_21)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_0 = module_0.starts_with_vowel(tuple_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_2 = module_0.ends_dentals(var_1)
    assert var_2 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_2)
    var_6 = module_0.starts_with_vowel(var_3)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    var_8 = module_0.devoice(bytes_2)
    var_9 = module_0.devoice(var_3)
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_10 = module_0.devoice(bytes_3)
    var_11 = module_0.ends_with_vowel(var_10)
    assert var_11 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_12 = module_0.devoice(bytes_4)
    var_13 = module_0.ends_dentals(var_10)
    assert var_13 is False
    var_14 = module_0.ends_with_vowel(var_12)
    assert var_14 is False
    str_0 = "ORrJ2:"
    var_15 = module_0.starts_with_vowel(str_0)
    assert var_15 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_16 = module_0.deduplicate(bytes_5)
    assert var_16 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_6)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_18 = module_0.ends_dentals(var_17)
    assert var_18 is False
    str_1 = "\\Z8@Jg"
    var_19 = module_0.ends_with_vowel(str_1)
    assert var_19 is False
    str_2 = "1X,mBK\\"
    var_20 = module_0.devoice(str_2)
    var_21 = module_0.ends_dentals(str_2)
    assert var_21 is False
    var_22 = module_0.devoice(str_1)
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_23 = module_0.ends_with_vowel(str_3)
    assert var_23 is False
    var_24 = module_0.ends_with_vowel(str_1)
    assert var_24 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_25 = module_0.devoice(bytes_7)
    var_26 = module_0.ends_with_vowel(var_25)
    assert var_26 is False
    bytes_8 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_27 = module_0.devoice(bytes_8)
    var_28 = module_0.ends_dentals(var_25)
    assert var_28 is False
    var_29 = module_0.ends_with_vowel(var_27)
    assert var_29 is False
    var_30 = module_0.deduplicate(bytes_8)
    assert var_30 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bool_0 = False
    set_0 = {bool_0}
    var_31 = module_0.devoice(set_0)
    var_32 = module_0.devoice(var_31)
    str_4 = "1X,mBK\\"
    var_33 = module_0.devoice(str_4)
    var_34 = module_0.ends_dentals(str_4)
    assert var_34 is False
    bytes_9 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_35 = module_0.ends_dentals(bytes_9)
    assert var_35 is False
    bytes_10 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_36 = module_0.deduplicate(bytes_10)
    assert var_36 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    set_1 = set()
    tuple_1 = (set_1,)
    var_37 = module_0.ends_with_vowel(tuple_1)
    assert var_37 is False
    var_38 = module_0.devoice(var_36)
    assert var_38 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    module_0.ends_with_vowel(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    var_4 = module_0.ends_dentals(bytes_1)
    assert var_4 is False
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(bytes_0)
    assert var_1 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.deduplicate(bytes_1)
    assert var_2 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_2)
    assert var_3 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    var_5 = module_0.ends_dentals(bytes_2)
    assert var_5 is False
    var_6 = module_0.ends_with_vowel(var_2)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_3)
    assert var_7 is False
    str_0 = "ORrJ2:"
    var_8 = module_0.starts_with_vowel(str_0)
    assert var_8 is False
    str_1 = "[YJ\r-1]~}RBJ\x0c\n@"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    var_10 = module_0.deduplicate(str_1)
    assert var_10 == "[YJ\r-1]~}RBJ\x0c\n@"
    bytes_3 = b"dV\xd8n_n\xe0\x87K"
    var_11 = module_0.ends_dentals(bytes_3)
    assert var_11 is False
    str_2 = "1X,mBK\\"
    var_12 = module_0.devoice(str_2)
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_13 = module_0.devoice(bytes_4)
    var_14 = module_0.ends_with_vowel(var_13)
    assert var_14 is False
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.ends_dentals(bytes_4)
    assert var_16 is False
    bytes_5 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_17 = module_0.deduplicate(bytes_5)
    assert var_17 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_18 = module_0.devoice(bytes_6)
    var_19 = module_0.ends_with_vowel(var_18)
    assert var_19 is False
    bytes_7 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_20 = module_0.devoice(bytes_7)
    var_21 = module_0.starts_with_vowel(var_18)
    assert var_21 is False
    var_22 = module_0.ends_with_vowel(var_20)
    assert var_22 is False
    var_23 = module_0.ends_with_vowel(bytes_6)
    assert var_23 is False
    var_24 = module_0.ends_dentals(bytes_6)
    assert var_24 is False
    module_0.starts_with_vowel(var_24)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bytes_0 = b"=\xc4\xb3D\xea8"
    var_0 = module_0.ends_with_vowel(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_0 = "\\Z8@Jg"
    var_1 = module_0.ends_with_vowel(str_0)
    assert var_1 is False
    var_2 = module_0.devoice(str_0)
    assert var_2 == "\\Z8@Jg"
    bytes_1 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_3 = module_0.deduplicate(bytes_1)
    assert var_3 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_4 = module_0.ends_with_vowel(bytes_1)
    assert var_4 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.deduplicate(bytes_2)
    assert var_5 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_6 = module_0.starts_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(bytes_2)
    assert var_7 is False
    module_0.starts_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_1 = module_0.devoice(bytes_1)
    assert var_1 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.ends_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_dentals(bytes_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_0)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(var_1)
    assert var_5 is False
    str_0 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_0)
    assert var_6 is False
    var_7 = module_0.devoice(str_0)
    str_1 = "%OJ<'vPCn@4"
    var_8 = module_0.deduplicate(str_1)
    assert var_8 == "%OJ<'vPCn@4"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    bytes_2 = b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_10 = module_0.deduplicate(bytes_2)
    assert var_10 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    var_11 = module_0.starts_with_vowel(bytes_2)
    assert var_11 is False
    var_12 = module_0.deduplicate(var_10)
    assert var_12 == b"G\xd1\x08\x82\xa4Jq\x1f\xbcg!"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.starts_with_vowel(str_2)
    assert var_14 is False
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_15 = module_0.deduplicate(bytes_3)
    assert var_15 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_4 = b"=\xc4\xb3D\xea8"
    var_16 = module_0.ends_with_vowel(bytes_4)
    assert var_16 is False
    var_17 = module_0.ends_with_vowel(bytes_3)
    assert var_17 is False
    module_0.deduplicate(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    bytes_0 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_0 = module_0.deduplicate(bytes_0)
    assert var_0 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    float_0 = -1663.70075
    tuple_0 = (float_0,)
    var_1 = module_0.starts_with_vowel(tuple_0)
    assert var_1 is False
    var_2 = module_0.ends_with_vowel(tuple_0)
    assert var_2 is False
    var_3 = module_0.ends_dentals(tuple_0)
    assert var_3 is False
    str_0 = "1X,mBK\\"
    var_4 = module_0.devoice(str_0)
    assert var_4 == "1X,mBK\\"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.devoice(bytes_1)
    assert var_5 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.ends_with_vowel(var_5)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(str_0)
    assert var_7 is False
    var_8 = module_0.ends_dentals(bytes_1)
    assert var_8 is False
    str_1 = "(q]I"
    var_9 = module_0.devoice(str_1)
    var_10 = module_0.devoice(var_9)
    var_11 = module_0.starts_with_vowel(var_10)
    assert var_11 is False
    bytes_2 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_12 = module_0.ends_dentals(bytes_2)
    assert var_12 is False
    list_0 = [bytes_2, bytes_2]
    var_13 = module_0.devoice(list_0)
    var_14 = module_0.deduplicate(str_1)
    assert var_14 == "(q]I"
    bytes_3 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_15 = module_0.devoice(bytes_3)
    var_16 = module_0.ends_with_vowel(var_15)
    assert var_16 is False
    bytes_4 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_17 = module_0.devoice(bytes_4)
    var_18 = module_0.ends_dentals(var_15)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(var_17)
    assert var_19 is False
    var_20 = module_0.deduplicate(bytes_4)
    assert var_20 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    bytes_5 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_21 = module_0.devoice(bytes_5)
    bytes_6 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_22 = module_0.devoice(bytes_6)
    var_23 = module_0.ends_with_vowel(var_22)
    assert var_23 is False
    var_24 = module_0.ends_dentals(var_22)
    assert var_24 is False
    var_25 = module_0.ends_dentals(var_22)
    assert var_25 is False
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    list_1 = [tuple_1]
    var_26 = module_0.ends_with_vowel(list_1)
    assert var_26 is False
    str_2 = "K3A!V\x0c#87"
    var_27 = module_0.starts_with_vowel(str_2)
    assert var_27 is False
    str_3 = "Kd tt@\x0c9{k:|lpK9"
    var_28 = module_0.ends_with_vowel(str_3)
    assert var_28 is False
    var_29 = module_0.ends_dentals(str_2)
    assert var_29 is False
    bytes_7 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_30 = module_0.ends_dentals(bytes_7)
    assert var_30 is False
    bool_1 = False
    bool_2 = True
    list_2 = [bool_1, bool_1, bool_2, bool_1]
    var_31 = module_0.ends_with_vowel(list_2)
    assert var_31 is False
    module_0.devoice(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    str_0 = "Kd tt@\x0c9{k:|lpK9"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(str_0)
    assert var_1 is False
    bytes_0 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    str_1 = "`<)4H\rS\x0c"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    bytes_1 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_4 = module_0.deduplicate(bytes_1)
    assert var_4 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.ends_with_vowel(bytes_1)
    assert var_6 is False
    var_7 = module_0.ends_with_vowel(var_5)
    assert var_7 is False
    str_2 = "(q]I"
    var_8 = module_0.devoice(str_2)
    var_9 = module_0.devoice(var_8)
    var_10 = module_0.starts_with_vowel(var_9)
    assert var_10 is False
    bytes_2 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_11 = module_0.deduplicate(bytes_2)
    assert var_11 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_12 = module_0.devoice(bytes_2)
    bytes_3 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_13 = module_0.deduplicate(bytes_3)
    assert var_13 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    float_0 = -2001.0
    module_0.ends_dentals(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    complex_0 = -2118.041034 - 1769.966j
    str_0 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_0, complex_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.ends_with_vowel(var_2)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    var_5 = module_0.starts_with_vowel(var_2)
    assert var_5 is False
    var_6 = module_0.starts_with_vowel(var_1)
    assert var_6 is False
    bytes_2 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_2, int_0)
    var_7 = module_0.deduplicate(tuple_0)
    var_8 = module_0.devoice(bytes_2)
    assert var_8 == b"\x87"
    str_2 = "%OJ<'vPCn@4"
    var_9 = module_0.deduplicate(str_2)
    assert var_9 == "%OJ<'vPCn@4"
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_10 = module_0.ends_with_vowel(bytes_3)
    assert var_10 is False
    str_3 = "K3A!V\x0c#87"
    var_11 = module_0.starts_with_vowel(str_3)
    assert var_11 is False
    str_4 = "Kd tt@\x0c9{k:|lpK9"
    var_12 = module_0.ends_with_vowel(str_4)
    assert var_12 is False
    var_13 = module_0.ends_dentals(str_3)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_3)
    assert var_14 is False
    int_1 = 1176
    bool_0 = False
    tuple_1 = (bool_0,)
    tuple_2 = (int_1, tuple_1)
    var_15 = module_0.ends_with_vowel(tuple_2)
    assert var_15 is False
    str_5 = "`<)4H\rS\x0c"
    var_16 = module_0.ends_dentals(str_5)
    assert var_16 is False
    str_6 = "(q]I"
    var_17 = module_0.devoice(str_6)
    var_18 = module_0.devoice(var_17)
    var_19 = module_0.starts_with_vowel(var_18)
    assert var_19 is False
    bytes_4 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.ends_dentals(bytes_4)
    assert var_20 is False
    list_1 = [bytes_4, bytes_4]
    var_21 = module_0.devoice(list_1)
    var_22 = module_0.deduplicate(str_6)
    assert var_22 == "(q]I"
    str_7 = "#iW\rr^3:"
    var_23 = module_0.ends_dentals(str_7)
    assert var_23 is False
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_24 = module_0.ends_with_vowel(bytes_5)
    assert var_24 is False
    module_0.ends_with_vowel(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    str_0 = "\\Z8@Jg"
    var_0 = module_0.ends_with_vowel(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "1X,mBK\\"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "1X,mBK\\"
    var_2 = module_0.ends_dentals(str_1)
    assert var_2 is False
    var_3 = module_0.devoice(str_0)
    assert var_3 == "\\Z8@Jg"
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_4 = module_0.ends_with_vowel(str_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(str_0)
    assert var_5 is False
    dict_0 = {}
    var_6 = module_0.deduplicate(dict_0)
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_7 = module_0.devoice(bytes_0)
    assert var_7 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_8 = module_0.ends_with_vowel(var_7)
    assert var_8 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_9 = module_0.devoice(bytes_1)
    var_10 = module_0.ends_dentals(var_7)
    assert var_10 is False
    var_11 = module_0.ends_with_vowel(bytes_1)
    assert var_11 is False
    str_3 = "`<)4H\rS\x0c"
    var_12 = module_0.ends_dentals(str_3)
    assert var_12 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_13 = module_0.ends_with_vowel(bytes_2)
    assert var_13 is False
    str_4 = "1X,mBK\\"
    var_14 = module_0.devoice(str_4)
    var_15 = module_0.ends_dentals(str_4)
    assert var_15 is False
    var_16 = module_0.devoice(var_14)
    var_17 = module_0.devoice(var_14)
    module_0.deduplicate(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    none_type_0 = None
    module_1.object(*list_1, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    complex_0 = -2118.041034 - 1769.966j
    str_0 = "%OJ<'vPCn@4"
    list_0 = [complex_0, str_0, complex_0]
    var_0 = module_0.ends_dentals(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\x87"
    int_0 = 100
    tuple_0 = (bytes_0, int_0)
    var_1 = module_0.deduplicate(tuple_0)
    var_2 = module_0.devoice(bytes_0)
    assert var_2 == b"\x87"
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_3 = module_0.devoice(bytes_1)
    var_4 = module_0.ends_with_vowel(var_3)
    assert var_4 is False
    str_1 = "%OJ<'vPCn@4"
    var_5 = module_0.deduplicate(str_1)
    assert var_5 == "%OJ<'vPCn@4"
    str_2 = "\\Z8@Jg"
    var_6 = module_0.ends_with_vowel(str_2)
    assert var_6 is False
    var_7 = module_0.devoice(str_2)
    str_3 = "?"
    var_8 = module_0.deduplicate(str_3)
    assert var_8 == "?"
    str_4 = "1X,mBK\\"
    var_9 = module_0.devoice(str_4)
    var_10 = module_0.ends_dentals(str_4)
    assert var_10 is False
    var_11 = module_0.starts_with_vowel(var_9)
    assert var_11 is False
    bytes_2 = b"=\xc4\xb3D\xea8"
    var_12 = module_0.ends_with_vowel(bytes_2)
    assert var_12 is False
    var_13 = module_0.starts_with_vowel(bytes_2)
    assert var_13 is False
    module_0.starts_with_vowel(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.devoice(bytes_1)
    var_6 = module_0.devoice(var_5)
    str_0 = "#iW\rr^3:"
    var_7 = module_0.ends_dentals(str_0)
    assert var_7 is False
    bytes_2 = b"^\xd5\xd00{J"
    var_8 = module_0.deduplicate(bytes_2)
    assert var_8 == b"^\xd5\xd00{J"
    dict_0 = {var_8: var_8, bytes_2: var_8}
    bool_0 = False
    list_0 = [dict_0, var_8, bool_0, bytes_2]
    var_9 = module_0.devoice(list_0)
    var_10 = module_0.devoice(list_0)
    bytes_3 = b"=\xc4\xb3D\xea8"
    var_11 = module_0.ends_with_vowel(bytes_3)
    assert var_11 is False
    str_1 = "1X,mBK\\"
    var_12 = module_0.devoice(str_1)
    var_13 = module_0.ends_dentals(str_1)
    assert var_13 is False
    var_14 = module_0.devoice(var_12)
    str_2 = "Kd tt@\x0c9{k:|lpK9"
    var_15 = module_0.ends_with_vowel(str_2)
    assert var_15 is False
    var_16 = module_0.starts_with_vowel(str_2)
    assert var_16 is False
    bytes_4 = b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    var_17 = module_0.deduplicate(bytes_4)
    assert var_17 == b'\xc4\xa4\x18\xb9\xbc"#\xef\x05pL\xec\xadE\xa6 $\x176\xe9'
    bytes_5 = b"=\xc4\xb3D\xea8"
    var_18 = module_0.ends_with_vowel(bytes_5)
    assert var_18 is False
    var_19 = module_0.ends_with_vowel(bytes_4)
    assert var_19 is False
    bytes_6 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_20 = module_0.devoice(bytes_6)
    bool_1 = False
    dict_1 = {bytes_6: var_20, var_20: bool_1, bool_1: bytes_6}
    var_21 = module_0.starts_with_vowel(dict_1)
    assert var_21 is False
    module_0.ends_with_vowel(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bytes_0 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_with_vowel(var_0)
    assert var_1 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_2 = module_0.devoice(bytes_1)
    var_3 = module_0.starts_with_vowel(var_0)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(var_2)
    assert var_4 is False
    var_5 = module_0.ends_with_vowel(bytes_0)
    assert var_5 is False
    str_0 = "#iW\rr^3:"
    var_6 = module_0.ends_dentals(str_0)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_0)
    assert var_7 is False
    str_1 = "%OJ<'vPCn@4"
    var_8 = module_0.deduplicate(str_1)
    assert var_8 == "%OJ<'vPCn@4"
    var_9 = module_0.ends_with_vowel(str_1)
    assert var_9 is False
    str_2 = "1X,mBK\\"
    var_10 = module_0.devoice(str_2)
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_11 = module_0.devoice(bytes_2)
    var_12 = module_0.ends_with_vowel(var_11)
    assert var_12 is False
    var_13 = module_0.ends_with_vowel(str_2)
    assert var_13 is False
    var_14 = module_0.ends_dentals(bytes_2)
    assert var_14 is False
    bytes_3 = b"\x7fW\xc4QA\xc5\x96\xd4/\x84\x19tdk"
    var_15 = module_0.ends_dentals(bytes_3)
    assert var_15 is False
    str_3 = "1X,mBK\\"
    var_16 = module_0.devoice(str_3)
    var_17 = module_0.devoice(bytes_3)
    module_0.ends_dentals(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    var_0 = module_0.ends_with_vowel(list_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    bytes_0 = b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_1 = module_0.deduplicate(bytes_0)
    assert var_1 == b"\xfe\xcc\xcd9\xfe\xfd\xda\xdfZ\xa4\x80\xee,>6\x86d"
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.ends_with_vowel(var_1)
    assert var_3 is False
    bytes_1 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_4 = module_0.devoice(bytes_1)
    assert var_4 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_5 = module_0.ends_with_vowel(var_4)
    assert var_5 is False
    bytes_2 = b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    var_6 = module_0.devoice(bytes_2)
    var_7 = module_0.starts_with_vowel(var_4)
    assert var_7 is False
    var_8 = module_0.ends_with_vowel(var_6)
    assert var_8 is False
    var_9 = module_0.deduplicate(var_6)
    assert var_9 == b"\x94!}-\x9bD\x89!RR\xc9\xda\x1a\x81\x85\x9e\r\x1aY"
    module_0.ends_with_vowel(var_2)
