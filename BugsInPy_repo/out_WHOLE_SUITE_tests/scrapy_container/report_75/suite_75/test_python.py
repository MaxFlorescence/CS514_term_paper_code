# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import python as module_0
import inspect as module_1
import re as module_2
import ast as module_3
import tokenize as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.unicode_to_str(none_type_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.memoizemethod_noargs(none_type_0)
    with pytest.raises(TypeError):
        module_0.get_func_args(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    var_0 = module_0.iflatten(tuple_0)
    var_1 = module_0.equal_attributes(tuple_0, var_0, var_0)
    assert var_1 is True
    module_0.unicode_to_str(var_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.equal_attributes(none_type_0, none_type_0, none_type_0)
    assert var_0 is False
    with pytest.raises(TypeError):
        module_0.get_spec(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.currentframe()
    var_1 = var_0.__repr__()
    var_2 = module_0.unique(var_1)
    var_0.startswith(var_2)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    var_0 = module_0.equal_attributes(bool_0, bool_0, bool_0)
    assert var_0 is False
    module_0.str_to_unicode(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "z.w"
    var_0 = module_2.template(str_0)
    str_1 = '-ohRC]-m"UKv>=L'
    module_0.flatten(str_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "8aP X,\t>x!FV"
    none_type_0 = None
    var_0 = module_0.is_writable(str_0)
    var_1 = module_0.equal_attributes(none_type_0, str_0, str_0)
    assert var_1 is False
    module_0.is_writable(var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "8aP X,\t>x!FV"
    none_type_0 = None
    var_0 = module_0.is_writable(str_0)
    var_1 = module_0.equal_attributes(none_type_0, str_0, str_0)
    assert var_1 is False
    module_0.is_writable(var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.unicode_to_str(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "8ahP X6\t>x!FV"
    none_type_0 = None
    var_0 = module_0.equal_attributes(none_type_0, str_0, str_0)
    assert var_0 is False
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = module_0.memoizemethod_noargs(str_0)
    module_0.str_to_unicode(str_0, errors=var_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    weak_key_cache_0 = module_0.WeakKeyCache(none_type_0)
    weak_key_cache_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    var_0 = module_0.stringify_dict(dict_0, dict_0)
    floor_div_0 = module_3.FloorDiv(**var_0)
    var_0.__delitem__(dict_0)


def test_case_13():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.isbinarytext(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "l3QIO_M,+sV\rHM&?"
    dict_0 = {str_0: str_0}
    module_0.stringify_dict(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    module_0.retry_on_eintr(none_type_0)


def test_case_16():
    none_type_0 = None
    var_0 = module_1.formatannotationrelativeto(none_type_0)
    var_1 = module_0.get_spec(var_0)
    var_2 = var_0.__str__()
    var_3 = module_0.get_func_args(var_0, var_0)
    with pytest.raises(TypeError):
        module_0.get_spec(var_2)


def test_case_17():
    none_type_0 = None
    var_0 = module_1.formatannotationrelativeto(none_type_0)
    var_1 = module_0.get_spec(var_0)
    var_2 = var_0.__str__()
    var_3 = module_0.get_func_args(var_0, var_0)
    with pytest.raises(TypeError):
        module_0.get_spec(var_2)


@pytest.mark.xfail(strict=True)
def test_case_18():
    expression_0 = module_3.Expression()
    none_type_0 = None
    module_0.retry_on_eintr(none_type_0)


def test_case_19():
    str_0 = "\nz?"
    var_0 = module_0.isbinarytext(str_0)
    assert var_0 is False
    str_1 = "6 \ni\x0b*{c*Vti:2@"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    bit_and_0 = module_3.BitAnd(**dict_0)
    with pytest.raises(TypeError):
        module_0.get_func_args(bit_and_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    var_0 = module_4.maybe()
    module_0.setattr_default(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    var_0 = module_4.maybe()
    module_0.setattr_default(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    var_0 = module_0.memoizemethod_noargs(none_type_0)
    var_0.__call__(none_type_0, none_type_0, module=var_0, qualname=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    var_0 = module_0.memoizemethod_noargs(none_type_0)
    var_1 = module_0.get_func_args(var_0)
    module_0.re_rsearch(var_1, var_0, var_1)


def test_case_24():
    bytes_0 = b"\xbcU\xfb:\xd2\xe3:\xc0"
    var_0 = module_0.flatten(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_1.currentframe()
    module_0.unicode_to_str(var_0, var_0)
