# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import link as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    link_0 = module_0.Link(none_type_0, fragment=none_type_0, nofollow=none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__repr__()
    assert var_0 == "Link(url=None, text='', fragment=None, nofollow=None)"
    link_1 = module_0.Link(var_0, none_type_0)
    assert f"{type(link_1).__module__}.{type(link_1).__qualname__}" == "link.Link"
    link_2 = module_0.Link(var_0, nofollow=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    object_0 = module_1.object()
    link_0 = module_0.Link(object_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    link_1 = module_0.Link(object_0, object_0)
    var_0 = link_0.__eq__(link_1)
    assert var_0 is False
    link_1.__eq__(object_0)


def test_case_2():
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 477042
    var_1 = var_0.__hash__()
    assert var_1 == 477042
    var_2 = var_1.__hash__()
    assert var_2 == 477042
    var_3 = var_2.__hash__()
    assert var_3 == 477042
    var_4 = var_3.__hash__()
    assert var_4 == 477042
    var_5 = var_4.__hash__()
    assert var_5 == 477042
    link_1 = module_0.Link(none_type_0, none_type_0, nofollow=none_type_0)
    float_0 = -1015.95635
    none_type_1 = None
    link_2 = module_0.Link(none_type_1, none_type_1)
    var_6 = link_2.__repr__()
    assert var_6 == "Link(url=None, text=None, fragment='', nofollow=False)"
    var_7 = var_6.__eq__(float_0)
    var_8 = var_7.__hash__()
    var_9 = var_8.__repr__()
    none_type_2 = None
    link_3 = module_0.Link(none_type_2, none_type_2, none_type_2)
    var_10 = link_3.__repr__()
    var_11 = link_3.__eq__(link_3)
    assert var_11 is True
    var_12 = link_3.__repr__()
    var_13 = link_3.__hash__()
    assert var_13 == 477042
    var_14 = var_9.__repr__()
    var_15 = var_2.__hash__()
    assert var_15 == 477042
    var_16 = var_12.__repr__()
    var_17 = link_3.__hash__()
    assert var_17 == 477042


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -3324
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    link_0 = module_0.Link(bool_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    link_0.__eq__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "!a_lY':"
    link_0 = module_0.Link(str_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 4568114602473342222
    var_1 = var_0.__repr__()
    assert var_1 == "4568114602473342222"
    var_2 = link_0.__repr__()
    assert var_2 == "Link(url=b\"!a_lY':\", text='', fragment='', nofollow=False)"
    link_0.__eq__(str_0)


def test_case_5():
    tuple_0 = ()
    link_0 = module_0.Link(tuple_0, tuple_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    int_0 = -565
    link_1 = module_0.Link(int_0, int_0, none_type_0, link_0)
    var_0 = link_1.__repr__()
    assert (
        var_0
        == "Link(url=-565, text=-565, fragment=None, nofollow=Link(url=(), text=(), fragment='', nofollow=False))"
    )
    var_1 = link_0.__hash__()
    assert var_1 == 0
    var_2 = link_0.__hash__()
    assert var_2 == 0
    var_3 = link_1.__hash__()
    assert var_3 == 477042
    var_4 = var_2.__eq__(int_0)
    link_2 = module_0.Link(var_2, nofollow=link_0)
    var_5 = link_1.__eq__(link_0)
    assert var_5 is False
    var_6 = link_0.__hash__()
    assert var_6 == 0
    link_3 = module_0.Link(var_2, nofollow=var_2)
    var_7 = var_5.__repr__()
    var_8 = var_5.__hash__()
    link_4 = module_0.Link(var_8, var_8, var_5)
    link_5 = module_0.Link(var_5, link_2)
    var_9 = var_8.__eq__(var_5)
    var_10 = link_2.__hash__()
    assert var_10 == 0
    var_11 = var_9.__repr__()
    var_12 = link_4.__hash__()
    link_6 = module_0.Link(var_4)
    var_13 = var_3.__hash__()
    assert var_13 == 477042
    var_14 = link_4.__repr__()
    var_15 = var_5.__hash__()
    var_16 = var_12.__repr__()
    var_17 = var_16.__repr__()
    link_7 = module_0.Link(var_0, nofollow=var_6)
    assert f"{type(link_7).__module__}.{type(link_7).__qualname__}" == "link.Link"
    var_18 = var_17.__eq__(none_type_0)
    var_19 = var_18.__hash__()
    var_20 = var_6.__repr__()
    assert var_20 == "0"


def test_case_6():
    none_type_0 = None
    link_0 = module_0.Link(none_type_0, nofollow=none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"https"
    none_type_0 = None
    var_0 = bytes_0.__eq__(bytes_0)
    var_1 = var_0.__eq__(bytes_0)
    var_2 = var_1.__eq__(none_type_0)
    var_3 = var_2.__hash__()
    object_0 = module_1.object()
    var_4 = var_2.__hash__()
    var_5 = var_2.__repr__()
    none_type_1 = None
    link_0 = module_0.Link(bytes_0, none_type_1)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    int_0 = 4
    int_1 = -2923
    link_0 = module_0.Link(int_1)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == -2923
    var_1 = var_0.__eq__(int_0)
    var_2 = var_1.__eq__(bool_1)
    var_3 = var_2.__eq__(bool_0)
    var_4 = var_3.__eq__(none_type_0)
    var_5 = var_1.__eq__(var_3)
    var_6 = var_4.__repr__()
    none_type_1 = None
    link_1 = module_0.Link(none_type_1, nofollow=none_type_1)
    complex_0 = -320.5 + 1912.651816j
    var_7 = link_1.__eq__(link_1)
    assert var_7 is True
    link_2 = module_0.Link(complex_0, fragment=complex_0)
    var_8 = var_4.__repr__()
    link_2.__eq__(none_type_0)


def test_case_9():
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 477042
    var_1 = var_0.__repr__()
    assert var_1 == "477042"
    str_0 = "q"
    link_1 = module_0.Link(str_0, fragment=str_0)
    assert f"{type(link_1).__module__}.{type(link_1).__qualname__}" == "link.Link"
    var_2 = link_1.__hash__()
    assert var_2 == 0
    var_3 = var_2.__hash__()
    assert var_3 == 0
    link_2 = module_0.Link(str_0)
    var_4 = link_2.__hash__()
    assert var_4 == -5471538254688247604
    bool_0 = True
    var_5 = link_1.__eq__(link_2)
    assert var_5 is False
    link_3 = module_0.Link(bool_0)
    var_6 = link_3.__hash__()
    assert var_6 == 1
    var_7 = var_6.__hash__()
    assert var_7 == 1
    var_8 = var_7.__hash__()
    assert var_8 == 1
    var_9 = var_8.__repr__()
    assert var_9 == "1"
    var_10 = var_8.__repr__()
    assert var_10 == "1"
    link_4 = module_0.Link(str_0, fragment=str_0)
    link_5 = module_0.Link(bool_0)
    var_11 = link_5.__hash__()
    assert var_11 == 1
    var_12 = var_11.__hash__()
    assert var_12 == 1
    var_13 = var_12.__eq__(str_0)
    var_14 = var_11.__hash__()
    assert var_14 == 1
    var_15 = var_13.__hash__()
    var_16 = var_15.__hash__()
    var_17 = var_16.__repr__()
    var_18 = var_15.__repr__()
    var_19 = var_17.__hash__()
    link_6 = module_0.Link(var_19)
    link_7 = module_0.Link(var_12)
