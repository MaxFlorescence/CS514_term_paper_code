# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import python as module_0
import inspect as module_1
import tokenize as module_2
import re as module_3
import ast as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "e/|+!40XQR0p%GYM"
    module_0.flatten(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.stack()
    module_0.flatten(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xec\x89\xfb*\xe5gr\xb4\xb8@\xe0V(z\xfa\x88\xe3\xa5\x92"
    var_0 = module_0.flatten(bytes_0)
    list_0 = [var_0, var_0, bytes_0, var_0, bytes_0]
    var_1 = module_0.flatten(list_0)
    var_0.__delitem__(var_0)


def test_case_3():
    str_0 = ""
    var_0 = module_0.flatten(str_0)


def test_case_4():
    str_0 = "3\nqXjEg9Fx+Xb_lIJ@HW"
    var_0 = module_0.unique(str_0)


def test_case_5():
    str_0 = "%4*'a)GcybeV.!"
    var_0 = module_0.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "a>9193GKAp+FYT"
    var_0 = module_0.unique(str_0)
    var_0.update(var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_2.any()
    module_0.str_to_unicode(var_0, errors=var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.str_to_unicode(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = -1635.535 - 251j
    module_0.str_to_unicode(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_0.unicode_to_str(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "`3=R_m!Gu0rr"
    module_0.unicode_to_str(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    var_0 = module_0.memoizemethod_noargs(regex_flag_0)
    var_0.__call__(var_0, regex_flag_0, type=regex_flag_0)


def test_case_13():
    str_0 = "e1;?ww9Zr-p"
    var_0 = module_0.isbinarytext(str_0)
    assert var_0 is False


def test_case_14():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.isbinarytext(none_type_0)


def test_case_15():
    str_0 = "e/|+!40rQR0p%GYM"
    with pytest.raises(TypeError):
        module_0.get_func_args(str_0, str_0)


def test_case_16():
    int_0 = 111
    var_0 = module_0.memoizemethod_noargs(int_0)
    var_1 = module_0.get_func_args(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_1.currentframe()
    var_1 = module_0.memoizemethod_noargs(var_0)
    var_2 = module_0.get_func_args(var_1)
    module_0.setattr_default(var_0, var_0, var_0)


def test_case_18():
    none_type_0 = None
    var_0 = module_1.formatannotationrelativeto(none_type_0)
    var_1 = module_0.get_spec(var_0)


def test_case_19():
    complex_0 = 1214.68637 - 1366.4005967587188j
    with pytest.raises(TypeError):
        module_0.get_spec(complex_0)


def test_case_20():
    str_0 = "ab|93G^ptYYf"
    var_0 = module_0.equal_attributes(str_0, str_0, str_0)
    assert var_0 is False


def test_case_21():
    str_0 = "5w/\r,\nTraMqu\n4X0"
    dict_0 = {str_0: str_0}
    slice_0 = module_4.Slice(**dict_0)
    var_0 = module_0.equal_attributes(slice_0, dict_0, dict_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_22():
    set_0 = set()
    var_0 = module_0.stringify_dict(set_0, set_0)
    var_1 = module_0.iflatten(var_0)
    var_2 = module_0.equal_attributes(var_1, var_0, var_1)
    assert var_2 is True
    none_type_0 = None
    module_0.re_rsearch(none_type_0, none_type_0)


def test_case_23():
    none_type_0 = None
    var_0 = module_0.equal_attributes(none_type_0, none_type_0, none_type_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    weak_key_cache_0 = module_0.WeakKeyCache(none_type_0)
    module_0.flatten(weak_key_cache_0)


def test_case_25():
    str_0 = ""
    var_0 = module_0.stringify_dict(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    regex_flag_0 = module_3.RegexFlag.TEMPLATE
    module_0.is_writable(regex_flag_0)


def test_case_27():
    var_0 = module_2.any()
    var_1 = module_0.is_writable(var_0)
    str_0 = ""
    var_2 = module_0.stringify_dict(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = ""
    module_0.setattr_default(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "a>b93GKAp+FYT"
    module_0.retry_on_eintr(str_0, *str_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    untokenizer_0 = module_2.Untokenizer()
    module_0.is_writable(untokenizer_0)


def test_case_31():
    bool_0 = True
    var_0 = module_0.memoizemethod_noargs(bool_0)


def test_case_32():
    none_type_0 = None
    weak_key_cache_0 = module_0.WeakKeyCache(none_type_0)
