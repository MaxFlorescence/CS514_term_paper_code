# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import token as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    var_0 = module_0.ISTERMINAL(bool_0)
    assert var_0 is True
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISEOF(bool_0)
    assert var_1 is False
    var_2 = module_0.ISNONTERMINAL(bool_0)
    assert var_2 is False
    var_3 = module_0.ISTERMINAL(bool_0)
    assert var_3 is True
    var_4 = module_0.ISNONTERMINAL(var_3)
    assert var_4 is False
    var_5 = module_0.ISEOF(var_1)
    var_6 = module_0.ISNONTERMINAL(bool_0)
    assert var_6 is False
    int_0 = -1751
    var_7 = module_0.ISEOF(int_0)
    assert var_7 is False
    var_8 = module_0.ISEOF(var_6)
    assert var_8 is True
    var_9 = module_0.ISEOF(var_1)
    bytes_0 = b"\x15"
    module_0.ISNONTERMINAL(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    module_0.ISTERMINAL(str_0)


def test_case_2():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.ISEOF(none_type_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISNONTERMINAL(var_0)
    assert var_1 is False
    var_2 = module_0.ISEOF(var_0)
    assert var_2 is True
    var_3 = module_0.ISNONTERMINAL(var_1)
    assert var_3 is False
    var_4 = module_0.ISNONTERMINAL(var_1)
    assert var_4 is False
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "{:b3"
    object_0 = module_1.object()
    module_0.ISTERMINAL(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"d"
    module_0.ISNONTERMINAL(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.ISNONTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is True
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    none_type_0 = None
    var_1 = module_0.ISEOF(none_type_0)
    assert var_1 is False
    module_0.ISNONTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "9R|~e'>sDC\t\r<c\x0cThH"
    str_1 = "CjhTY\\'^rt92!<@%*"
    set_0 = {str_0, str_1, str_1}
    tuple_0 = (str_0, str_1, set_0, str_0)
    module_0.ISTERMINAL(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 1393
    var_0 = module_0.ISTERMINAL(int_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    int_1 = -318
    var_1 = module_0.ISTERMINAL(int_1)
    assert var_1 is True
    var_2 = module_0.ISEOF(var_1)
    assert var_2 is False
    var_3 = module_0.ISTERMINAL(int_0)
    assert var_3 is False
    var_4 = module_0.ISTERMINAL(int_0)
    assert var_4 is False
    none_type_0 = None
    var_5 = module_0.ISEOF(none_type_0)
    assert var_5 is False
    var_6 = module_0.ISNONTERMINAL(var_1)
    assert var_6 is False
    var_7 = module_0.ISEOF(int_1)
    assert var_7 is False
    var_8 = module_0.ISEOF(int_1)
    assert var_8 is False
    bytes_0 = b"\xd8}\xd1)\xf0\x04\x19H\x11Z\x90\xc2\x99h."
    var_9 = module_0.ISTERMINAL(var_4)
    assert var_9 is True
    var_10 = module_0.ISNONTERMINAL(int_1)
    assert var_10 is False
    var_11 = module_0.ISEOF(var_0)
    assert var_11 is True
    list_0 = []
    var_12 = module_0.ISEOF(var_0)
    assert var_12 is True
    var_13 = module_0.ISEOF(list_0)
    assert var_13 is False
    module_0.ISTERMINAL(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    var_0 = module_0.ISTERMINAL(bool_0)
    assert var_0 is True
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISNONTERMINAL(bool_0)
    assert var_1 is False
    var_2 = module_0.ISNONTERMINAL(var_1)
    assert var_2 is False
    var_3 = module_0.ISNONTERMINAL(var_0)
    assert var_3 is False
    var_4 = module_0.ISEOF(var_1)
    assert var_4 is True
    var_5 = module_0.ISEOF(var_0)
    assert var_5 is False
    var_6 = module_0.ISEOF(var_4)
    assert var_6 is False
    var_7 = module_0.ISTERMINAL(var_3)
    assert var_7 is True
    var_8 = module_0.ISEOF(bool_0)
    assert var_8 is True
    var_9 = module_0.ISTERMINAL(var_2)
    assert var_9 is True
    var_10 = module_0.ISEOF(var_0)
    assert var_10 is False
    bool_1 = True
    var_11 = module_0.ISEOF(bool_1)
    assert var_11 is False
    set_0 = {var_11}
    module_0.ISNONTERMINAL(set_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b"\x0e\xa0\xf4!\xd8}\x7f\xf9\x8e\xe3"
    module_0.ISTERMINAL(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b""
    var_0 = module_0.ISEOF(bytes_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISTERMINAL(var_0)
    assert var_1 is True
    none_type_0 = None
    module_0.ISTERMINAL(none_type_0)


def test_case_14():
    none_type_0 = None
    var_0 = module_0.ISEOF(none_type_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }


def test_case_15():
    object_0 = module_1.object()
    var_0 = module_0.ISEOF(object_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    float_0 = -453.11771
    var_1 = module_0.ISTERMINAL(var_0)
    assert var_1 is True
    var_2 = module_0.ISNONTERMINAL(var_1)
    assert var_2 is False
    int_0 = -975
    var_3 = module_0.ISTERMINAL(float_0)
    assert var_3 is True
    var_4 = module_0.ISNONTERMINAL(int_0)
    assert var_4 is False
    var_5 = module_0.ISNONTERMINAL(var_3)
    assert var_5 is False
    var_6 = module_0.ISNONTERMINAL(float_0)
    assert var_6 is False
    var_7 = module_0.ISNONTERMINAL(var_3)
    assert var_7 is False
    tuple_0 = (float_0, int_0, int_0)
    var_8 = module_0.ISEOF(tuple_0)
    assert var_8 is False


def test_case_16():
    pass


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    tuple_0 = ()
    module_0.ISNONTERMINAL(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.ISTERMINAL(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    bool_1 = True
    var_1 = module_0.ISNONTERMINAL(var_0)
    assert var_1 is False
    var_2 = module_0.ISTERMINAL(bool_1)
    assert var_2 is True
    var_3 = module_0.ISNONTERMINAL(bool_1)
    assert var_3 is False
    var_4 = module_0.ISNONTERMINAL(var_0)
    assert var_4 is False
    var_5 = module_0.ISTERMINAL(bool_1)
    assert var_5 is True
    var_6 = module_0.ISNONTERMINAL(var_2)
    assert var_6 is False
    var_7 = module_0.ISNONTERMINAL(bool_0)
    assert var_7 is False
    var_8 = module_0.ISNONTERMINAL(var_1)
    assert var_8 is False
    float_0 = -1981.2
    var_9 = module_0.ISEOF(float_0)
    assert var_9 is False
    var_10 = module_0.ISEOF(var_7)
    assert var_10 is True
    var_11 = module_0.ISEOF(var_7)
    assert var_11 is True
    none_type_0 = None
    module_0.ISNONTERMINAL(none_type_0)


def test_case_21():
    pass


@pytest.mark.xfail(strict=True)
def test_case_22():
    tuple_0 = ()
    var_0 = module_0.ISEOF(tuple_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISEOF(tuple_0)
    assert var_1 is False
    var_2 = module_0.ISEOF(tuple_0)
    assert var_2 is False
    var_3 = module_0.ISEOF(var_0)
    assert var_3 is True
    var_4 = module_0.ISEOF(var_0)
    assert var_4 is True
    module_0.ISTERMINAL(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = " }w+!"
    module_0.ISNONTERMINAL(str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    int_0 = 3672
    set_0 = {int_0}
    module_0.ISTERMINAL(set_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    module_0.ISNONTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    set_0 = set()
    module_0.ISTERMINAL(set_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b""
    module_0.ISTERMINAL(bytes_0)


def test_case_29():
    pass


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "b29=qm;\x0c%"
    var_0 = module_0.ISEOF(str_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    module_0.ISNONTERMINAL(str_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    float_0 = 2716.169
    list_0 = [float_0, float_0]
    module_0.ISTERMINAL(list_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    bool_0 = True
    var_0 = module_0.ISTERMINAL(bool_0)
    assert var_0 is True
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    none_type_0 = None
    float_0 = -1196.37869
    var_1 = module_0.ISNONTERMINAL(float_0)
    assert var_1 is False
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    float_0 = -272.54446
    none_type_0 = None
    var_0 = module_0.ISEOF(none_type_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISNONTERMINAL(float_0)
    assert var_1 is False
    set_0 = {var_1, float_0, float_0}
    bool_0 = False
    var_2 = module_0.ISEOF(set_0)
    assert var_2 is False
    var_3 = module_0.ISNONTERMINAL(bool_0)
    assert var_3 is False
    module_0.ISNONTERMINAL(set_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    module_0.ISNONTERMINAL(none_type_0)


def test_case_36():
    bool_0 = True
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    int_0 = -2382
    var_1 = module_0.ISNONTERMINAL(int_0)
    assert var_1 is False
    var_2 = module_0.ISEOF(int_0)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = True
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISTERMINAL(var_0)
    assert var_1 is True
    var_2 = module_0.ISEOF(var_1)
    assert var_2 is False
    bool_1 = False
    var_3 = module_0.ISNONTERMINAL(bool_0)
    assert var_3 is False
    set_0 = {bool_1, bool_1, bool_1}
    module_0.ISNONTERMINAL(set_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    module_0.ISNONTERMINAL(none_type_0)


def test_case_39():
    int_0 = 2728
    var_0 = module_0.ISEOF(int_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    var_1 = module_0.ISTERMINAL(var_0)
    assert var_1 is True
    dict_0 = {var_0: int_0, var_0: var_0}
    var_2 = module_0.ISEOF(var_0)
    assert var_2 is True
    var_3 = module_0.ISTERMINAL(int_0)
    assert var_3 is False
    bool_0 = True
    var_4 = module_0.ISTERMINAL(bool_0)
    assert var_4 is True
    var_5 = module_0.ISEOF(dict_0)
    assert var_5 is False
    var_6 = module_0.ISEOF(var_0)
    assert var_6 is True
    var_7 = module_0.ISEOF(var_0)
    assert var_7 is True
    var_8 = module_0.ISEOF(var_6)
    assert var_8 is False


def test_case_40():
    bool_0 = True
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }


@pytest.mark.xfail(strict=True)
def test_case_41():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.ISTERMINAL(bool_0)
    assert var_0 is True
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    module_0.ISNONTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bytes_0 = b"\xb3Bz \x17\xbc\xf2>T\xe2'\xd7\xdaW\x01"
    bytes_1 = b"\x9e{\xc5\xcb-\x7f\xe3\x85\xb8\x85"
    complex_0 = -2641.855987 - 274j
    tuple_0 = (bytes_0, bytes_1, complex_0)
    var_0 = module_0.ISEOF(tuple_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    int_0 = 1355
    var_1 = module_0.ISNONTERMINAL(int_0)
    assert var_1 is True
    list_0 = []
    var_2 = module_0.ISNONTERMINAL(var_1)
    assert var_2 is False
    var_3 = module_0.ISTERMINAL(var_1)
    assert var_3 is True
    module_0.ISTERMINAL(list_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    int_0 = 683
    var_0 = module_0.ISEOF(int_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    set_0 = {var_0, var_0}
    list_0 = [int_0, int_0, set_0, int_0]
    module_0.ISNONTERMINAL(list_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    complex_0 = -3337.5289 - 1910.960095j
    module_0.ISNONTERMINAL(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bytes_0 = b"#\x156\xf9"
    var_0 = module_0.ISEOF(bytes_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    bool_0 = False
    list_0 = [bool_0]
    module_0.ISTERMINAL(list_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"J\xf0\xee\x98\xc3\x9a%\xc1\x89\xac["
    var_0 = module_0.ISEOF(bool_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    tuple_0 = (list_0, bool_0, bytes_0, var_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.ISTERMINAL(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_47():
    none_type_0 = None
    module_0.ISTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    complex_0 = -3682.6 + 360.545j
    var_0 = module_0.ISEOF(complex_0)
    assert var_0 is False
    assert module_0.ENDMARKER == 0
    assert module_0.NAME == 1
    assert module_0.NUMBER == 2
    assert module_0.STRING == 3
    assert module_0.NEWLINE == 4
    assert module_0.INDENT == 5
    assert module_0.DEDENT == 6
    assert module_0.LPAR == 7
    assert module_0.RPAR == 8
    assert module_0.LSQB == 9
    assert module_0.RSQB == 10
    assert module_0.COLON == 11
    assert module_0.COMMA == 12
    assert module_0.SEMI == 13
    assert module_0.PLUS == 14
    assert module_0.MINUS == 15
    assert module_0.STAR == 16
    assert module_0.SLASH == 17
    assert module_0.VBAR == 18
    assert module_0.AMPER == 19
    assert module_0.LESS == 20
    assert module_0.GREATER == 21
    assert module_0.EQUAL == 22
    assert module_0.DOT == 23
    assert module_0.PERCENT == 24
    assert module_0.LBRACE == 25
    assert module_0.RBRACE == 26
    assert module_0.EQEQUAL == 27
    assert module_0.NOTEQUAL == 28
    assert module_0.LESSEQUAL == 29
    assert module_0.GREATEREQUAL == 30
    assert module_0.TILDE == 31
    assert module_0.CIRCUMFLEX == 32
    assert module_0.LEFTSHIFT == 33
    assert module_0.RIGHTSHIFT == 34
    assert module_0.DOUBLESTAR == 35
    assert module_0.PLUSEQUAL == 36
    assert module_0.MINEQUAL == 37
    assert module_0.STAREQUAL == 38
    assert module_0.SLASHEQUAL == 39
    assert module_0.PERCENTEQUAL == 40
    assert module_0.AMPEREQUAL == 41
    assert module_0.VBAREQUAL == 42
    assert module_0.CIRCUMFLEXEQUAL == 43
    assert module_0.LEFTSHIFTEQUAL == 44
    assert module_0.RIGHTSHIFTEQUAL == 45
    assert module_0.DOUBLESTAREQUAL == 46
    assert module_0.DOUBLESLASH == 47
    assert module_0.DOUBLESLASHEQUAL == 48
    assert module_0.AT == 49
    assert module_0.ATEQUAL == 50
    assert module_0.RARROW == 51
    assert module_0.ELLIPSIS == 52
    assert module_0.COLONEQUAL == 53
    assert module_0.OP == 54
    assert module_0.AWAIT == 55
    assert module_0.ASYNC == 56
    assert module_0.TYPE_IGNORE == 57
    assert module_0.TYPE_COMMENT == 58
    assert module_0.SOFT_KEYWORD == 59
    assert module_0.ERRORTOKEN == 60
    assert module_0.COMMENT == 61
    assert module_0.NL == 62
    assert module_0.ENCODING == 63
    assert module_0.N_TOKENS == 64
    assert module_0.NT_OFFSET == 256
    assert module_0.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_0.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    none_type_0 = None
    var_1 = module_0.ISEOF(none_type_0)
    assert var_1 is False
    var_2 = module_0.ISEOF(none_type_0)
    assert var_2 is False
    var_3 = module_0.ISNONTERMINAL(var_2)
    assert var_3 is False
    var_4 = module_0.ISNONTERMINAL(var_3)
    assert var_4 is False
    var_5 = module_0.ISEOF(none_type_0)
    assert var_5 is False
    var_6 = module_0.ISEOF(none_type_0)
    assert var_6 is False
    var_7 = module_0.ISNONTERMINAL(var_6)
    assert var_7 is False
    var_8 = module_0.ISNONTERMINAL(var_5)
    assert var_8 is False
    var_9 = module_0.ISEOF(var_2)
    assert var_9 is True
    var_10 = module_0.ISNONTERMINAL(var_3)
    assert var_10 is False
    module_0.ISNONTERMINAL(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    none_type_0 = None
    module_0.ISNONTERMINAL(none_type_0)
