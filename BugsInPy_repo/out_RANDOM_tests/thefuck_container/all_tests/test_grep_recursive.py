# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import grep_recursive as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 3836
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 338
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\x9fS\xc2\x1aq\x998h\x8e\xea0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -555
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    bytes_0 = b"\x06\x1b\xaa\xd2F"
    set_0 = {bool_0, bytes_0}
    list_0 = [set_0, set_0]
    float_0 = -202.0
    tuple_0 = (set_0, list_0, float_0)
    list_1 = [tuple_0]
    tuple_1 = (list_1, set_0)
    str_0 = "#Qh}Jws8o7GgU"
    tuple_2 = (tuple_1, str_0)
    module_0.get_new_command(tuple_2, tuple_0)


def test_case_7():
    pass


@pytest.mark.xfail(strict=True)
def test_case_8():
    complex_0 = -556.436036 - 1320.7548j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    complex_0 = 1802.185493 + 104.89j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "Jtjb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    float_0 = 3128.7723
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -2150
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "Yq@"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "}["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = -2521
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "pb7"
    module_0.match(str_0, str_0)


def test_case_24():
    pass


@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b"=W\x8e\xd1;gb\xa4\xbd\xd3\xd4\xd2\x03"
    list_0 = []
    tuple_0 = (bytes_0, list_0, bytes_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = 457
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "wf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    complex_0 = 1620.47365 - 1613.192j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b"\x8d\xab\x9c\x9by\t\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    float_0 = -1526.80878
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "JNpN1wY}>c "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = ">K}fKm1w~{#O)m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "=:56h?LpS-`+anh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    bytes_0 = b"\x1a\xc3\xc1\x8b\n\x14\xe1\x98\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    complex_0 = -474.8 + 2300.853j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "!\x0c'<\x0c]IE"
    list_0 = [str_0]
    int_0 = -2568
    complex_0 = 3455.8 - 1166.9j
    list_1 = [list_0, int_0, int_0, complex_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_43():
    int_0 = -688
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    int_0 = -742
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "Oxx'F?V\x0bwW\x0ct"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = 686
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    int_0 = -2202
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    int_0 = 102
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    complex_0 = 1961.7967 + 2385.7661j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    float_0 = 6655.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b"\x06\xa7["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bytes_0 = b"3\x1d\xadyzp\xf4\xa8Jp(\x1ew5n\x05D\xa3\xe6\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    bytes_0 = b"\xfcj\xd0T8\xda\xdeaj\xb8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    bytes_0 = b"C9'\x90i*5<\xc8\n\x93\xbb~\xa2\x97\x06"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    str_0 = "?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    str_0 = "GcT2WS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bytes_0 = b"\xbe{\xc45\xf6\x11\xf6:N2s\x12\xe5\x1d\xe3X"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = "TP2r8UN"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = "B+aF Ff6<G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    bytes_0 = b"\xb7HC\xaa\xc4\xc9\x99use\r"
    float_0 = -128.7071
    set_0 = {bytes_0, bytes_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    int_0 = -334
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    tuple_0 = ()
    complex_0 = -3053.33 - 1205.546j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    bool_0 = False
    int_0 = -352
    list_0 = [bool_0, bool_0, bool_0, int_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    int_0 = 2764
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    bool_0 = True
    str_0 = ""
    list_0 = [bool_0]
    tuple_0 = (list_0, list_0, str_0)
    tuple_1 = (bool_0, str_0, bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    complex_0 = -1775.9296 - 1539.79408j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    str_0 = 'R"#I/D|X/E,z(p'
    bytes_0 = b"Z\x84\xa9\xb8\x08w\xe8\xc8sS"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    bytes_0 = b"BU\xc8>7ox\x85\x08b\xd1r"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_88():
    pass


@pytest.mark.xfail(strict=True)
def test_case_89():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    int_0 = 2126
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    complex_0 = -3105.92 + 432.40753j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    int_0 = -830
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (int_0, bool_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_95():
    pass


@pytest.mark.xfail(strict=True)
def test_case_96():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    str_0 = "ec"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = 1665
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    int_0 = -407
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    str_0 = "oqo0|8"
    bool_0 = False
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    none_type_0 = None
    str_0 = "d"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bytes_0 = b"\x19N30"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    str_0 = "\t+(^-0"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bytes_0 = b"\xdc-wY\xe5\"\x16\xfc\xa9H\xc4m'\xbe\xa4"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_109():
    complex_0 = 1090.68548 - 305j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "IT\x0cY{?b~u"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: str_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    str_0 = "nq\n+d0MWyMH}x`x="
    str_1 = "BmN<ylfh\x0b"
    set_0 = {str_0, str_1}
    tuple_0 = (str_0, str_1, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_115():
    float_0 = -871.45
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    bytes_0 = b"r\xb2zavy\xf4"
    module_0.match(bytes_0, bytes_0)


def test_case_118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_119():
    int_0 = -3171
    str_0 = "E'f\t'?I\\rQ\x0c$<X"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: str_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    complex_0 = 2055.307 + 3651.46124j
    str_0 = "}cnM1p4?O>AZGEbyBX3p"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bytes_0 = b"\xe2\xb2\x08O\xbaW\xf5\xa3\xe0\x0bn\xb02b\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    int_0 = -1127
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"\xa1x\xde\x10U]b\x07\x11\xf2\xfeA"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    str_0 = "t*("
    bool_0 = False
    dict_0 = {str_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    str_0 = "%*|}NJk"
    none_type_0 = None
    str_1 = "=2Xf$ZsZ"
    str_2 = ""
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    str_0 = "BHz\n72iyP\t\tpo;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    int_0 = -3123
    set_0 = {int_0}
    list_0 = [set_0, int_0, set_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    float_0 = 341.813
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    bytes_0 = b"\xb7\xfd\xc1\xd1\xa9Yk)\xbb\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bytes_0 = b"\xb1\\\xfe\xff"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    float_0 = 2234.9456
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bool_0 = False
    bool_1 = True
    bytes_0 = b"\xcc?\x99"
    tuple_0 = (bool_0, bool_1, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    set_0 = set()
    float_0 = 4556.573272
    int_0 = 32
    dict_0 = {float_0: int_0, float_0: int_0, float_0: int_0, float_0: int_0}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    int_0 = 4043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    str_0 = "Bv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bytes_0 = b"\xc5\x80=l\xf3&.\x85}\n\xdf"
    bytes_1 = b"\xf76\xc2\xff<^\x88\xce\xcc@\xa7\xc4\x90\x15vw"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_1, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    complex_0 = 1165 - 533j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = 256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    int_0 = -5445
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [bool_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    bytes_0 = b"Ay*dl \x98\xf8\xdd~\x99\xcf\t\xdac\xef"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    str_0 = "J#Q\\J,9YiH?f%uD"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    complex_0 = -1564 + 503.23j
    str_0 = '0h("a8Fk[\tr&d\rp'
    set_0 = set()
    bool_0 = False
    tuple_0 = (str_0, set_0, str_0, bool_0)
    list_0 = [complex_0, tuple_0, set_0, tuple_0]
    tuple_1 = (complex_0, tuple_0, list_0, bool_0)
    module_0.match(complex_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = "L:n]uK|D&\t`5UdJqMO]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    int_0 = -754
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    bytes_0 = b"E\xaeD\x82\xd7\xd3\xb1\xf9pn\xfe\xbf-I\x8fj\x02\x02\x06\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bytes_0 = b"qc\x7f/~\xab\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    float_0 = -143.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    str_0 = "40Nr)gk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    int_0 = 4049
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    str_0 = "Z[i0e+jV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    str_0 = "EGhZI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    float_0 = 771.015
    list_0 = [float_0]
    dict_0 = {float_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    int_0 = 4001
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    int_0 = 939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bytes_0 = b"\xb0\x8f\xc09\xb6\x94*E\xe2\xfdyyOyX\xbf\xbc\xd4\xcc?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    int_0 = 1988
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    float_0 = 817.83731
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b"4\\\xbdV"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    int_0 = -1793
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    int_0 = -347
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    int_0 = 133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    str_0 = 'a`v)?}eB"K9c,\x0b:R<P'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    complex_0 = -761.4 - 1146j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    int_0 = -4777
    list_0 = [int_0]
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: list_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    bytes_0 = b"\xf3Ji\xcaB7\xb3F\x1d\x9c\xb2\x90_\xe4R\xef\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = 1293
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_194():
    float_0 = 1344.0757
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    bytes_0 = b"#&\xef\x87\xf2\xf6>\x8dL\x85Q\xf1\xfbK\x80\x01H<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    bytes_0 = b"\x00\x17.\x91L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    int_0 = 949
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bool_0 = False
    str_0 = "L7I1g"
    dict_0 = {bool_0: str_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    str_0 = "NW^l#>^u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    str_0 = "#v},}TZxW.y10w!J@"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: bool_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = 2977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    float_0 = 297.05181
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bytes_0 = b"l\xe0\xa0sd\x94\xa5\x08A\x91\x05\x14\xfdI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    int_0 = 1769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    str_0 = ",sy:6y2IcNQN){\tg7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    int_0 = 1614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    str_0 = "ob0FIW'HK^U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    int_0 = -913
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    complex_0 = -593.685471 + 1730.724577j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bytes_0 = b"\xb3"
    int_0 = 1013
    set_0 = {bytes_0, bytes_0, bytes_0, int_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bytes_0 = b"\x92\x8f\xec\xfc\xfd\x11*\x00n\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bytes_0 = b"\x82b!"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "P<PY"
    str_1 = "v"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_1: bytes_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    str_0 = "L[ nh"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    int_0 = 811
    int_1 = -2052
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = -606
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    str_0 = "7bhP^tJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    complex_0 = -1653.7 - 3097.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    complex_0 = -2664.918 + 1704.529397j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    str_0 = "`ml,ot\tpC\\xdoh)T4jf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    int_0 = -1889
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bool_0 = False
    bytes_0 = b"\x9e\x0b\xd7u\xce\xba\xacH\xc2\x8fu\x97?\x98\x1c\xe8\xeb\xef\xed"
    tuple_0 = (bytes_0,)
    tuple_1 = (bool_0, tuple_0, tuple_0, tuple_0)
    set_0 = {tuple_1}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    float_0 = -2003.279
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    bytes_0 = b"\xda\x1b\xcck#\x84\xdb\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    str_0 = "|k1\r)+f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bytes_0 = b"\xe6\xa6*\xc0\x9a\x9e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"\x10\xfep\x05W^i("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    float_0 = -4202.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    complex_0 = -3597.781 - 2327.727512j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    str_0 = "CyE\t,wZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    int_0 = -156
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0]
    str_0 = "sLo0c#uRo8ksK+&>]0C"
    dict_1 = {str_0: str_0}
    module_1.object(*list_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_242():
    str_0 = "\\hBivr_9\t4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    float_0 = 299.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = 2916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bytes_0 = b"\x9d\xb1\x06Q1\x1e\x03\xe5\x8dQ\xe4\x93\x08\x8c\x16R\xb3G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = ""
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    tuple_0 = ()
    bool_0 = True
    set_0 = {tuple_0, bool_0}
    list_0 = [tuple_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    float_0 = 154.987
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b"-j\xf7s\x87\n\x8dh\xb1\rB[\xe3\xa3\x80g\xb2"
    str_0 = "de=JYO&x+W"
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    int_0 = 2256
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    bytes_0 = b"\x18\xf1,\x86\xa4\xcd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    int_0 = 2582
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_255():
    bytes_0 = b"\xf4\xcf\xbb\xc3\xe4^~\xe8^\x8c3\xd4\xf1\x8f"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    str_0 = "U ;,g8%gJh(t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    str_0 = 'mjyK\nz;:".`{d[R0hX\r'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_260():
    bytes_0 = b"$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    none_type_0 = None
    str_0 = "o>oA"
    module_0.get_new_command(none_type_0, str_0)


def test_case_262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_263():
    int_0 = -2515
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    object_0 = module_1.object()
    tuple_0 = ()
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    complex_0 = -4953 + 3240.792j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    int_0 = 326
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    str_0 = ":{>xgC*M,A<Y1"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    float_0 = 1109.34
    list_0 = [float_0]
    list_1 = [float_0, float_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    bytes_0 = b"\x02\x88\x0f\x12\xea\xc4"
    bytes_1 = b"QH\xdd"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_272():
    str_0 = "Eu7gdw("
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    int_0 = -2686
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    float_0 = 1142.771
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    bool_0 = True
    str_0 = "{HWjg)Q]"
    list_0 = [bool_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    bytes_0 = b"\xcf\x8b]\x81/49YWL\xac\x11\x0f\xf25@"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    int_0 = 999
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    int_0 = -63
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    str_0 = "]VTP<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    int_0 = 3693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    bytes_0 = b"\xda+i\xf4Q\x185/Dj\xf1\x0e,\x8cB."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bytes_0 = b'\xf4CG\x87"\xef\x83\xd0\x84\x9d\xd8:;G\xfc'
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_292():
    complex_0 = -66.597 - 498.6339j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    float_0 = -2696.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    float_0 = -1350.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    complex_0 = 3770.607 - 1624.7439j
    int_0 = -3096
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    float_0 = -1143.48484
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    str_0 = "-C_!1u{C@|4"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    int_0 = -105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bytes_0 = b"\xbb\x06\xd0\xdf\x88\x05-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    int_0 = -2604
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    float_0 = -564.0
    bool_0 = False
    list_0 = [float_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    bool_0 = False
    str_0 = "nN0E9mtH"
    bytes_0 = b"\x16\x90\xdd\xbd1%EV\x82\xa4\x16\x8e\xf5\xa1\x17\xc6\xe8\x8b"
    set_0 = {bool_0, str_0, bytes_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    str_0 = "c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"0\xa5\x8a&C\xdfx\x1b\x1d+8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    str_0 = "h(/i_ca\nH^Gh^8o';\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = ".gGi{f4\\^XD!|GR!\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    list_0 = []
    str_0 = 'jZ:CWE,N%\np8"EEApC}Q'
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "R*e<wmE#_:QZ'"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    int_0 = -1151
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    int_0 = 2549
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    float_0 = -359.5
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    int_0 = 746
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = 533
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    str_0 = "}2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    bytes_0 = b"}4\x04FEmd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    str_0 = "1p(89~w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    none_type_0 = None
    bool_0 = True
    list_0 = [none_type_0, bool_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    bytes_0 = b"\xad\x8c,\xaa\xe6g9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    float_0 = 1550.392
    set_0 = {float_0, float_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


def test_case_330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_331():
    float_0 = 522.853596
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    float_0 = 82.277
    module_0.match(float_0, float_0)


def test_case_333():
    pass


def test_case_334():
    pass


@pytest.mark.xfail(strict=True)
def test_case_335():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    int_0 = 1514
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    str_0 = "58]T`X8HVH\rN'qTv\x0bP]|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    float_0 = 2587.59
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    float_0 = 1404.58
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"\xac\xeb\xd9"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    int_0 = -1190
    module_0.get_new_command(int_0, int_0)


def test_case_343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = "PIZi+'(,5\nX\"r89s>f+"
    module_0.match(str_0, str_0)


def test_case_345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_346():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    int_0 = 3710
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    str_0 = "t?1"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    bool_0 = True
    bool_1 = True
    bytes_0 = b"|\x05"
    tuple_0 = (bool_1, bytes_0, list_0)
    bool_2 = True
    tuple_1 = (list_1, bool_0, tuple_0, bool_2)
    list_2 = []
    module_0.get_new_command(tuple_1, list_2)


@pytest.mark.xfail(strict=True)
def test_case_351():
    str_0 = "B$z33!t-MR7R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    int_0 = -3097
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    int_0 = 508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, bool_0)
    list_1 = [list_0, bool_0, tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_357():
    int_0 = 2436
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    int_0 = -4520
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, dict_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    int_0 = -2706
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = "BZsP\r!DQ+Z"
    tuple_0 = (dict_0, str_0)
    dict_1 = {int_0: int_0, int_0: tuple_0}
    module_0.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    str_0 = ")S_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bytes_0 = b"\xc6o\x8d"
    module_0.match(bytes_0, bytes_0)


def test_case_362():
    pass


@pytest.mark.xfail(strict=True)
def test_case_363():
    bytes_0 = b"\x1cLs0\xe3Vj\x0fd\xb5K:\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    str_0 = "f>%\rIpF(iv;@>\\J_"
    str_1 = "\x0cQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    int_0 = -1728
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    complex_0 = -181.49524 + 3052.32j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    float_0 = -2563.44205
    float_1 = -948.89
    bool_0 = True
    object_0 = module_1.object()
    set_0 = {object_0, float_0}
    tuple_0 = (float_1, bool_0, set_0)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    int_0 = 580
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    object_0 = module_1.object()
    float_0 = 1721.8
    bool_0 = True
    bool_1 = False
    tuple_0 = (object_0, float_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    float_0 = 1521.0
    float_1 = -1640.48877
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_371():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    str_0 = "mV\n\tcJ5j[t<MI+;q@"
    set_0 = {str_0, str_0}
    list_0 = [str_0]
    tuple_0 = (str_0, set_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_373():
    pass


def test_case_374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\xafL\xdb\xa6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, set_0)


def test_case_377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = -1431
    bytes_0 = b"\x89\x96\xbf\x8e\xc8\xfe\xb0i"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    int_0 = -1404
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    complex_0 = -412.5719 + 1270.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    int_0 = -2535
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    float_0 = -2831.1119
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bool_0 = True
    float_0 = 3262.12712
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_387():
    pass


@pytest.mark.xfail(strict=True)
def test_case_388():
    bytes_0 = b"v\xaf\xa5\xfa\xbb\x04\xb0\xdd\xd1\xe9\x10s\xa6a\x82\xf3\xef\x9eT"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    bytes_0 = b"\x131\x95I\x0f\xa4N\x10r\x84\xad"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    float_0 = 2281.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    complex_0 = -4460.526 - 886.225j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    bytes_0 = b"\xc5\x1b%\x9d\xae&%\xb7\x8a\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    int_0 = -500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = -3270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bytes_0 = b"\x88\x9d\x920\xbe\xdf\x017"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = 465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    bytes_0 = b"w\x8a\x9ff\x8fn\xac\x1c\x08\x97\x86\xeaR\x9f[\x05|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    str_0 = "2uyc  5"
    str_1 = "2aZDf~\rtMvT,2c6l"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_405():
    pass


def test_case_406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_407():
    bytes_0 = b"\x1f\x05\x85\xcd_@\x8c\x86\xba\xfe\xae\xef4\xd9\xde\xce\xff\xbd"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_408():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"\x00\xce\xa2\xc6fN\xe5#\xb6\xf0>\x91\x10\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    str_0 = "[l\x0b\n*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bytes_0 = b"u\x915\x1b$|"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = -1394
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    float_0 = -2864.8454
    bytes_0 = b"A,\xb6\xa6\xda\xc9i5\xaf"
    tuple_0 = (float_0, bytes_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    str_0 = "n%8Oj#w'M{,Dp=p9Ruh]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    int_0 = -5754
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    bytes_0 = b'=m\xae\x8c":\x8ff\xb4'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b",\xca\xf0N47\xaa\xff"
    list_0 = []
    bool_0 = True
    bool_1 = False
    tuple_0 = (bytes_0, list_0, bool_0, bool_1)
    list_1 = [tuple_0, tuple_0, list_0, bool_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_422():
    int_0 = -4403
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    int_0 = 2192
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    str_0 = "~/6]+/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bytes_0 = b'\xb6\x97B+F\x84\x0c"\xbb\x85\x05\xd8M\xbcv1\xde\x8f\xb9'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    str_0 = "v 8@T\r'dNt\"dspVI\t"
    list_0 = [str_0, str_0]
    tuple_0 = (str_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    bytes_0 = b"\x14\x84\x8dK\xce\xcfi\x1c\x97}\xf8V\x01\x11\xac\\"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0, list_0)
    list_1 = [bool_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = -1731
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    int_0 = 2867
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    str_0 = "{k7&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    bool_0 = True
    float_0 = 679.451
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    int_0 = -1185
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    str_0 = "Uwf}qWya5T\nL4DU"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bytes_0 = b"\xae\xdd\xa9\xf6\x9a\xeb#"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    str_0 = "vRO{i\rp& Jt7k[[I9&%}"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


def test_case_441():
    pass


@pytest.mark.xfail(strict=True)
def test_case_442():
    str_0 = "LHH$>Uvp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = "e=l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"\x94\xb3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bytes_0 = b"\x8f\\>\x8621"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    float_0 = -1316.10606
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    str_0 = "B8*.X%X<Kg&4$\\@4p]/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    str_0 = ";\x0cE6VT.U\t@]%GvY"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    str_0 = '}{jJF&]/}mqF::"\nETO'
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_451():
    pass


def test_case_452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_453():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = "f[(jb=eOhlu"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -2675
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bytes_0 = b"%xE\x1c3O\xfd\x17\xf5Wu\xeb\xf66\xc1\x9d\xa8\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    complex_0 = 319.6067 + 4741.7j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    str_0 = "y\nx0MAmS\n-)rMc3t"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    object_0 = module_1.object()
    set_0 = {object_0}
    int_0 = 4363
    module_0.match(set_0, int_0)


def test_case_462():
    object_0 = module_1.object()


def test_case_463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_464():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = 2861
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    bytes_0 = b"\xdch\xa3\xb4\xbd'\xc4\xf4\xac\xb6V\xd3n>`\xf5[\xbf\xf3="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bytes_0 = b"\x8d\x98OMna\xa8>\x97\x95\x7f\xcd\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    float_0 = -2229.7
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bytes_0 = b"\xae\xd3\xf9\n\x1df\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    str_0 = "?16Es?^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    str_0 = "'%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "<|=FG\\F\nFcQz*Sr:Cd"
    bytes_0 = b"X\xf1H\xb8\xec\xf2,Y'\\=\x8aF\x02\x17"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    str_0 = "a"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    complex_0 = 1423.323697 - 650.516j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    int_0 = 1929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    bytes_0 = b"\xc5\r\xea \x91\x1dT\xa1\x9aQ\nh\x8e8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    int_0 = -1313
    set_0 = set()
    dict_0 = {int_0: set_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bytes_0 = b"\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    bytes_0 = b"\xc4vq\xbd\x80\xdd;\x1d\x87\xb9\x9b\x0e\x11\x08\x1e\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    complex_0 = 746.246098 + 210.943j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    int_0 = -138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = -2416
    set_0 = {int_0, int_0, int_0, int_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_488():
    int_0 = -512
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 2819
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    bytes_0 = b"\xc2\xb6It\xa0\xb6\x8a\xf5\x83@c\xc4E\xd2"
    str_0 = "#>>&^\x0c!G\r)B9YF16Gn:="
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    int_0 = -3436
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    float_0 = 451.0
    complex_0 = 1291.34 + 1523.21133j
    bool_0 = True
    int_0 = 1467
    tuple_0 = (complex_0, bool_0, complex_0, int_0)
    tuple_1 = (float_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_495():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    complex_0 = 504.697 + 661j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    int_0 = 1111
    module_0.get_new_command(int_0, int_0)


def test_case_497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_498():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "]Q8pFA8E0g"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


def test_case_503():
    pass


@pytest.mark.xfail(strict=True)
def test_case_504():
    int_0 = 3237
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    bytes_0 = b"|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    str_0 = "QbDg(\x0crW:*Y_ZhMh"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 3954
    dict_1 = {str_0: dict_0, int_0: str_0, str_0: str_0, str_0: int_0}
    module_0.match(dict_1, int_0)


def test_case_507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = "^lw<C\tZ-Z^0>Lk\t_"
    module_0.match(str_0, str_0)


def test_case_509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_510():
    bytes_0 = b"\x95\x18\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    float_0 = -3144.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    str_0 = "|7T).W`+PO\t0?7*6X#`H"
    int_0 = -332
    int_1 = -493
    dict_0 = {str_0: int_0, int_0: int_1, int_1: str_0, int_1: str_0}
    list_0 = [int_1]
    tuple_0 = (str_0, dict_0, list_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    list_0 = []
    int_0 = -290
    list_1 = [list_0, list_0, list_0, int_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "v72t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, str_0, str_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    bytes_0 = b"4\xa8\xb5\x04\x1b\xf3\xf85?\xa4{\x99\xea\xe4/\x1d\xf5v"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    float_0 = -1329.5639
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = 1832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_520():
    str_0 = "2_(Wf}DU]_nS8N*jt"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_521():
    pass


def test_case_522():
    pass


@pytest.mark.xfail(strict=True)
def test_case_523():
    bytes_0 = b"\xdc\x7f\xa1\x94\x14\x90\xb8\x03\xc6A\x98"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    complex_0 = -3267.38 + 2804j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    set_0 = set()
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    float_0 = 1137.53437
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    int_0 = -852
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    bytes_0 = b"\x8e\xa4&\x10B\xa93\x1eo\xa3,\x10\xadIB\xf5"
    str_0 = "Ufr*_&=\x0c|bxQ\rq"
    tuple_0 = (bytes_0, str_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bytes_0 = b"T\xc9\xf8t<\xfe\x9e\x97F\x99A\x17"
    float_0 = 1811.56
    int_0 = -2114
    dict_0 = {bytes_0: bytes_0, float_0: bytes_0, bytes_0: int_0}
    list_0 = []
    tuple_0 = (dict_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    bytes_0 = b"\xab\xdcU\x83\xaf&\xb7-3\x0c\xffS\xf0[\xcb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    bytes_0 = b"U\x7f\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    complex_0 = 3505 + 109j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_536():
    bytes_0 = b"\xfab\x8c\x9c\xb9Z\x85\x92\xfa\x110"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    int_0 = 1084
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    str_0 = "t-hg3"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    str_0 = "zs|#=*B\x0c_9g?]g"
    dict_0 = {str_0: str_0}
    bytes_0 = b"$\x81\xb0\xe2\x17(\xe2a\x9f\x11\xb6)\x12\x8e\xad\x84\xeda1J"
    tuple_0 = (str_0, dict_0, bytes_0)
    str_1 = "Uae4xozP~)n)1KF\to"
    module_0.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_541():
    int_0 = 77
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    str_0 = "G7Tyzt|IZ#4st_Nk["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    str_0 = " %pm<9N|*D\n50k1}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    str_0 = "(+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bool_0 = True
    int_0 = -3564
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    float_0 = -995.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    str_0 = ":OuU(MFTyI!~%vV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = -2182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    str_0 = 'O&iW4`;*rAX\\s)G#f"'
    str_1 = "A"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    int_0 = -2030
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    bool_0 = False
    float_0 = 1078.69
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    float_0 = -4849.819
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    int_0 = -759
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_558():
    int_0 = -1302
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    int_0 = -2035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    str_0 = "xttRf]h6YS%\x0bx\x0cc`bSra"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 907
    module_0.get_new_command(int_0, int_0)


def test_case_562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_563():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    float_0 = -2062.9012
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    float_0 = 215.9709
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    int_0 = 6570
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    int_0 = 538
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    bytes_0 = b"\x98\xf5L\r\xed\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    str_0 = ";ywW=yfid/P"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    bytes_0 = b"N$\xee\x84{\x8eN\\\xc70\xe6\xd7\xb0\x9aO\xce\x81\xfc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    int_0 = 495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    str_0 = "i! "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = 18
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    float_0 = -121.83
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    str_0 = "=3Lt%Kb6\\m.3m!S{5"
    module_0.get_new_command(str_0, str_0)


def test_case_579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_580():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    bytes_0 = b"(\x00X\x7fcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    str_0 = "~tMscR/wC\x0c#v"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    float_0 = -2359.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bool_0 = False
    int_0 = 105
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = ' "G}3R\x0b,\rfT6 yZ.%\x0cd'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    str_0 = "@pqt@"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


def test_case_589():
    pass


@pytest.mark.xfail(strict=True)
def test_case_590():
    str_0 = "!\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    str_0 = ",`aiIb(FWTgc/w"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bool_0 = False
    list_0 = [bool_0]
    int_0 = 2365
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    str_0 = "\\2{4 rT}c>duD\tDk"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b"yS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = 3858
    list_0 = [int_0]
    complex_0 = 1945.27 - 354.9534j
    module_0.get_new_command(list_0, complex_0)


def test_case_596():
    pass


@pytest.mark.xfail(strict=True)
def test_case_597():
    int_0 = 1670
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bytes_0 = b"\x96T\xddT\x0bm\xaf\xe1\xd4\x13\x82\x82\xafgK"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    int_0 = 3065
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    bytes_0 = b"\x04O\xc0\xea\xdb\xf9\x19\xa2\xfdY\xeb\x07\xb1\xc7NJW%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    int_0 = -1829
    bool_0 = False
    bytes_0 = b"\xf4\xbd\x94\x85\x01Y`\xea[\xe7\xb6Y\r*m\xfbf\x13\xc4"
    tuple_0 = (int_0, bool_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    bytes_0 = b"\xf4\x15~"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = "vE(n"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    str_0 = "hdrH_.#S\n<QQ-p"
    float_0 = 1944.53081
    tuple_0 = (str_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    complex_0 = 3162.461 + 157.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    float_0 = -1006.7208
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    complex_0 = -936.03 - 488.77j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    str_0 = "^}\tBC"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    str_0 = "8<`EC?Dccj&1y8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    float_0 = -268.662138
    tuple_0 = (float_0,)
    str_0 = "Fx^rei_m9W"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    float_0 = 2332.158172
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = -452
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bytes_0 = b")}\x82\xf7Om\xb5ej& \x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    float_0 = 2746.0508
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    bytes_0 = b'\xe8Ib\x0e\x86\xe7l"\xe1\xcb=\x19.\xf8\x96\xf7\x8a\x97('
    int_0 = -1286
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    complex_0 = 239.762 - 1741.84j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bytes_0 = b"/\x0el\x89\x86\xbe\xbf\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    int_0 = 2631
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    bytes_0 = b"\r\x98\xaf\xa3\x03\xc8\x02V\xe0k\x89\t$_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    str_0 = "-%1y6jN)\\99SO3$.z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    int_0 = 1232
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    float_0 = 1904.4472
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    complex_0 = 345.558 + 2913.64j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    float_0 = -843.97772
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    str_0 = "|\x0b"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "\tJCV-\\Sq\t\n8\x0cw 7+kpoI"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    int_0 = 626
    str_0 = "lti|q\\;!O#3Zn%"
    list_0 = [int_0, int_0, int_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    int_0 = 3443
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    str_0 = "F\t6{%(0H\r&;pEiJ"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    float_0 = -197.50012
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    tuple_0 = ()
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    bytes_0 = b"U,-\xc5M\xc8g7\xe0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    int_0 = -1518
    str_0 = "K1g8zQa|("
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    none_type_0 = None
    str_0 = "2\rS\tO<Koqg:s-&!R\x0bB>"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    int_0 = 830
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    int_0 = -506
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    str_0 = "c"
    int_0 = 818
    list_0 = [str_0, int_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = -293
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    str_0 = '"qWQ,42\n8j'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    bool_0 = False
    int_0 = 2211
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    float_0 = 1361.011
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    str_0 = ':"/'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    str_0 = " D2Hk 6:Z\\D;]t?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    object_0 = module_1.object()
    float_0 = 560.1009
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bytes_0 = b"\xcd\x92`L\xcf\xae\xed\t\x0c\x96\xec\xa4\x1em@\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    int_0 = 1517
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    str_0 = "bbV\t@g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "e"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    int_0 = 1544
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    complex_0 = 2235.4055 - 12.47873j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    bytes_0 = b"\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    str_0 = '8JmP[$2"'
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    float_0 = -1436.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    str_0 = "O"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bytes_0 = b"\x80_\xac`&\xf0\x8fE\xcc`/\x0fw\xaaRr\xc7H\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = "|;jHeHn\tW%$0{Qe"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    str_0 = "q`Q\x0chU5hk\x0bxOj01gU\"'\\"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    str_0 = "ap{\x0bsq5T$3# "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    float_0 = 671.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    complex_0 = -1373 + 1707.011j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    int_0 = -1720
    tuple_0 = (list_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    str_0 = "V9:e{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bytes_0 = b"\x03\x98[e\xdd\xae\xbe\x0e\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    int_0 = 792
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    float_0 = 2365.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    bytes_0 = b"\x02\x99\xcb\xc6\xda\x14\x8d\xfb\xf4\\\x13?\xfe\xc4\x83\xfcc\xec\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    int_0 = 3313
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    str_0 = "vF"
    complex_0 = 881 + 733.77586j
    tuple_0 = (str_0, str_0, str_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    str_0 = "UP[-k2jLh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    str_0 = "?Q1Me\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    str_0 = "e[cN+{\t?@pLk3A\r"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    int_0 = 4012
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    float_0 = -818.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    str_0 = "gEp 3\x0b+IB;i:1tjl`v"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = -2057
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"\xd4\xe3T\xb1\xc3\xbb\xb6\x14\x9d\x8b\xc6(\xea\xaak\xbb\xb0\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    str_0 = "tSZA`%iaU9wS!C&S\t\rt|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    float_0 = -3686.6107
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    int_0 = -2650
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    str_0 = "_e!k^>@@\tZ/+#j%0Y]U"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = '8@f"FG,aL25Q'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    str_0 = "9~';!zaM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    int_0 = -903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    bytes_0 = b'm\xff\xf6m\xfc\xcd\xde\xa5\x05"\x1c\xb4*\x97\x8a'
    bytes_1 = b"\x88X\xb4;\xfa\xb4\xb6\x94^\xc4B.\xa0MV\xa4?"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = ">\n!=tIJ[)Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bool_0 = True
    str_0 = "w\x0c(vgDHs"
    set_0 = {bool_0, bool_0, str_0}
    tuple_0 = (set_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    bytes_0 = b"\x87\x02\xd5\x06\x1a\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    int_0 = 74
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    float_0 = -1056.9361
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    int_0 = -298
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    float_0 = 2407.0
    tuple_0 = (object_0, dict_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    str_0 = "`nzQgRcN4z\\\\^[H"
    module_0.get_new_command(str_0, str_0)


def test_case_718():
    pass


@pytest.mark.xfail(strict=True)
def test_case_719():
    float_0 = -939.82
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    int_0 = 357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    str_0 = "g-58^MT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_723():
    bytes_0 = b"jk\r$I\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    complex_0 = 2154.36832 + 496j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = -2736
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    int_0 = 362
    bytes_0 = b"s\x89\xc4\xbe\x89a\xc2\xda\x9f2"
    list_0 = []
    tuple_0 = (int_0, bytes_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    int_0 = -687
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = "OkiC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    int_0 = 3590
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    str_0 = "_Tz;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


def test_case_733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_734():
    int_0 = -2803
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: bool_0, int_0: int_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    int_0 = 619
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    float_0 = 111.2713
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    complex_0 = -2660.666 - 476j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    float_0 = 1553.0
    dict_0 = {float_0: float_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    float_0 = 2291.950151
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    float_0 = -1193.5172
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    int_0 = -1205
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    float_0 = -111.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    str_0 = "$R9W2"
    str_1 = "G_(Jk(j:rn\x0b32hzR/!Q"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    int_0 = -1804
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bytes_0 = b"\xa4?\xf5\xfc\xd2v2P1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    float_0 = 2236.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    complex_0 = -3753.09547 - 160.72326j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    float_0 = 3321.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    str_0 = "glKxoZWW76r6C%fz*'L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    int_0 = -1167
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    float_0 = -3383.1
    set_0 = {float_0}
    tuple_0 = (set_0, float_0)
    bytes_0 = b"\xe4\x84\x7f\xab\x03\xd7\xc8\xad\xea:[;\xfa"
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    complex_0 = -3146 + 1983j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    float_0 = -1646.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = "c!O\x0bwY=Pe"
    str_1 = "pm@#TAGp"
    set_0 = {str_0, str_1, str_0}
    str_2 = "h?X&y*nkm\\"
    module_0.match(set_0, str_2)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = -1458
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    str_0 = 'un\tS"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    float_0 = -1621.7424
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    str_0 = "Hxe.Xs\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    complex_0 = -2195.87 - 1025.81541j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    bytes_0 = b"\xd1\x80 V\xfa\xb7\xf9\x9c\x05\rDH"
    str_0 = "JP^Qu,n.$/2K"
    int_0 = -1293
    tuple_0 = (bytes_0, bytes_0, str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    float_0 = -682.667394
    bytes_0 = b"\x12\xa8\x8c"
    tuple_0 = ()
    int_0 = -12
    tuple_1 = (float_0, bytes_0, tuple_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    complex_0 = 494 - 1108.15j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    dict_0 = {}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bytes_0 = b"\x81"
    bytes_1 = b"\r\x0c\x90\x10\x17:\x81\xf2\xf7P\xcd\x03\x85\xd3E"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_768():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [object_0, object_0, tuple_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    float_0 = 588.011
    module_0.match(float_0, float_0)


def test_case_770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_771():
    float_0 = 1258.20491
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    str_0 = "[)TXdj}\t]yf\\4"
    list_0 = [str_0, str_0]
    list_1 = [str_0, str_0, list_0, str_0]
    bool_0 = False
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    int_0 = 934
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    str_0 = "\rZ~\n\r6"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = "^`<t6\n'["
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    int_0 = -2508
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bytes_0 = b"q\xd5\x9f\xda\x81\x88_\xe9x\t\xc3\xa0\x16>\xd9\x13\xde\xfdEz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    int_0 = 300
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    str_0 = "7/q0]}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    int_0 = 2025
    tuple_0 = (int_0,)
    set_0 = {int_0, tuple_0, int_0, int_0}
    str_0 = "8)"
    tuple_1 = (tuple_0, tuple_0, set_0, str_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    int_0 = -165
    bytes_0 = b"\x8e\xbf3Z\x11\xe7y\xca=\x91\x9d7\x0b9\x1fc\xa5"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    str_0 = "@>b+&v\n\nZUjCR}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    bytes_0 = b"\xe9\xb4,\xda(t8uD\xf1\x99\x18\xf1\x8b\x9e\xdd\xdd\xb1\x8d}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    float_0 = -2908.64
    dict_0 = {float_0: float_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    int_0 = 166
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    str_0 = "7:_N"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    str_0 = "%\\o%1CUs5{w)xm"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b"\xbb\xfe\x7f\xa3\x94\x02}Y"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    float_0 = -1479.373
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    str_0 = "f2l\x0cOl4'`!N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = "t\t,FZP-Mc7vV|7>\t\nz7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    bytes_0 = b"*\xad\x19\x9c_)[\x16\x7fa\xf7'r\xf5\x87\xca;"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    str_0 = ")\\+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    list_0 = [dict_0, dict_0, bool_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    complex_0 = -3029.146 + 2421.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    int_0 = -47
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    str_0 = "Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    complex_0 = 1293.294626 + 5602.68222j
    list_0 = [complex_0, complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_811():
    str_0 = "#?}[eGYrG\nl]0dQJ9_"
    module_0.get_new_command(str_0, str_0)


def test_case_812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_813():
    bytes_0 = b"\xe2\xf0\xff"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    str_0 = "zmGpj)P3J3GB8X"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bytes_0 = b"D\xabw\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bytes_0 = b"'\x9a\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    int_0 = -2717
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    int_0 = -2009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    str_0 = "C5W7\np_j[\nv-8Dis|'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    str_0 = ":7mLj!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    int_0 = 214
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    complex_0 = -1961.05128 - 454.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    str_0 = "j!kl~x\nB0_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bytes_0 = b":=j\xf2~\xcd\x82\xb2\x8f\xc1\x87\x1d\x9aR\xbb\xeb})\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    float_0 = -155.882
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    str_0 = "$\rx"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = "y&Jgd)3mBZ0{WF"
    bool_0 = False
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "eUO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    bytes_0 = b"\x04\x97e6\xd6`"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    list_0 = [bytes_0, dict_0, dict_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    bytes_0 = b"\xd4r`_\xfb\xc4\xfe\t\x93\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    bytes_0 = b"\xf5\xae\xfd\xec\xd5\xd5\xf8\xcd\x01g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    none_type_0 = None
    bytes_0 = b"I\xa9j0G>1\x0c\xd8}~B\xe4o"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    none_type_0 = None
    int_0 = 1315
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    bytes_0 = b"\xfc\xae3\xe0j7\xe6jl\xf6\xbc\x8c\x18\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    str_0 = "GbPcP\x0c)6\x0c,xH'JW"
    list_0 = [str_0, str_0, str_0]
    str_1 = "w8da\x0b(Sp%/`(N<WkZ("
    bytes_0 = b"\xaf\xf8\x9a\xa8\xeb"
    tuple_0 = (list_0, list_0, str_1, bytes_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    str_0 = "xWEewj1I\r;Ms4viD\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"6\n\x87)mP\xaf7$\x19\tP\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    bytes_0 = b"L\x93\x9c\x86\xce\xd0\xb1V\xff\xa4\xfc\xa5\x96\x0c\x81\x94P\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "\ttQ7C6C67>)I6cwg{o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    float_0 = -556.14508
    module_0.match(float_0, float_0)


def test_case_847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = -833
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bytes_0 = b"\xe4,\x1bv\xd7\xb1\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    int_0 = 1141
    complex_0 = 834.7662 + 2040.419409j
    tuple_0 = (int_0, int_0, int_0, complex_0)
    set_0 = {tuple_0, tuple_0, complex_0, complex_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    str_0 = "Camu0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "m-T\\mT:VY4S>H^g[+`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    complex_0 = -366.304 - 3656.303j
    module_0.match(complex_0, complex_0)


def test_case_854():
    pass


@pytest.mark.xfail(strict=True)
def test_case_855():
    str_0 = "I9_Vv!4{M,Z(Ox"
    str_1 = "w,A!l*j9J&F'fW1iPYm`"
    str_2 = "#"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    complex_0 = 2019.212337 - 1781.94945j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    int_0 = -3378
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    bytes_0 = b"\xd4!E\x90y\x97n\xad\xb2\\W?\xedA\x11\xa9\xfc>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    float_0 = -5253.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    int_0 = 1602
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    bytes_0 = b"\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    int_0 = -4324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bool_0 = False
    bytes_0 = b"lV\x9a\x15"
    tuple_0 = (bool_0, bytes_0)
    list_0 = [tuple_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    int_0 = 346
    list_0 = [int_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    int_0 = 827
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = -769
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = -3504
    bytes_0 = b'\x9be\xf5\xa8-f"\xb8\xccr3i\xa8\x86'
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    str_0 = "~,\r- "
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    tuple_1 = (str_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bool_0 = False
    int_0 = 1412
    tuple_0 = (bool_0, bool_0, int_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    float_0 = 1179.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    str_0 = "20]bV!kb\x0cnkL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bytes_0 = b'\x82\x7f"\xa1\x07\xbc\xa7|\x83\r\xfd\xf1Nl\xd0\x11'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b"N\x19j\x9cm\xd8[\xff\xe2\x80-3"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    str_0 = ",r{X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    float_0 = 1476.3558
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    int_0 = 3130
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    float_0 = -2394.03
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    str_0 = "7c%BB]\\{"
    bytes_0 = b"\x1a"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_888():
    pass


@pytest.mark.xfail(strict=True)
def test_case_889():
    float_0 = -3982.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    str_0 = "arb\th~gsy$26D4@Rc]$V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "K&c*Sa-&AIl>eP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    str_0 = ""
    float_0 = -1818.4632
    module_0.get_new_command(str_0, float_0)


def test_case_893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_894():
    str_0 = "}p9*&vh4WDx,kQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    complex_0 = -1318.271 - 2327.7591j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bytes_0 = b"\xc4\xb6\xd5~"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = 3282
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = "R' bYDA?] "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bool_0 = False
    bytes_0 = b"\xa98\xc4\xfd\xb1/"
    list_0 = [bool_0, bytes_0, bool_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    int_0 = -207
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    int_0 = -350
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    float_0 = -926.33
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    str_0 = "32"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bytes_0 = b"\x8a\xb6\x18l\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    complex_0 = -264.5634 - 1953.660069j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    int_0 = 2342
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    float_0 = -649.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = "[H{:CjH_cI7|i`?~"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    bytes_0 = b"I\xa4U\xc4\xb7D\x99\x96\xc8;\xa0k\x04W"
    module_0.match(bytes_0, bytes_0)


def test_case_914():
    pass


@pytest.mark.xfail(strict=True)
def test_case_915():
    int_0 = 1279
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    str_0 = "jXM&yV\x0cJM\x0cf"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    str_0 = "iP/}}\\OnCP'0S2]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    bytes_0 = b";\xf2\xb33"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    float_0 = 1727.69
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    float_0 = -819.67098
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0}
    tuple_0 = (dict_0, object_0, object_0, object_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bytes_0 = b"\xb9\xf6,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    list_0 = []
    str_0 = "zD;&`0:@#QU\ret9Wwe/"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    int_0 = 1547
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    bool_0 = True
    int_0 = 1634
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    bytes_0 = b"d"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    str_0 = "S ~j{|p0YT{yxBx}|'X%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


def test_case_933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_934():
    str_0 = "YWhWDOTe[YAB7Ut@XX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"O=\xf1\x04,\xf5C\xc08J\x07L\xd6"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bytes_0 = b"\xc5\xdf\xbb\xa3f\x92\x9e)\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    int_0 = -471
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    none_type_0 = None
    str_0 = "\t~QBD"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    bool_0 = False
    int_0 = 1345
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = ()
    str_0 = ".3]VdmM|^YCv\nks;T/_"
    dict_0 = {str_0: tuple_0}
    tuple_1 = (tuple_0, dict_0, bool_0)
    tuple_2 = (bool_0, int_0, list_0, tuple_1)
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bytes_0 = b"\xe6\xcf\xd0\xcbZ~\x1d\xef\xaa\xf3uX\xd6\xaa\xe2\xa9z4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = 860
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    int_0 = 3094
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "R~n$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    bytes_0 = b"A\xc2\x1fq>3\x8c\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bytes_0 = b"\xb2B\xe6\xc6\xbeW\xcf\x9b\xfbv"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    complex_0 = 399.31052 - 3893.821378j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bytes_0 = b"\x9d\xafp\xac\x05 \xdd\xee\x97\xe0ue\xb9\x9a\xeb\xcd\xeb\xd8\x7f%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_952():
    str_0 = '++f\tF\x0beWn%"b'
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    str_0 = "(USu\r(jsRtSAFUN"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    float_0 = 1026.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_956():
    float_0 = -2725.0
    module_0.get_new_command(float_0, float_0)


def test_case_957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_958():
    str_0 = "+t%vSwl{%e*7EK'C~>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    int_0 = -1320
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    complex_0 = -2536.7789 + 31.567j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bytes_0 = b"\xcc%\n\xfd\xcdT\x134m\x83K\xfdk\xc6\x93A\xd3\x98!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    int_0 = -2605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    int_0 = -1816
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bytes_0 = b")\x03@\x80\x8a\n\x91\x9a\xde\x01\x9d\x13Dl\xa4\x0e\xde"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bool_0 = True
    bytes_0 = b"\xea\xf5\xbf*!\xe1=R\xae\xfe\x8e\x9c\xdc7{\xa6"
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    set_0 = {bool_0}
    tuple_1 = (bytes_0, bool_0, tuple_0, set_0)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_968():
    float_0 = 2677.13449
    list_0 = [float_0]
    list_1 = [list_0, float_0, float_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    str_0 = "lw!(w$O4."
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    int_0 = 375
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    str_0 = "w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    bytes_0 = b"a\xa0\n\xe6\xa4\r5\xd3\xac\xa8\xf2d\xd7\xed\xe6\xaf\x05>\xc4\xaf"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = -588
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bytes_0 = b"\xaccw\x9f\xb9$\xfd\x0c$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bytes_0 = b"\xf3\xce\x8f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


def test_case_977():
    pass


@pytest.mark.xfail(strict=True)
def test_case_978():
    bytes_0 = b"\x9b\xf3\r\xba\xa0\x92ew\xba/\xda\x956\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    complex_0 = -249.365068 + 1929.52178j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bytes_0 = b"\xaf\xb7\xa5\xa5\xc3&\xf4k\xabL\x05^"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    int_0 = 1303
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bytes_0 = b"6\xb3LC\xd5"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    str_0 = "om|k3pn}hOk!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    str_0 = "C\nQwuvA{3]d%cnAhAPCT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bytes_0 = b"\xbf\t\xec\n\\64\xe2\x0b1\xf5.'\xe9:i\xfc\x10\x8aB"
    module_0.match(bytes_0, bytes_0)


def test_case_987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b"\x0c\xeaZ"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    str_0 = "-APR~#EV1&B\\xn"
    module_0.match(str_0, str_0)


def test_case_990():
    pass


@pytest.mark.xfail(strict=True)
def test_case_991():
    int_0 = 1255
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    int_0 = -1285
    module_0.match(int_0, int_0)


def test_case_993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_994():
    str_0 = "3@*)K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    bytes_0 = b"5H\xce\x93\xecx\xd4B\x8dM5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    str_0 = "\x0cI;(#\x0b\\/\rf=-DP"
    module_0.get_new_command(str_0, str_0)


def test_case_997():
    pass


@pytest.mark.xfail(strict=True)
def test_case_998():
    int_0 = -194
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "c$9IH\x0c A+*L;6]6S\nb{V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = 66
    module_0.match(int_0, int_0)


def test_case_1002():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1003():
    float_0 = -4132.16687
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    int_0 = -782
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    str_0 = "UA)"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"\xb2\x86\x8a\xbd\xe6ZL\xbe\x1c\xe2\xeb\x86\x8c\x01L\xf2\x9d_\x90\xab"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    object_0 = module_1.object()
    set_0 = {object_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    float_0 = 1524.14
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    str_0 = "Lg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    bytes_0 = b"J\x80}\xb3\xcar\x8a \x17}\xe0q\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    str_0 = "b=l/-nW"
    bytes_0 = b"\xd8n]+\x1f5\x8b8F\xec\x07se&_\xb3\x90a\xcai"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    int_0 = -1285
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    int_0 = -555
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    str_0 = "6K`JkG]j%7g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = "?0Jf8~@R~oV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    list_0 = []
    dict_0 = {}
    bool_0 = False
    tuple_0 = (list_0, list_0, dict_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    bytes_0 = b"\xb2\xf4\x0e%\x12\xb0\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bool_0 = False
    bool_1 = False
    bytes_0 = b"o\xa3)\xc5>\xbawI5\x90\xe4I\xffs\x10\xdd\x11_\xce"
    tuple_0 = (bool_1, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    int_0 = 445
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    int_0 = 2822
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    bytes_0 = b"Q\xda|\t\x0c\xa0`K \xeezr:\x835NP\xd6\x1a\xb9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    str_0 = "8CQT4wYry%klNB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    none_type_0 = None
    set_0 = set()
    dict_0 = {none_type_0: none_type_0, none_type_0: set_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    float_0 = -2822.76098
    int_0 = 5547
    list_0 = [float_0, float_0, int_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bytes_0 = b"\xe5\t\xbc\x80\x16\xc3\xca\xa0\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    dict_0 = {object_0: object_0, object_0: list_0, object_0: object_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bytes_0 = b"\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    list_0 = []
    str_0 = "04hy9dIt$*^\t"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    str_0 = "kDlcZxEI.4D 6QUg!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    int_0 = 4438
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    bool_0 = True
    tuple_0 = (set_0, list_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    str_0 = "z)UMH6$w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    str_0 = "mxRkjh3\x0c7r,gr"
    str_1 = "[Vs\x0c#]"
    tuple_0 = (str_1,)
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, tuple_0: tuple_0, str_0: str_0, str_0: object_0}
    module_0.get_new_command(dict_0, object_0)


def test_case_1039():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1040():
    float_0 = 1534.07
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = "deF%c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    int_0 = -4328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    int_0 = -3179
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    bytes_0 = b"~#C.\x92\xdbU\xd8\xed\x00\xad\xa7\xb4\xe1\x8e\x02\xbeJ\xf0\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    int_0 = -270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = 'ms.ztf@|2q"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    float_0 = 2227.101696
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    float_0 = -2123.826
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b']"@\x15\x00\x0b\x1a'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    int_0 = -2586
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    str_0 = "-_Sv\tMz$zs?b!(+}gG>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b"wKb\x08\xa3\xa7>\x9f\xfc\x85\x8f\xa5{Y\xde\x14\x13\xce\x9a("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bytes_0 = b"S\xfc\xea\rO9M\xcc\x16"
    module_0.match(bytes_0, bytes_0)


def test_case_1057():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1058():
    float_0 = -750.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    float_0 = 1897.3
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    str_0 = "w_2mK3+3N+A2|"
    module_0.get_new_command(str_0, str_0)


def test_case_1061():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1062():
    int_0 = -947
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    str_0 = "yy*83U"
    bytes_0 = b"\xe8j\xbc,W\xdfs"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bytes_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    str_0 = "<F~@i\\f"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bytes_0 = b"\xb7\x0f\xb9\xf3'\x04P\xc0\x84\x16\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    str_0 = "7gbnn,`wI)J!y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    str_0 = "%E,uc|\t)qFgj&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bytes_0 = b"\xb8\xe49\x0f\x92A\x9b\xd8 \x91&\x9b\xe8\xa7\xaet"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    float_0 = -274.0
    list_0 = [float_0, float_0]
    bool_0 = False
    str_0 = ",eq"
    tuple_0 = (list_0, bool_0, bool_0, str_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bytes_0 = b"\xbb\xfb\xa1\xcf\x83\x91@\xf6\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    str_0 = "}mS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    int_0 = -1622
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bytes_0 = b"\xfc5\xa6[\x81\x9b*\x98\xdc\xde+\xf7\x8aX\x99\x81\x83\xe3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    str_0 = "iiH"
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    str_0 = "} \rnX_="
    set_0 = {str_0, str_0, str_0, str_0}
    float_0 = 1654.7833
    tuple_0 = (set_0, float_0, str_0, float_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"\xb5a\xe4]\xbfD\xd4\xb1\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bytes_0 = b"<\ro"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    list_0 = []
    str_0 = "XhtjOS}"
    tuple_0 = (list_0, str_0, list_0)
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    int_0 = 5778
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    complex_0 = -2962.85689 - 1528.714945j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    float_0 = 1459.886
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bool_0 = False
    str_0 = "lXmns\\p"
    str_1 = ""
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: tuple_2, bool_0: bool_0}
    tuple_3 = (bool_0, str_0, dict_0)
    module_0.match(tuple_3, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    str_0 = "~m?Fw,+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    int_0 = 2294
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    str_0 = "\x0c&z}!>)g=Vs{;ti"
    dict_0 = {str_0: str_0}
    bool_0 = True
    tuple_0 = (str_0, dict_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bytes_0 = b"M\x18\xe8J\xaeE\xe0\xc9\xcc\xa6\xd4\xe0\x02\xcd\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    float_0 = -3218.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    int_0 = -2710
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    str_0 = "y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bytes_0 = b'\xa7\x0c"\xc2'
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    float_0 = 1135.064
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    bool_0 = True
    int_0 = -133
    dict_0 = {}
    tuple_0 = (bool_0, int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    int_0 = 2075
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    int_0 = -3406
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    object_0 = module_1.object()
    object_1 = module_1.object()
    dict_0 = {object_0: object_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    int_0 = 446
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    complex_0 = -661.9002 - 1212j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    bytes_0 = b"\xe1c\xee\xd4\xbf\xd9\xffg\xb3\xf7 \x89\x91\xa1\xe4\x98\x9ev\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    float_0 = -2665.75
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    int_0 = -1698
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    str_0 = 'U-G|,j,HCw4\x0bU-}\r"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bytes_0 = b"\xf7\xea\x11%0\x1a\xe4\xe0z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    str_0 = ";rn2mg.Y"
    float_0 = -476.3
    dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0, float_0: float_0}
    list_0 = [dict_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    int_0 = 2137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "Mh{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bytes_0 = b""
    bytes_1 = b"\x85T"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = -1649
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    complex_0 = 1011.958 - 2171.3j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1124():
    int_0 = -1388
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    str_0 = ":yg1/A-LB*5J9H(Ao"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    bytes_0 = b"\xc14\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    str_0 = "m\reF,w-v8f:IL5cE"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    str_0 = "9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bool_0 = False
    bytes_0 = b"cv4\x89\xefE\x14;\xff$\xc5\xe9\xcd\x0f/\x8c\xa4"
    float_0 = -3993.0
    dict_0 = {bool_0: bool_0, bytes_0: bool_0, float_0: float_0, bytes_0: bool_0}
    list_0 = [bool_0, dict_0, dict_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bool_0 = False
    str_0 = ".PY7Ti1Y3t9"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    float_0 = 3862.168575
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bool_0 = True
    list_0 = []
    list_1 = [bool_0, list_0, bool_0]
    tuple_0 = (list_1,)
    tuple_1 = (bool_0, tuple_0, bool_0, list_1)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    int_0 = -3487
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    int_0 = 3966
    bool_0 = True
    dict_0 = {int_0: bool_0, bool_0: int_0, bool_0: bool_0}
    tuple_0 = (int_0, bool_0, dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    float_0 = -3755.00263
    module_0.match(float_0, float_0)


def test_case_1137():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1138():
    str_0 = "JG^\\sG(8Z#5r`T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bytes_0 = b"\xd4\x1e\xcd\xda\xabS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bytes_0 = b"\xe6\x8fV\xc5\x90\x87@\xc5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = -1825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"#\xbaO\xfa\x80\xab\xf4Zu\x1bo\x0e)\xd4\x18\xae<\x06\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    int_0 = -473
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    str_0 = "a#::Sgze_J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    float_0 = 5120.916522
    int_0 = -1940
    bool_0 = False
    list_0 = [float_0, bool_0, int_0, float_0]
    tuple_0 = (float_0, int_0, list_0)
    bytes_0 = b"\xdc\\"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    complex_0 = 2440 - 7.71j
    module_0.match(complex_0, complex_0)


def test_case_1148():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = 2542
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"\xfc\xb5\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    float_0 = -1565.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    int_0 = -5161
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    int_0 = -770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    int_0 = -1132
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bytes_0 = b"\xae]Z\x08\xdd\xe2V"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    float_0 = -436.9
    bytes_0 = b'\xf0\xbe\xce\xd3\xf4aS\xdf\\"\x0b\xd3\xab'
    str_0 = "&9G@}2hCp{hX=8){;x1Z"
    tuple_0 = (float_0, bytes_0, str_0)
    list_0 = [tuple_0, str_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    str_0 = "yy|c1/Mm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    str_0 = "1!i+,##\rVLyk7pVQ& tz"
    str_1 = "P0q@z3x]"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    str_0 = "Hx:E\x0cevE-I5y~[!Q"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1162():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1163():
    str_0 = "Y\r"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    float_0 = -629.37
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    str_0 = "tW;wPTjd]%iFk&>{Im"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    int_0 = 1820
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    bool_0 = True
    str_0 = "wZK~4I{khleoYJ"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    float_0 = 615.437
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b"\x90\xeb"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    int_0 = 64
    bool_0 = True
    tuple_0 = (int_0, bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    int_0 = 524
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bytes_0 = b"\xbf\xb7\xa6\x9d\xb8V\xfc3sB\xbf\x1c\xfb\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bool_0 = False
    str_0 = 't 4 "\n.|'
    dict_0 = {bool_0: str_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    float_0 = 1745.72292
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    float_0 = -422.00327
    dict_0 = {float_0: float_0}
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, dict_0, bool_1, bool_1)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    int_0 = 1213
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    str_0 = "M7E8%"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bytes_0 = b"\x06\x05/\xdd\xe7i9\r\xfe\x0e]>L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    str_0 = "g\rKn)[;Q0TdX/U*i 2J"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "G5:)o,"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    int_0 = -978
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    list_0 = []
    list_1 = [list_0, list_0]
    tuple_0 = ()
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    str_0 = "q"
    module_0.match(str_0, str_0)


def test_case_1194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1195():
    float_0 = -1371.476
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = 1709
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1198():
    bytes_0 = b"\xc5\xcd\x11\xfe\x06\x19#\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"\\<\xe5\xaa\r\xfd\x9b\xe5\x8a53)~\xcauZ\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    str_0 = "aOK1##a\t:&6Cy1o9I"
    dict_0 = {str_0: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    int_0 = -1546
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    int_0 = -5051
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = ",-=p]j5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    str_0 = "yx\t?5tN$J!p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "H\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bytes_0 = b",\\\xda\x034\xac\xf5=hX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    str_0 = ">m^'uu}0\x0bU\"NN=^"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bytes_0 = b"\xb2\xe1u\t^)e\x1a\x89\xacc\xed\xf4\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    int_0 = 1707
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    str_0 = "q5hTf/&2A{\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    int_0 = 2328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    int_0 = -4270
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1217():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bytes_0 = b"[(\r\x92_\xe7Em\xfcAf\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bytes_0 = b"\x7f4\xf9\x03;/\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = 1096
    module_0.get_new_command(int_0, int_0)


def test_case_1221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bytes_0 = b"\xf8+\xc3\xcb/4\x9ep\x8fy\xfaX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = "rhy7w}HPDA:|wSMWI6U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    bytes_0 = b"\xdc\xcd\x93\x9b\xc0S\x8d\xb3\x96Pl\x8b\n\xbe\xae\x1e\xd9\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    str_0 = "Z(TW"
    set_0 = {str_0, str_0, str_0}
    dict_0 = {str_0: set_0, str_0: str_0}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    int_0 = 2193
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    complex_0 = 1140.377 - 1447.95j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    bytes_0 = b',l\x0b\x03\ri\x8c"fwb\xfc\xad'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    int_0 = 2532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bytes_0 = b"h\xdc\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    none_type_0 = None
    int_0 = 1093
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = 28
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    int_0 = -2492
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\xfc\xe0\xa4_\x91h\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    int_0 = -3496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b"\x15Z\x80|X"
    int_0 = -1907
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    int_0 = 1312
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    str_0 = "<pwG*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    complex_0 = 357.071 + 457.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    str_0 = "N<Fy'^:.NjV/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    float_0 = 834.219214
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_1249():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1250():
    int_0 = 1506
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = "kYpPMMn8\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    tuple_0 = ()
    set_0 = set()
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    int_0 = 1139
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = [tuple_0, set_0, tuple_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b"c\n2H\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    float_0 = 512.0827
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bytes_0 = b"\x9da\x86\xd6r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "[=Re"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    int_0 = -554
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    bytes_0 = b"F\xe2\xe5x\xf4\xc1w\xf6\xcd\x0b\x04\xa5\x11o\xc6"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bytes_0 = b"\xd5i\xf5?QK\xfe\x12\xe0\xc67\x14\xb2\xfdz\x1b\x8f\xeb\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    int_0 = -267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    int_0 = 2150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bytes_0 = b"4y"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bytes_0 = b"\xee\x13\t\xc5\xefr.m*\xe6\xc5\xea\x9d\xf6\xd8\xffa\x99\xd8\x19"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    float_0 = 740.84492
    str_0 = "]sn4!Q% 68{;rF7Ad"
    bool_0 = False
    tuple_0 = (float_0, str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    int_0 = -1094
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    int_0 = -1373
    bytes_0 = b"S"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    str_0 = "jF}qX]"
    module_0.match(str_0, str_0)


def test_case_1278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1279():
    str_0 = "TEb,}(w\r!Ml)>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    int_0 = -613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    int_0 = -865
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_1282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b"q\xf8\xe9\x1a4\x0f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    float_0 = -481.79
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_1285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1286():
    str_0 = "\nezDK,8t0;iyW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    complex_0 = 2014 - 1310j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = -1861
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    str_0 = "S$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bytes_0 = b"J\x98*"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    int_0 = -1552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    bytes_0 = b'bm\xb2#"\x98\xb79\x91\xf1 \xc0\x14\xf5)\xa5\x8b\xf3\xac#'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    float_0 = 3568.63357
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    str_0 = ".%NVR&9:PAIc:Ygys]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    int_0 = -2952
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    float_0 = -928.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    complex_0 = 1849 - 691.6791j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    int_0 = 2112
    str_0 = "Ba>y:G&[Wiz(MCW"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    bytes_0 = b"\t\xafF\x12b\xbd\xcf\xea\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    str_0 = "jq08Q:h\n.\r%GqtM5J-"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "i$yE,n&"
    str_1 = ">>Ads,*f&YV"
    int_0 = -85
    tuple_0 = (str_0, str_0, str_1, int_0)
    dict_0 = {tuple_0: str_1, int_0: tuple_0, tuple_0: str_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = -458
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bytes_0 = b"i"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    float_0 = 3137.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    float_0 = 4382.611
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    str_0 = "-j)>Y6"
    module_0.match(str_0, str_0)


def test_case_1309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bool_0 = False
    complex_0 = 1771.93 - 173.84j
    tuple_0 = (bool_0, bool_0, complex_0)
    list_0 = [complex_0, tuple_0, complex_0, tuple_0]
    tuple_1 = (tuple_0, list_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    bytes_0 = b"\x96\xb5Z\xf2\xa3\xba\xab\x08\x96_5dh\xa1\xad\xef^\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    str_0 = "eS'CbdUrA^&I!BU"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bool_0 = False
    float_0 = -554.895444
    tuple_0 = (bool_0, float_0)
    list_0 = [tuple_0, float_0, bool_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bytes_0 = b"/{\xa2\xa51c\x93\xd8jQ}n\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bool_0 = True
    float_0 = -789.867
    tuple_0 = (bool_0, bool_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "R26nLRD)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bytes_0 = b"\x8cA\x93?s#\xe0\xcf\x9f\x9c#\xed\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    int_0 = -1453
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    float_0 = 2068.65
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    bytes_0 = b"\x95\x8b\xfa\x19w\xfb\x1d\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    str_0 = "j\\Er'{rB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = 3438
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bytes_0 = b"S\xf1\x9f0\xfe\x83c|t\xa8\xc0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    str_0 = "BpYF\x0b"
    bool_0 = False
    int_0 = 1728
    dict_0 = {int_0: bool_0, int_0: str_0}
    bool_1 = True
    tuple_0 = (bool_0, str_0, dict_0, bool_1)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    str_0 = "`&>Z"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    str_0 = "+\r5L}0<Gbc"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    int_0 = 3018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    float_0 = 842.1
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = "^O0:\rsKr ox#"
    none_type_0 = None
    str_1 = "7?S}16[@1\tLRl:DhN<E"
    str_2 = "MRS]#N1"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    int_0 = 1453
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    int_0 = -1441
    int_1 = 746
    tuple_0 = (int_0, int_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    complex_0 = 1909.027 - 1225.749j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    float_0 = 3163.76
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bool_0 = True
    float_0 = 768.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    complex_0 = 4888.27816 + 4238.414j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    complex_0 = 1745.291241 + 3797.4322j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bytes_0 = b"\x86S\x8e\xf9\x01v\x15\xfe\xe2\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = 2933
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    str_0 = "T7&92a"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0,)
    tuple_1 = (set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"a\x97\x93\x8bf\x83\xd2\x1d"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    float_0 = -1613.27
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0, bool_0: bool_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    str_0 = "jr-QB!6b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = '>-*Lt=\nk5mbm"K\t@-Sy]'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    float_0 = -448.777064
    float_1 = 917.421942
    list_0 = [float_0, float_0, float_1, float_1]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    str_0 = ""
    float_0 = -1798.63
    bytes_0 = b"\xca"
    tuple_0 = (str_0, float_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    bytes_0 = b"\x9e\x05"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    bytes_0 = b"\x89J\xb8\x18i\xe1\x10mF.RZ\x9a\xef\x9f%\x9cQ"
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    complex_0 = 1066.4673 + 4217.54997j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    str_0 = "y-RO"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    dict_0 = {tuple_0: str_0, str_0: tuple_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    str_0 = "%43:9\r+"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    float_0 = 6.87832
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    float_0 = 546.73312
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bytes_0 = b"\xf8h>%\xe2\xd6\r\xab\x83\xa2p9\xf8]\xec\x9d\xdf\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = "jvOC"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    float_0 = -1295.347024
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b'\x7fL\x10\x18\xc3W"\xd8'
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    complex_0 = 1134.7 + 1887.416j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    float_0 = 1430.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    int_0 = -4640
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    str_0 = "|%,b-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    str_0 = "mq4D\t>Qks"
    bytes_0 = b"\xb8\xba\xf4\xb5B4"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = 2939
    str_0 = '{"nQnhe~m6%GQi[@'
    str_1 = "P!2tT\tt%}I2NQ/5"
    dict_0 = {int_0: str_0, int_0: str_1, str_1: str_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = "SGY(\row"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    tuple_0 = ()
    bytes_0 = b""
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    str_0 = "1J,CWJH)lwh#:j"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    int_0 = -1239
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"d`Iw\x9e\xa0\xdf\xfa)\x9b\xfcY"
    bytes_1 = b"\xef\x18\x04\xff\xd3"
    bool_0 = True
    complex_0 = -478.639 + 147.2j
    tuple_0 = (bytes_0, bytes_1, bool_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    str_0 = "Pj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    float_0 = -3213.241
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bool_0 = False
    int_0 = 3144
    str_0 = "G"
    tuple_0 = (bool_0, int_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    str_0 = "\tz"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    str_0 = "Z\x0bxJ*a +"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "Ee;\rfF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    float_0 = -1878.1
    int_0 = 618
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    bool_0 = False
    bytes_0 = b"\xb2p"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bytes_0 = b"\x05\xa5\x08\x00|e2\xa2n\x9ejQ\x854\x16\x95%\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    int_0 = 2794
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    bool_0 = True
    complex_0 = -1242.06 + 4150.75j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bool_0 = True
    int_0 = 2178
    list_0 = [bool_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


def test_case_1393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bytes_0 = b""
    str_0 = "ic*^JFz\r$|R^$%xR"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = -411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "biH\tkO,+D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    str_0 = "=,"
    set_0 = {str_0, str_0, str_0}
    bytes_0 = b"\xf8(\\\x87\x00\x0b\xb9!5"
    bool_0 = True
    tuple_0 = (set_0, bytes_0, bool_0)
    bytes_1 = b"\xea\xe3\xd4\xec"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"sg\xc3\x1c\xa3\xf9\xa5Q\xc4\x92\x05\xfb\xae\xb3\xcat\xe9\x1fS\x8b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bytes_0 = b"\xdb\xba\x01\xd5\xa0\xa0\xfd\xfc\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    bytes_0 = b"\xbc\x11\x9aJ\xd6;\xb3x\x97S\x06\xcd\x9a\xa1\xce\xc7\xa9\xc5i"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    none_type_0 = None
    float_0 = 1539.1489
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    float_0 = -444.03042
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    float_0 = 507.7078
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    bytes_0 = b"\x88\x92\xa2sx\xc2\x97\x8a\x81\xfd`\x85\x1f\xb4"
    bool_0 = False
    set_0 = {bytes_0, bool_0, bytes_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = -858
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    str_0 = "\\1P@@NR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    str_0 = "c2"
    module_0.get_new_command(str_0, str_0)


def test_case_1410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1411():
    bytes_0 = b"\x89\x83\x8b4\xc8\xc3(!\xacJ[\xd0f\x9fN\x7f\x17Q\xfc]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    none_type_0 = None
    int_0 = 961
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    complex_0 = -1849.82 - 1568.59826j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    str_0 = "kIKM2y]\r;\r7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b"\xf0\xd33\xe5."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "@o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    int_0 = -891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = -1355
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b"\x8a\xef\x9f\xf2e\xc8\xd8\xf0^\x15\x95P"
    str_0 = ">f'_NgMBg=cU"
    dict_0 = {str_0: bytes_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    complex_0 = 1126.4 + 1677j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = "QJ:-Y\\m;,v)GYp"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = 'o#mWa9n"~}kV9uu!'
    list_0 = []
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    str_0 = "]U\tTBD~fq]F@8I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bytes_0 = b"\xd9\x99\x0b\xf2\xd4\xca\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    int_0 = 1083
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    str_0 = "8:s\x0bN[I/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bool_1, dict_0, dict_0)
    list_0 = [bool_0, tuple_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    int_0 = 1091
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bytes_0 = b"sHE\xa8\x0c\xb1\xbf\xf4\x94P\x15O\xc77G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    none_type_0 = None
    bool_0 = False
    str_0 = ".Vx@Td\tU,ZDG(Mc"
    tuple_0 = (none_type_0, bool_0, bool_0, str_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    float_0 = 2987.0929
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    str_0 = "DA#[,Po0;x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    bool_0 = True
    str_0 = "/QN!o7/S"
    int_0 = 1919
    tuple_0 = (str_0, int_0)
    list_0 = []
    complex_0 = -1770.92 - 469.26j
    tuple_1 = (bool_0, tuple_0, list_0, complex_0)
    module_0.match(tuple_1, str_0)


def test_case_1437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bool_0 = False
    float_0 = -1017.434
    tuple_0 = (bool_0, float_0, bool_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    int_0 = -2224
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    int_0 = 1581
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    float_0 = -1456.267
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"]\xa2\xde\xf1\xc1\xb6h\xd6iV\xc9\xe1y\xad\x98\xb8\x8d\xea\x82\xdb"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bytes_0 = b"\x9e\xac;"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    bool_0 = True
    bytes_0 = b"#&\x08q\xf0^\xd2 "
    tuple_0 = (bool_0, bytes_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    int_0 = 1438
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    str_0 = "R1"
    module_0.match(str_0, str_0)


def test_case_1448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1449():
    float_0 = 4471.701
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    bytes_0 = b"\xda\xa8\x12\xad\xf3\x19^\x05\xdd)\xaa\xfa-\xedJ\x8eV\xa9"
    dict_0 = {bool_0: bool_0, tuple_0: tuple_0, bytes_0: tuple_0, tuple_0: tuple_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bytes_0 = b"\x07\xf6\x1fJ7\xf0\x90"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1454():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "S5(Hslgdv\t |"
    bytes_0 = b"\xa3\xbf\xcf\xe2\xbc\x041\x1c3\x1d0\xfb6"
    tuple_0 = (str_0, bytes_0)
    str_1 = "EtpdKpHQ"
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: tuple_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    complex_0 = -332 + 74j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = -305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = 1734
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bytes_0 = b""
    bytes_1 = b"\x133\xf4\xee\xab/,^\x1c\x03\xce\xe7:\xa0\xd5\xe8\xa7"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    str_0 = "bg|\\'Sgd\tI+\\`opy.Q3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    str_0 = ""
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = "sjWtJm4*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    bytes_0 = b"#\xab\xee\x98\x1e+\r^\xcb5F\xb3IxQ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    str_0 = "Jj>/D>h\t7vkSIL2\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    float_0 = 539.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    float_0 = -2826.194
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    str_0 = "(z!>=Wi) E,*Lq"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    str_0 = ",@D_?45F)4T|}3"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    int_0 = -98
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    float_0 = -60.1352
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    str_0 = "\\E9M\nz\x0ba\n!OZ~Fo}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bytes_0 = b"\xf6#\x80o\xf8\x0f\x0c8)\xc7\xa9 1\xa75\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    float_0 = 1405.327091
    none_type_0 = None
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    str_0 = "2nPo3/q#\\H{1"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    str_0 = "dL;"
    str_1 = 'O1E{P@1f]"3P3X:'
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bytes_0 = b"bu\n\xdb\xf7'+l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    int_0 = 5561
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    float_0 = -691.77662
    module_0.match(float_0, float_0)


def test_case_1480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = 2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_1483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bool_0 = True
    list_0 = []
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1, bool_0}
    tuple_0 = (bool_0, list_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bytes_0 = b"\x95 \x97\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    float_0 = 556.39006
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1488():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1489():
    set_0 = set()
    str_0 = "-J0SrwH[Z_"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bool_0 = False
    float_0 = -1081.61
    list_0 = [float_0]
    tuple_0 = (bool_0, float_0, list_0, bool_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = -1316
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    int_0 = -948
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    str_0 = "~9af"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    int_0 = 1384
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    int_0 = -2001
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    int_0 = 1437
    list_0 = [int_0]
    list_1 = [list_0, list_0, list_0]
    list_2 = [list_1]
    module_0.match(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    str_0 = "@[)_ph@p/fHn$B=DNyM"
    bytes_0 = b"\x91\x01\xf0\xaa5\xe9\xb7\x96b\xab"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0, bytes_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bytes_0 = b"]N\x93\xd0\xf4\xf2?\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    float_0 = 8.2
    module_0.get_new_command(float_0, float_0)


def test_case_1503():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1504():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    float_0 = -1568.0
    set_0 = {float_0, float_0}
    str_0 = "HyQ1"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    str_0 = "|]j4c(SZf*mNH<F"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bytes_0 = b"\xc6\xdc\xfd\xc9\x1e[Zi\x99\x96\x80)\xde#\xdd"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    float_0 = -1664.545922
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    float_0 = 1248.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = "iPc$Y]=T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    int_0 = 2319
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    complex_0 = 1356 + 55.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    int_0 = 1372
    module_0.match(int_0, int_0)


def test_case_1516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1517():
    float_0 = 524.097833
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    object_0 = module_1.object()
    set_0 = set()
    tuple_0 = (object_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    int_0 = 967
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    float_0 = 2540.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b"\x95q\xa4\x9f\xca\xbd\xed\xd5W\xe7\xb1\xe9"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    set_0 = set()
    tuple_0 = (set_0,)
    int_0 = 657
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    dict_0 = {}
    tuple_0 = (bool_0, set_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    int_0 = 3320
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    str_0 = "#S;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bytes_0 = b"\xb2\xaa\x95\x95\xa8cJ\x07\x00\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = "#0/^5\ta2\t-in"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    tuple_0 = (bool_0, list_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    str_0 = "(8G$g"
    set_0 = {str_0}
    bool_0 = True
    str_1 = "tZP&?]dcR/[88$i\\&"
    tuple_0 = (set_0, bool_0, str_1)
    tuple_1 = (str_0, tuple_0, bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    complex_0 = 654.726344 - 1085.8226j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    str_0 = "(\t6,s@> )7r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    bytes_0 = b"\xa6\x85\xb4\xce'\x9f\xccQ\x13\x8d\x16\xb5I4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    int_0 = -397
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    str_0 = "W8h3p\x0bG2F{u!\x0bkEkO\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    int_0 = 643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    str_0 = "i/3QxR/U1M&/"
    bool_0 = False
    tuple_0 = ()
    float_0 = -2695.0
    tuple_1 = (bool_0, tuple_0, float_0, bool_0)
    list_0 = [str_0, tuple_1, tuple_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    str_0 = "#jq0x\r\\2\r"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    float_0 = 2731.184
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bytes_0 = b"\x7f\x18\xbf\xb8W[\x05?\xfbK6\x15\xf8\xe2\xc1\x93\x82\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (set_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    str_0 = "v>+x/3(%}GSnX6'(fGZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = 651
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "Z\nZVc$};X:q{(5:B0 L"
    str_1 = "r&W8H"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: bool_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


def test_case_1552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1553():
    str_0 = "g6&2fb."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bytes_0 = b"\xa7\x87\xddja\xe6\xd3\xc1d\x14"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    float_0 = -2971.2953
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    str_0 = ":(Y\rS`S+&v\\z[kM\\"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bytes_0 = b"WT\xf1\xec\x81\xb5\xcf\xbfC\xfd\xd1w\x80n\xd7A"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    int_0 = -595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b"9\xbb\x95\x9cB\xc7\xa8e7\xf9\x13\xe8\xae\xa9\x10\xeb\x1aP\xa69"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    int_0 = 2347
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    str_0 = ',JU^R>+$"7'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    str_0 = 'j4KC~`@,@U#"&oH\\0'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    int_0 = 2510
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1566():
    int_0 = 325
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bool_0 = True
    str_0 = "\n\ndKq+7_bSJA"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = "@|Mj~-1QVY`wS'!(Ki"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    int_0 = 1091
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = ".FzL:1Bm1"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = -2716
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    float_0 = -5.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    complex_0 = -1171.831 + 3432.819j
    list_0 = []
    module_0.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    list_0 = []
    float_0 = 429.6828
    str_0 = 'a[P%*12"F$T\nLkq'
    dict_0 = {str_0: float_0}
    tuple_0 = (list_0, float_0, dict_0, str_0)
    list_1 = [tuple_0]
    tuple_1 = (list_1, str_0)
    module_0.match(tuple_1, float_0)


def test_case_1575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1576():
    bytes_0 = b"`VqC\x97\x8d\xa9QA*$\x9a\x8bD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    str_0 = "']0f!F]`/;G\rf\x0cEY?{}"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    str_0 = "NJP8Em>X*"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    int_0 = 2477
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    str_0 = 'CQhKtG&(rKG2"=GY9P'
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    int_0 = 2255
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bool_0 = False
    object_0 = module_1.object()
    set_0 = {bool_0, object_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    complex_0 = -1220.60522 + 4805.3446j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"W\\\x1bp~%\xde\xfd\x10<\x9do%cv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"\xeb%\xce\xb1\xbd\x98v\xe7\xf0J\xbd{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    str_0 = "\\[{B$/][;IZ?~ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    str_0 = "&"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"\xdfZ\x0b\xa1z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    str_0 = "-_ys+8K\rdHi;\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"E\x9cb\n\xd84"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_1591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1592():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "*CUuhi_.~\x0cG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    bytes_0 = b"\x19\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bool_0 = False
    str_0 = "d\rvgk\x0bVs\n;Zx"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"\x84,\xa3p"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = ">Z#"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    bytes_0 = b"\xb9\x10G\xd2\xaa\xd0H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    str_0 = " 7EM/@K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    float_0 = -1737.30785
    tuple_0 = (float_0,)
    set_0 = {tuple_0, float_0, float_0, tuple_0}
    tuple_1 = (set_0, float_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    str_0 = "HywaQ%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    int_0 = -553
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    str_0 = '0dzTvcM-"O'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    int_0 = 421
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    int_0 = -2678
    object_0 = module_1.object()
    set_0 = {int_0, int_0, object_0}
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    complex_0 = -106.689518 + 2695.5j
    int_0 = 1279
    set_0 = {complex_0, int_0, complex_0, complex_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    str_0 = "&/V"
    list_0 = [str_0]
    list_1 = [list_0, str_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    float_0 = 765.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = -326
    float_0 = -208.266
    module_0.get_new_command(int_0, float_0)


def test_case_1612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1613():
    none_type_0 = None
    int_0 = 2253
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    float_0 = 1526.35171
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    int_0 = -1088
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    complex_0 = -5674.477 - 136.754j
    list_0 = [complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = -1150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    int_0 = -502
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bytes_0 = b"\xbe`\xda8\x91\x92\xff"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    bytes_0 = b"Y\x85\xf0\x7f8\xefpu\xa1U\xe3\xfd\x03\x96\x17\xc1*\x99\xe3"
    dict_0 = {}
    tuple_0 = (bytes_0, bytes_0, dict_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = True
    bytes_0 = b"\x17/\xdcO8\x07|b"
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


def test_case_1623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1624():
    float_0 = 1144.40614
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, float_0]
    list_2 = [list_1, float_0]
    module_0.get_new_command(list_2, list_2)


def test_case_1625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1626():
    bytes_0 = b"`?"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    float_0 = -633.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    bytes_0 = b"%\xb2\xc29\xc3\xf7\xa5\xa2\x04f3u\xdc2\x0b\xec\x9c\x98\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    int_0 = -2578
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bytes_0 = b'\xc8\xf4\xcb\xc8\xba\xbc\x9f\x1a\xa3\xab@\xa8u"\xd7\x99\x07\xb8M\x86'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    complex_0 = 1422.2724 - 180.296j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    tuple_0 = (complex_0, dict_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    float_0 = -1060.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    int_0 = -319
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    int_0 = 2033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    str_0 = "\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    none_type_0 = None
    float_0 = -327.29
    module_0.match(none_type_0, float_0)


def test_case_1638():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bytes_0 = b"H={\x1f\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b"\x08\xf6\x0fu|6\x01x\xe9\x9a\xed\xf5\xfc\x93"
    set_0 = {bytes_0, bytes_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    complex_0 = 695.275099 - 2431.494j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1645():
    complex_0 = 2042.992 + 2602.54315j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1646():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1647():
    int_0 = -571
    module_0.get_new_command(int_0, int_0)


def test_case_1648():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bytes_0 = b"T\xd2\x94:\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    str_0 = "+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    int_0 = -869
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    complex_0 = -442.907786 + 3502.49613j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    str_0 = "R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bytes_0 = b"\t\x90D\xda\xe5\xda&&m\x19\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bytes_0 = b"\xc7\xe9\xd4\xc2\xc9\xb0X\xff\x0c\x9a\x97\xe0\xe0qL\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    bytes_0 = b"\xe0\xea\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    complex_0 = -2063.69 - 1972.7607j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    float_0 = 1049.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = -519
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    str_0 = "at\n)Ux ^X^p_x(O&\r"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bytes_0 = b"\x159\xbe\x1a\xfd\x02\xbd\xd3\x1e%\x15\xb3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    float_0 = 861.8
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    int_0 = -364
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    int_0 = 2612
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: list_0}
    bytes_0 = b"\xab"
    int_0 = -1772
    tuple_0 = (dict_0, bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    str_0 = "8W>"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    str_0 = 'Y=;^cj\n}Y(w08V1U"yX~'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = "\ruV\t`9_2(V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    float_0 = -256.1727
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    bytes_0 = b";\xe8\xb8\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    str_0 = "eT{P@P{-2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    str_0 = "d%1Ybu':f|mT\x0cV+CxMu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bool_0 = True
    int_0 = 2661
    tuple_0 = (int_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    list_0 = []
    bool_0 = True
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bytes_0 = b"\xe9.\x95\x98\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = -154.32444 + 852j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    complex_0 = 573.19 - 4140.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    str_0 = "axv`gt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1683():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1684():
    float_0 = 3432.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = 586
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    list_1 = [tuple_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    int_0 = 1160
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    int_0 = -415
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = "IY8.;PBD$m&uq0`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    str_0 = "grpu*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    int_0 = -914
    module_0.match(int_0, int_0)


def test_case_1694():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1695():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = -111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    complex_0 = 63.2 - 794.14j
    dict_1 = {object_0: dict_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    str_0 = "kFNBK_rfzRl^ey[FA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    str_0 = "W!>,w1jc^@OF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bytes_0 = b"\xac\xfa#(\xb1\xc9h\xbc\xaeu\xf9p\x15\xb4\xcf\x08\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = -431
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    str_0 = "@ejf]}+DE"
    module_0.match(str_0, str_0)


def test_case_1704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"i0\x80^w:I\x7f\xad\xd21\xab\xf6Y\xd2h&"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "[IF>d`c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    str_0 = "3i~wK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    list_0 = []
    str_0 = ";DY%/Q6H"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    complex_0 = -1809 + 1522.03j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    tuple_0 = ()
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    str_0 = "Ryd@;h-2&Z@\tx);0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    int_0 = -1653
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bytes_0 = b"\xf1\xb53\x06\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = "4Zte\x0b "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    int_0 = -301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "L[i%~\t!N5%Of#\x0bG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bytes_0 = b'>\xb1\xe2")S\x8a\xc1\xb1\xb8\xa3\xf56\xe6\\\xf2N'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    int_0 = -1228
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    int_0 = 1157
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    complex_0 = 23.825571 + 2364.8371j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    int_0 = -2257
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    str_0 = "#Kc65"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    tuple_0 = ()
    int_0 = 2246
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    bytes_0 = b"\xb0\x1e\x93\n\xf1M\xca^Kg\xe2~\x8d\xc0|\xb0\xd3\x1e-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    float_0 = 1491.858
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bool_0 = False
    bool_1 = False
    bytes_0 = b"\xa3\x13\xe6\xb4?"
    str_0 = "Bm1OXA-^y}ZFp"
    tuple_0 = (bool_0, bool_1, bytes_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    int_0 = 912
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    float_0 = -1189.16
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    complex_0 = 871.22594 - 1844.020747j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bytes_0 = b"\xbf;."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    float_0 = 3532.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    str_0 = "J.Y,5<|"
    str_1 = "\x0b+#&"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    str_0 = 'l\nm"t?E'
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    int_0 = -1735
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    float_0 = 2068.47
    tuple_0 = (float_0,)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bytes_0 = b"B\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"6\xd8V\xa4\xbe\xf6\xb7\xe4\x85O\x9c\xaf\xf4n\x1c\x8e\x05`\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    int_0 = 192
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    bytes_0 = b"\xac:\xf8\xdd\xe0\x8b\x8ef\xd9W\xf2L\xdb\x96\x0f\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    float_0 = -741.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    complex_0 = -748.16582 - 1535.866928j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    int_0 = 2466
    module_0.get_new_command(int_0, int_0)


def test_case_1747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1748():
    int_0 = -282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    int_0 = 553
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    float_0 = -3276.39
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    float_0 = 2747.94
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    complex_0 = -236.4 - 1429.6313j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    complex_0 = 5918.750543 + 1308.192814j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    none_type_0 = None
    complex_0 = 1826.72 + 571.702j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bytes_0 = b"\x04$\xb1\xd2\x07\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "\t\\X7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    int_0 = -1552
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    complex_0 = 479.0578 + 1931.693371j
    tuple_0 = ()
    dict_0 = {complex_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    float_0 = -2946.56
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    int_0 = 1693
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    str_0 = '8;g.\n"FKG[grkn^%>b)'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    str_0 = "DN@1xcedL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    str_0 = "5]Q0X@.V|TS<5n"
    tuple_0 = (str_0,)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    tuple_0 = ()
    bool_0 = True
    list_0 = [tuple_0, tuple_0, tuple_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    none_type_0 = None
    str_0 = 'b+6O5Plg4"HZ'
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    str_0 = "$|lQ]r]sVG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    bytes_0 = b"8D\xe9\x05\x9b\xf6\x9a\x08j\xf0\x95\xba\xf1\xf4\xedG"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    none_type_0 = None
    int_0 = 2310
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    bytes_0 = b"_:\xd3\xc8xi\x81"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    str_0 = "D\nxiK@-V\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    complex_0 = 2383.60522 - 500.7j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "<1H9"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = ";\rY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_1783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1784():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b"?`\xbe\xde=Pa\x1b\xcb\xf7%n\xf4\xeb\x1c\xd5Q\xa8p"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    complex_0 = 854 - 1032.017568j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    str_0 = ")0nzQv}{]V;D1~,M<G9["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    int_0 = 786
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = -558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    int_0 = 1981
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    int_0 = 915
    float_0 = 4255.568
    set_0 = {float_0, float_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bytes_0 = b"@I1\xb7\xa4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    float_0 = 428.211
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    float_0 = -481.193
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    int_0 = 1799
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = -497
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b"[<g\x94\x88"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    str_0 = "e!H'v6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    int_0 = -62
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bool_0 = True
    int_0 = -2172
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    complex_0 = -690.049 - 842.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "6r3RC,7'kq"
    set_0 = {str_0}
    tuple_0 = (str_0, str_0, set_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    list_0 = [set_0, tuple_1, str_0]
    tuple_2 = (bool_0, list_0, str_0)
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    str_0 = "idC\x0b6`,^"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    int_0 = 1255
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    str_0 = "i<V9`5\x0cXN>9%X]`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    str_0 = "$Q`IH{DFhnoIHx<k7v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bytes_0 = b'$\x12}"\x9aC\xef\xdbv'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = 2133
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    float_0 = -1881.523877
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1815():
    float_0 = -3001.84
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    str_0 = "HEeUq3Ef5I%\x0bFTW*`ZR"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    int_0 = -223
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    int_0 = 1984
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    int_0 = 1507
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    str_0 = "\\@wDI%ge>;)0:w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bytes_0 = b""
    float_0 = 3481.16056
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    tuple_0 = ()
    float_0 = -106.59516
    tuple_1 = (tuple_0, tuple_0, float_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    complex_0 = 165.46901 + 4516j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    bytes_0 = b"\xf5i\x0f\xe9\xef\xa4\xaf:>oM\xcc\xbf^\x16]\x11R!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    bytes_0 = b"Pe\xa6q}(EMO\xb2!\x15\x99\x04\x83{\xfb\xeeh"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bytes_0 = b"eh\x90c1\x88\x00\xdc\xac\xcb\x02\xe0\x7fe\xd2\x80\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    str_0 = "G!+Q_Q95P"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bytes_0 = b"\x05b@"
    module_0.match(bytes_0, bytes_0)


def test_case_1831():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bytes_0 = b"~it\x92\xc2\xf1v!\x1d\xeb\xc0\xbb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    str_0 = ""
    str_1 = "t,u+hZRr%\t"
    str_2 = "_ 4k/=L3I+("
    str_3 = "2_$|+B2><N^"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "|om}E^}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = 649
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    int_0 = 2666
    bytes_0 = b"Z\x86\x0ct\xc8_\xd4/\x0e\xe6\xb2\xac\x05I\x12\x87"
    dict_0 = {int_0: int_0, int_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bytes_0 = b"\x17\x88S\xa8\xd07\x92T\x01\xb4\xdcI\x86\xbe\xab\xa5\xfd6\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    int_0 = -2813
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bytes_0 = b"\xf2Z\xbd\xb2\x96P\xcb\x82\x9f\xe5G\xc3\x06\xc2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    int_0 = 3371
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = "\x0c9we"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    int_0 = -2558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    bytes_0 = b"Pz\xd3\xbe3\x00\xb5\xc5\xc4M\xc7\xc1\x83`\xe9\xf11\xaf\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    none_type_0 = None
    float_0 = 1063.11466
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    float_0 = -697.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    float_0 = -289.784
    float_1 = -963.571
    bool_0 = True
    tuple_0 = (float_0, float_1, bool_0, bool_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    int_0 = 3477
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    float_0 = 1944.512917
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = "f~p'3b\n}Zwb2Z<nn&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    int_0 = -5400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b"\xae\x90#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    int_0 = -1137
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bytes_0 = b"\xe7\x92\xad7\t\xecp\xb4G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    int_0 = 2636
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {bool_0, tuple_0, tuple_0, tuple_0}
    tuple_1 = (set_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = "iofSqS\t&'=]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "iJgJ{\tC].qTJVr"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


def test_case_1866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1867():
    str_0 = "FKomRF\\DOJ8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    str_0 = "%rvWm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    tuple_0 = ()
    complex_0 = -188 + 712.49318j
    bool_0 = True
    tuple_1 = (complex_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = 475
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    complex_0 = -2042.5365 - 2328.608845j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bytes_0 = b"AG-_\xa5\xf3\x12'\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    str_0 = "xHO)L="
    module_0.match(str_0, str_0)


def test_case_1874():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1875():
    str_0 = "@x{IL;2x"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    float_0 = -406.84051
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"\xac\xdc\xd4\x04\xd1b\xf2\xd0\x91\xb2\xccw\x0f\x86\x8c\x8f\xe5K\xfc"
    list_0 = []
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = "#ML E)3?{f;[+F}@7"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    int_0 = -1518
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    str_0 = "T><}SAN"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    str_0 = "su#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    float_0 = -865.8413
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    int_0 = 2136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    str_0 = "c\t!LT;h_"
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bool_0 = True
    bytes_0 = b"\x10E\x98\xeb\xb4\xa7\xa3\xff\xfb\x0f\r\xb2"
    int_0 = 1255
    tuple_0 = (bool_0, bytes_0, int_0)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    float_0 = 1015.488324
    bytes_0 = b"\x1fWS\x86\xac"
    bytes_1 = b'DO69\xd1\x89o\x9eb\x03\xe4\xcb1\xad,\xc3"'
    int_0 = 750
    dict_0 = {bytes_1: float_0, bytes_0: bytes_0, int_0: float_0}
    str_0 = "AO\raE^5n3"
    tuple_0 = (float_0, bytes_0, dict_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    float_0 = -3492.9521
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1889():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1890():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = "71w\rSOZmaG`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bytes_0 = b"\xd8\x80\x1e\x8d\x13\xc6\xc0\xa3\xab\xa4=\xa8\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = 1166
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = "\n$qXK+~+%{r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    str_0 = "i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    str_0 = "b*9(F vRkW'%u%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    int_0 = -11
    set_0 = {int_0, int_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    complex_0 = -4527 - 811.624j
    int_0 = -2359
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    int_0 = -2467
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = -1446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"9\x19 \xa8z`\xdd\xaf7\xe2\x94\xea?gg\x85"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    int_0 = 1216
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    str_0 = "eX{N\t:50n*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = 1282
    set_0 = set()
    list_0 = [int_0, int_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    str_0 = "i:&@?!s-v1\tAqq.m)Ea"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    tuple_0 = (str_0, bool_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    str_0 = "t2.T,t ?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bool_0 = True
    bytes_0 = b"9\x1c~\xf1\x81\xe8\xce\xdb\xd5\xf9t\xde"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    float_0 = 519.601419
    module_0.get_new_command(float_0, float_0)


def test_case_1912():
    pass


def test_case_1913():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    bytes_0 = b"1>\x99iK\xb6u\xfb\xf2t=9&"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    bytes_0 = b"HtG7t\xd4 \xfb\x08E\xbc\xc8\x1e\n\x92\x17\xcc\x12\xec"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bytes_0 = b"-\x08\x11\xd9\xfc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bytes_0 = b"\x8fld\x7f\x14[d\xdepK!R\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    int_0 = 3348
    list_0 = [int_0]
    str_0 = "\x0b>O:MC ;^"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    int_0 = -536
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bytes_0 = b'\x93D\xde\x02\xab\x12\x00\xec@p\x9ff/"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    str_0 = "T2d';J5$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    float_0 = -3425.401
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bytes_0 = b"\xa5\x80\xe9\x19\xec*\x97|L?\xe1\x97\xfb\x1b."
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    float_0 = 1584.3749
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bytes_0 = b"\xe7\xc3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    int_0 = 334
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    int_0 = -2145
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    float_0 = 885.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    bytes_0 = b"\xf7\x98\xd6v\xf2&w[\x16P\xd7\x9b\xa5\xff\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    str_0 = "nXv?R3<)J_)zYpQ"
    module_0.get_new_command(str_0, str_0)


def test_case_1936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1937():
    none_type_0 = None
    str_0 = "vRq;"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = "z5CV"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bytes_0 = b"\xbe7\xf5M\xc8\xae9\xb3K\x9c\xe4\x1c("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    float_0 = 1202.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    int_0 = -283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    str_0 = "8\x0czp1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = 464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bytes_0 = b"\xd7\xcc\xccQ\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    str_0 = "R7DJ~.((/b^/U2V}<&8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bool_0 = True
    str_0 = ""
    tuple_0 = (bool_0, str_0, bool_0)
    tuple_1 = (tuple_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    str_0 = "<\nb"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    int_0 = 3778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    str_0 = "K?hQtqW>8"
    int_0 = 2451
    bool_0 = False
    list_0 = [bool_0, int_0]
    tuple_0 = (str_0, int_0, bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    str_0 = 'M"tJ7>g*+\n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = False
    bytes_0 = b"\xbf\x02"
    tuple_0 = (bool_0, bool_0, bytes_0)
    bytes_1 = b"\xf89R\x05~\xa3\xffk\xbb\xba\xc2\rm"
    dict_0 = {tuple_0: bytes_1, bytes_0: bool_0, tuple_0: bool_0, tuple_0: bool_0}
    str_0 = "2tC"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    float_0 = 1623.818
    list_0 = [float_0]
    list_1 = [list_0, float_0, list_0, float_0]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    none_type_0 = None
    bytes_0 = b"\x87\xb3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = True
    str_0 = "StC~>v\r\\D#\\a\n>D\n\rK)"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    complex_0 = -1548.524 + 3748.9101j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    float_0 = -1137.06972
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    str_0 = "xD:.4\ni@hcB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    int_0 = 488
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"\x8f=\xc0/{^"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    float_0 = 192.8
    list_0 = [float_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    none_type_0 = None
    int_0 = -226
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bytes_0 = b"\xef\x19 \x82\x8b]\r\x85\x8e6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    int_0 = -112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    str_0 = "'dpd9$MCV'7\n@QA_sE<6"
    bytes_0 = b"\x85\xbb\x8cZ\x08\\\xb4\xa5\x95\xd1\x9bPN\xc5h%\xb9"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    str_0 = "M31,~)#G5\\;~J("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "huFBO7`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    bytes_0 = b"\x9a\r\xce\x14\x1e\xa2\x14(&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b" 2\x07.oW\x13"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = ()
    list_0 = [set_0, tuple_0, tuple_0, tuple_0]
    str_0 = "I#SQZ*1[?9`-c3Fc"
    none_type_0 = None
    str_1 = "#g8\t$G\t:\r.T"
    str_2 = "@iZW^H0b2s|#5Znd<DN*"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    str_0 = "~;+#3\ry"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b"\xbf\xb90\x00\x00\xd7\x82c\xff"
    bool_0 = True
    bool_1 = False
    bool_2 = True
    list_0 = [bool_1, bool_1, bool_0, bool_2]
    int_0 = -2070
    tuple_0 = (bytes_0, bool_0, list_0, int_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    str_0 = "ZDc6Ln@)DB%x3)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bool_0 = False
    object_0 = module_1.object()
    list_0 = [bool_0, bool_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    str_0 = "Jl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


def test_case_1981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1982():
    str_0 = "dAW)GLFalJU\x0c! S]O;`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    int_0 = 1346
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {bool_0: dict_0, bool_0: dict_0, bool_0: dict_0, bool_0: bool_0}
    tuple_0 = (dict_1,)
    module_0.match(tuple_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bool_0 = False
    str_0 = "M$H1*&w]/"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (bool_0, str_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    float_0 = -505.285217
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    float_0 = 146.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bytes_0 = b"z\xef,e\xc2\xe3\xa6\x80U"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    bytes_0 = b"\x9e\xd5\xbe\xe8\xa1\xc9\x96\xd6\xed%\xbeO\x9f\x8c\xeb\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    bytes_0 = b"\xb5\x15\x91"
    int_0 = 215
    bool_0 = True
    tuple_0 = (bytes_0, int_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    int_0 = -3582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    none_type_0 = None
    str_0 = "!SZYV;) .TIN"
    tuple_0 = (str_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = 2391
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    str_0 = "=#.6oTvLwx3c-u#o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    str_0 = " 6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    str_0 = ")dea+\n3r12{"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    set_0 = set()
    tuple_0 = ()
    tuple_1 = (set_0, tuple_0, set_0, set_0)
    list_0 = [tuple_1, tuple_0, set_0, tuple_1]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bytes_0 = b"\xbe\xc7\r\x15\xdb\x069\x7f#\x1a\xa0-\xb9\x1f"
    tuple_0 = (bytes_0,)
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, bytes_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    float_0 = -2304.02445
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    int_0 = -2286
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bytes_0 = b"\x95\x03\xf6\xfc\xba\x83\x03v\x9f\xce\x1e"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    float_0 = -1863.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"\xe5\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "e$F"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    str_0 = "!eHs8^JP{6W/Oq*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_0, bool_1: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bytes_0 = b"bS\x8f]#\x02\x18\x9e\x82\x1b\xf0\xeb\xacs\xe0\x95\xb2\x9cW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    int_0 = -962
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bytes_0 = b"\x8b?\xc6 \tu\x87[\x1e@&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    int_0 = -1538
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "IzxD'A9B~ JMzm^oT,\tl"
    dict_0 = {str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = 220
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    str_0 = "z.x%1,~luQ"
    module_0.match(str_0, str_0)


def test_case_2018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2019():
    str_0 = "glLNgq8kO;(+wE'Y-/"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bytes_0 = b'\x8c\x87!\x11l\xc6\x97\x82\xc6"\x06\xc4\xda\xffG\xea\xecw\xd5\x8a'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    str_0 = "l*G~S5I5jmg[_"
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    str_0 = "ei"
    float_0 = -3224.901
    list_0 = [float_0, str_0]
    float_1 = -1982.0
    float_2 = -728.214
    tuple_0 = (str_0, list_0, float_1, float_2)
    module_0.get_new_command(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    str_0 = '$2`w_q\\?"$Q'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    bytes_0 = b"}7t\x8e\xe5%Gx\xfa\xb2OI\x10O\xb7\xbb,\x18\xeeq"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = "ep)~vEra+^WZ\n9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    tuple_0 = ()
    float_0 = 4003.87658
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    int_0 = 30
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bytes_0 = b"4>\x90rZ\xa2\x96\xed\xb8/\x8bt\xf2\x92"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    int_0 = -1954
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    float_0 = 1535.3193
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    int_0 = -1782
    bool_0 = True
    tuple_0 = (int_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_2035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2036():
    complex_0 = 1848.9 - 2611.63j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    int_0 = -2990
    bytes_0 = b"\x8b"
    dict_0 = {int_0: int_0, int_0: bytes_0, int_0: int_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = -2921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bool_0 = True
    str_0 = "~C]\ttao"
    set_0 = {bool_0, bool_0, str_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = -3328
    float_0 = -2389.16731
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    int_0 = -989
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    complex_0 = 921 - 1279.77j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    float_0 = -1542.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    str_0 = "?["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    int_0 = -684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    str_0 = "kc:p`zAm\\X=v."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    float_0 = -4887.20226
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    float_0 = -1877.629
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    int_0 = 2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    float_0 = -361.390379
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    int_0 = 760
    bool_0 = True
    list_0 = [int_0, int_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    int_0 = -1701
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    int_0 = -2671
    module_0.get_new_command(int_0, int_0)


def test_case_2056():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2057():
    float_0 = 1385.90235
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    float_0 = -761.489289
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    bytes_0 = b"\x80"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bytes_0 = b"\x86\x9cy\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    float_0 = -612.2
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    str_0 = 'fLr\x0ca>"344[wDHs=_G'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bool_0 = False
    complex_0 = -150.741358 - 2376j
    dict_0 = {complex_0: bool_0, complex_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, complex_0, dict_0)
    tuple_1 = (tuple_0, dict_0)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bool_0 = False
    str_0 = "\n9\n~ie>P"
    tuple_0 = (bool_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    str_0 = "dQg'>sP]qX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    int_0 = -1708
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b"\xfahWt\xd0\xbdb$\xe7^\xf8\xb2\xcb\xa16\x94{\xa2\xc6D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = 12
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    str_0 = "y^"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    object_0 = module_1.object()
    bytes_0 = b"\xf0\x1f\xa3}t\xdc`\x07\x08@a\x0c6?\x90\nLJ"
    dict_0 = {object_0: object_0, object_0: object_0, object_0: bytes_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    complex_0 = 2156.284 + 1561.213831j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bytes_0 = b"\x05P.\xe1=9v2"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b"\xcd\x8f\xa6<vg8o4\xf5c\xb7x"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    str_0 = "Y\x0b-"
    bytes_0 = b"\xbc+\xce\xe6g\xebHA\xc1'\xc4\xba\xb4"
    float_0 = 544.6
    tuple_0 = (bytes_0, float_0, bytes_0, bytes_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    none_type_0 = None
    int_0 = 108
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = 1808
    bytes_0 = b"\xa1\xcd\xa3\xae'\xf7oI\r\x99r\xcf\xc8\x1b\x8e<w\x18"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


def test_case_2079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2080():
    float_0 = -1300.7988
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    str_0 = "<rp*"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    str_0 = "oRI\n9%mxJpMwg~.B\x0c6"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    int_0 = -506
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    str_0 = '.7S"H$\x0c{\\wr-uCQG{3L`'
    str_1 = "Ija4\x0cjCHt=mC"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bytes_0 = b"\xae\xdbQ"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    float_0 = 1959.3877
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    str_0 = "CNeo%GQ d9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    bytes_0 = b"\xcea\x07\xb8<v\xd1"
    str_0 = "Fl<0ZXd"
    str_1 = "Uo\x0bGm80W8?[eq#@E7z}W"
    str_2 = "u!f5xkOHf1[`,kx"
    dict_0 = {str_0: str_0, str_1: bytes_0, str_1: str_1, str_2: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = -367
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    float_0 = 2506.4561
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    complex_0 = -1588.2 - 2483.8j
    tuple_0 = (set_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    complex_0 = 4282.43313 + 235.587j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bytes_0 = b"9\xa4I\xdb\xac\xbbn\xdcVG\xe5\xc9\xc4\x99m\xaa*\xd2T\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bytes_0 = b"\xc1U"
    int_0 = -2002
    dict_0 = {bytes_0: int_0, int_0: int_0}
    tuple_0 = (bytes_0, bytes_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    tuple_0 = ()
    bytes_0 = b"=\xf6\xaa\x8be\x01\xdd=\x10\xab{:\xe5T\t\xe6\x8a\xf00"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    str_0 = "|00"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    int_0 = 1731
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    str_0 = "K$OQS\x0cPF=B"
    list_0 = []
    float_0 = 464.192
    list_1 = [list_0, float_0, list_0, str_0]
    tuple_0 = (list_0, float_0, list_0, list_1)
    list_2 = [str_0, tuple_0, str_0, list_0]
    module_0.get_new_command(list_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    complex_0 = -56.035471 - 97.74j
    float_0 = 1759.37554
    int_0 = -1452
    tuple_0 = (complex_0, complex_0, float_0, int_0)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    str_0 = "LiS2%}~Cxms(9jrGQ#e~"
    tuple_0 = (str_0,)
    complex_0 = -1993.41 - 652.693j
    tuple_1 = (tuple_0, complex_0, str_0, complex_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    int_0 = -1447
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    none_type_0 = None
    str_0 = "329bo"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    str_0 = "lC}eM1bk"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2109():
    pass


def test_case_2110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b"+\xc0LR\xd0\x1f$"
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bytes_0, bool_0, dict_0)
    complex_0 = -85.07 - 694j
    tuple_1 = (tuple_0, complex_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    int_0 = -815
    set_0 = {int_0}
    dict_0 = {int_0: int_0, int_0: int_0, int_0: set_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_2114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2115():
    str_0 = "KSwz(Uj,/IN`;uH\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    complex_0 = -2618.385 + 107j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = "\rVD5,]2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    str_0 = "\x0b\x0bJ}ohzAZeRJfG,~=F6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    float_0 = -499.16522
    tuple_0 = (float_0, float_0)
    dict_0 = {}
    bool_0 = True
    bool_1 = False
    tuple_1 = (tuple_0, dict_0, bool_0, bool_1)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    bytes_0 = b"\x9e\xea\\\xb7\\g"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0]
    bool_0 = False
    dict_0 = {}
    bool_1 = True
    tuple_1 = (list_0, bool_0, dict_0, bool_1)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    str_0 = "z\x0b]R"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "J8?\x0b<sr;Ec&"
    module_0.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    complex_0 = 2336.16 + 7.2741j
    module_0.match(complex_0, complex_0)


def test_case_2126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2127():
    float_0 = -3011.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    tuple_0 = ()
    bytes_0 = b"\xc8VXCM\xd7n\x06\xf7"
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    bytes_0 = b"\x1evQ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    int_0 = -2179
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    float_0 = 1199.817
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bytes_0 = b""
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    int_0 = 947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bytes_0 = b"4YI:\xda\x96\xec\xc4N\x10\x16"
    int_0 = -2846
    tuple_0 = (bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    str_0 = "G30v\x0bofJOZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    float_0 = 1324.394771
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "Z#Sf\x0bj1aaAb&\nYwNF3q."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bytes_0 = b"\xfe\x8e\xd8\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    str_0 = "j<h$=T$gwD"
    none_type_0 = None
    str_1 = ";kAR]y.4&\n"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    bytes_0 = b"\x802\r-8P\x9c\x1f\x9b1n\xdc\x8e\xa9\xce=\x95@X#"
    float_0 = -322.12
    tuple_0 = (bytes_0, float_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"\xe8s\t+@\xbdg\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    float_0 = 1681.39873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b"\xf1\x8e\xdb(\xc5\xc6\x90Scf"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2145():
    bytes_0 = b"P\x96s\x1f\x9d\xf6\xec\xaeIf\xe4\xbc\xec\x95\xd5D\xcfA\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bytes_0 = b"\x06\xf5Ge.\x9a\xec\x1a\xa9\xab8\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    int_0 = 3166
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, int_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_2148():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = -2252
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    float_0 = 986.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    bool_0 = True
    bytes_0 = b"\xd4$K\x07\r\xc8\xf9\xc8\xeb#3\xac"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    str_0 = "&1\x0c"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    str_0 = "qoo}P#Uf@?P4&g^^D4"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bytes_0 = b"qL\x1au<[\x85\x95\x8bh\x9d5)"
    bytes_1 = b'2\x97`/G\xd5\x81\xadO5-"'
    set_0 = {bytes_0, bytes_1, bytes_0}
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    int_0 = 1783
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    bytes_0 = b"n\x84\xeep\x14\xad\x01o\xd0\xbc\x8d\x9d"
    int_0 = 869
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = -1858
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    int_0 = 3791
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    complex_0 = -871.197 + 751.587j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    bool_0 = False
    str_0 = "xV|w6zm#eIQ\nm!V~0?H"
    set_0 = set()
    tuple_0 = (str_0, set_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    str_0 = "4y"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    list_0 = []
    tuple_0 = ()
    tuple_1 = (tuple_0, list_0)
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    float_0 = -1847.257378
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bytes_0 = b"\xce\x87l\xa8di\x1c\x7f\x01\n\x8aZ\x14'AP\xd1\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bytes_0 = b"\x1b\xd2}Z\xad\xc4<\xf8'pm^\xae\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = "C"
    str_1 = "^G@8}J+24yI"
    list_0 = [str_1, str_0]
    tuple_0 = (str_0, str_0, str_1, list_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    float_0 = -282.31032
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    bool_0 = False
    str_0 = "FUoflY+SZH]1UJl[k"
    list_0 = [bool_0, bool_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    float_0 = -110.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    float_0 = -1961.354026
    float_1 = 3445.74269
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    set_0 = set()
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    str_0 = "-tUHS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    str_0 = "`$bVW\rs0\r."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    float_0 = 1922.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "h"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    int_0 = 1253
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = ")vE82u&4ac'J:d\""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = -1188
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = True
    int_0 = -1226
    module_0.get_new_command(bool_0, int_0)


def test_case_2184():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2185():
    int_0 = 1013
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "T~Kn`=Y`#,^~\\>j"
    dict_0 = {str_0: list_0, str_0: none_type_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bool_0 = True
    float_0 = 713.0
    list_0 = [bool_0, float_0, float_0, float_0]
    tuple_0 = (float_0, bool_0, bool_0, list_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    none_type_0 = None
    float_0 = 2281.22617
    module_0.get_new_command(none_type_0, float_0)


def test_case_2189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2190():
    float_0 = 286.618
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    float_0 = -1963.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = 'l0W;,&6:"/k_VNoO `'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bytes_0 = b")o\xf3c\x1b\xa8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    int_0 = 1325
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bytes_0 = b"\xab?\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    int_0 = 661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    float_0 = 776.02629
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bytes_0 = b'V\x0e\xd1\x14\x8c\x80\x80\xabx\xf6\n"<1E\xa8\xf7E\xcd\xcc'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_2201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bytes_0 = b"\xa6\xd1\xdb\x99\xc9\xc9"
    bool_0 = False
    list_0 = [bytes_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    int_0 = -921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    str_0 = "e\x0b!\r6%czfWc^~U`"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    int_0 = 3380
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    none_type_0 = None
    str_0 = "`tN)KORm[# \x0bIx"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    str_0 = 'X/9H3|)"'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    float_0 = 746.0162
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bytes_0 = b"\xa1$\xfa\xed@\xa2u\xdf7\x99"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    set_0 = set()
    float_0 = 1568.68
    dict_0 = {float_0: set_0}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bytes_0 = b"\xe8\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    str_0 = "`\nG+d?x6P"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    complex_0 = 2272.548 + 2173.9j
    int_0 = 2670
    module_0.get_new_command(complex_0, int_0)


def test_case_2218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = -1033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    str_0 = "h2vuK0"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = -183
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    bytes_0 = b"\x0eN\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    complex_0 = 1316.6 + 268.079053j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    int_0 = -229
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    bytes_0 = b"\xe1,^\x91\xfc/Xu\xae\xce\xf9\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    int_0 = 1991
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    int_0 = 1254
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bytes_0 = b"\xd5\xb9w\xcf\x16\xf4 \xb56"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = "KQ+%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    object_0 = module_1.object()
    int_0 = -700
    list_0 = [object_0, int_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    bool_0 = True
    str_0 = ";{>"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    float_0 = -43.5093
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    int_0 = -1608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "&QY\x0c2G{?h\tV>]k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    complex_0 = -1374.5837 - 1607.82j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    str_0 = "uR,e=/:wEX^'v2c2"
    complex_0 = 739.7 + 1696.62849j
    tuple_0 = (str_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bytes_0 = b"\xf9\xa3\x17[#q.d"
    set_0 = set()
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0, tuple_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    none_type_0 = None
    int_0 = -1699
    tuple_0 = (int_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"\xa9\xf7\xdbv\xd8\xc7F\x0f\x1d\xd7\x12^UJs\xbf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bytes_0 = b"\xa7C:\xe0\xfb\x89\xc0\x11G?-v\xbe\x10\x99\x99\x82"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    object_0 = module_1.object()
    str_0 = "7~@"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    int_0 = -924
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = "Ew[_0*6EL.pT3=Uml"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    int_0 = -794
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = 248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bool_0 = False
    str_0 = "z={\n"
    module_0.match(bool_0, str_0)


def test_case_2253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2254():
    float_0 = -1293.699265
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    bytes_0 = b"\x10i\x7f\x96\x89\x06\xce5_\x11\xce"
    bytes_1 = b"\xfe\xf0\xd8/"
    tuple_0 = ()
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_0, tuple_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    float_0 = 4474.0
    tuple_0 = (float_0,)
    dict_0 = {float_0: float_0, tuple_0: float_0, float_0: float_0}
    bool_0 = True
    tuple_1 = (tuple_0, dict_0, bool_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    bytes_0 = b"a\xfc\x8f\xe8I\x9a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "$FrD[b0\x0bXx3GBZ\\:xv|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    float_0 = -212.089
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    none_type_0 = None
    str_0 = "HR"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    int_0 = -529
    module_0.match(int_0, int_0)


def test_case_2264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2265():
    str_0 = "C)UD55O[X_2U~|5Jjel\r"
    module_0.get_new_command(str_0, str_0)


def test_case_2266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2267():
    float_0 = -4164.250539
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = 1041
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    int_0 = 2278
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    str_0 = '#)e.eS-"_'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    str_0 = "$w)7$zSMB]Fwn!\x0c;"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    bytes_0 = b"Q\xc6\x9d\xa4$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    bytes_0 = b"6Z:w\xe7\x9a&hu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "^_PNv</2e("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    complex_0 = -1727.569 - 4019.282068j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    int_0 = -3307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    int_0 = 317
    module_0.match(int_0, int_0)


def test_case_2280():
    pass


def test_case_2281():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2282():
    bytes_0 = b"\r;`C`?\x87[\xc1\x90#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    str_0 = "Ns"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    float_0 = -1357.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    float_0 = 865.03
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bytes_0 = b"\x1f\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    float_0 = 957.08
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = -805
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    str_0 = "^"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    list_1 = [tuple_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -1466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "bw"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    complex_0 = 2168.85515 + 1112.047j
    set_0 = {complex_0, complex_0}
    list_0 = [set_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    complex_0 = 756.3 + 2598.870341j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bytes_0 = b""
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    int_0 = 1512
    module_0.match(int_0, int_0)


def test_case_2298():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2299():
    str_0 = "D\x0c3Y2<bI\x0cYD4oxGq-h^Z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    int_0 = -2095
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    float_0 = -483.42
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2303():
    complex_0 = -6109.99 - 681.2j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"\xde\xa7\x12n\xd0A\xef5\x8bC\xb0\xf1\xa3i,\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    float_0 = -1574.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"\xd5\x90\xb7\xcf\x9c\xbc_N\xdc/\xb0\xec\x88pc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "3\tP`_^{K"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    int_0 = -2718
    tuple_0 = (list_1, list_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    int_0 = 2645
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    complex_0 = -904.242 + 791.5832j
    bytes_0 = b"N\xfb\x91\x05>\x1d0\x92\x98|\x89\xb67/\n\x89\xb7("
    tuple_0 = (complex_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bytes_0 = b"Y\xf0\xfa\xe8Q\xa7\xc7+\xc7\xb2\xbe[C\xb4\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    int_0 = -383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    str_0 = "Ns.P;j(bV["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    float_0 = -888.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    float_0 = -1679.574271
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    str_0 = "\x0b|[,'X"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    int_0 = -177
    module_0.get_new_command(int_0, int_0)


def test_case_2322():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2323():
    int_0 = 4015
    complex_0 = 1320.51 + 545.658j
    set_0 = {complex_0, complex_0}
    tuple_0 = (int_0, int_0, set_0)
    list_0 = []
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    complex_0 = -1785.44 + 1194.8715j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    float_0 = -1236.4079
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    bytes_0 = b"\x015\\U\xe0\xac\xff\xf3y\xf1\x7f\x8d\x02.\x17\xc1\xef\x96N."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    str_0 = "f8~\t~%t8O-Y`M\x0c"
    module_0.get_new_command(str_0, str_0)


def test_case_2328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2329():
    bytes_0 = b"Nk\x90#\x038r\x18\xac\xbb\xfd,g\x93"
    module_0.match(bytes_0, bytes_0)


def test_case_2330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"i\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    complex_0 = -43.902 - 1206.7972j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    int_0 = -4428
    bytes_0 = b"\xf4\xf6\xc3\xef?\x9e\x02"
    list_0 = [bytes_0, int_0]
    tuple_0 = (int_0, bytes_0, list_0)
    dict_0 = {int_0: int_0, int_0: bytes_0, bytes_0: tuple_0, bytes_0: tuple_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    str_0 = "W-2\x0b_!XYOPZ`d_l*So"
    module_0.get_new_command(str_0, str_0)


def test_case_2337():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2338():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = -1214
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"\x12\x1e\xe9\xb4+Bc\x07\x14_\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    str_0 = "?ACxr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    int_0 = 1736
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_2345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2346():
    int_0 = -1628
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    str_0 = "%onkOSU*wnW"
    bytes_0 = b"\xdc\x07\x19\xd3S\xa1j\x0f\xe53\x18\xd8W\xd3x="
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    int_0 = 2412
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bytes_0 = b"\xb8}Is\xc63Y>\xdc(\xd9\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    bytes_0 = b"\xd0U,\xdd\xe7\xb0\xc8~\x08\xa3\xbd\x0c\xf9\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bytes_0 = b"D]\xcc"
    bytes_1 = b"\xdf\x03,{\xef\xad,\xad\x96\x9a\xb9+\xfa"
    list_0 = [bytes_0, bytes_1, bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_2352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2353():
    float_0 = 1910.0
    str_0 = "l1"
    tuple_0 = (float_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_2354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2355():
    str_0 = "a9~I\r=5^L%pA\x0b}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    int_0 = 5077
    bool_0 = True
    set_0 = {int_0}
    list_0 = [int_0, int_0, bool_0, set_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    float_0 = -2460.1766
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bytes_0 = b"\xc8i\xde7`\xbe.J}TFK\x1e."
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    str_0 = "u`Sudv7sV|nV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    str_0 = "*3d42CIC t$}Xn}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    str_0 = "qblm7~c\r.swuXN\r+%q'w"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    int_0 = -1124
    set_0 = {int_0, int_0, int_0, int_0}
    int_1 = 2253
    tuple_0 = (set_0, int_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    str_0 = "}\nuMR]h00uB"
    tuple_0 = (str_0,)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2366():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    str_0 = "1z\t)eaZaNb&/t; oxX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    complex_0 = -870.2233 - 1960j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = -968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    bytes_0 = b"\x92\x91\x81|\xb77\xd8\xfd\xde)\xb9\xba(\x8a\xd5j|\x1ch"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    str_0 = "u<rn`_>[7)7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    bytes_0 = b"y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "z5t\x0bH\x0bFYQI#tvGbTn"
    tuple_0 = (dict_0, bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    str_0 = ")yuI7eqlk"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    str_0 = "&F^wp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    bool_0 = True
    float_0 = 2697.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    int_0 = 200
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    int_0 = 2015
    str_0 = "E(KOs]6"
    list_0 = [int_0, str_0, str_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bytes_0 = b"<MJ\xd0_\x87\xe2\xf0\\\x1e\xe6\x98$\x80"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    bytes_0 = b"\x1a\xdc&\xfd\xaaU\xa7\xab4\x1b\xb4vD\xe7\x99\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    bool_0 = False
    str_0 = "<Sn@dm"
    str_1 = "{'YX\x0c$Bi}>qx"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    bytes_0 = b"\xd5\xef0\xd8\xc9\xb2\x88\x026\xbc\x0c\x0b\xf7r\xc27\x9f\xe2\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    float_0 = 305.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bytes_0 = b"\xc3\x01\xf81\xa0\xb5\xbdSiQ3\n,6"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    bytes_0 = b".y&\xa2\xaeY\xc8>\xfb\xff`\xbe\xd4\xe2\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    int_0 = -810
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bytes_0 = b"z\xf5\n%\x11\xbf\x0cuSA\x95\xfa\x0c\xb5`\x84"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0, tuple_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    float_0 = -401.843274
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    float_1 = 5233.0
    str_0 = "A&SW!sv,6"
    list_0 = [str_0, float_0, dict_0]
    float_2 = 103.5433
    set_0 = {float_1}
    tuple_0 = (list_0, float_2, set_0)
    tuple_1 = (list_0, float_0, tuple_0)
    tuple_2 = (float_0, dict_0, float_1, tuple_1)
    module_0.match(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    int_0 = 2751
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    int_0 = -1856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    int_0 = -6
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bytes_0 = b"#\x12\x9cz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    bytes_0 = b"\xc8`\x8dn\xa2\nx1\xc2K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    str_0 = "rTq/b|k)S~aK$(\x0b?\t~"
    float_0 = -8232.6
    list_0 = [str_0]
    tuple_0 = (str_0, float_0, list_0)
    list_1 = [tuple_0, str_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    bytes_0 = b"\x1c\xadf\xe6[r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    complex_0 = 1384.4458 + 1454.35j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    int_0 = -332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    float_0 = 118.6304
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = "("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    int_0 = -437
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    int_0 = -1780
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0, int_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    int_0 = -56
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b"( \xfc\xf5\xa4(\x10\x0e\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    float_0 = 371.687
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    float_0 = 4130.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


def test_case_2410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = "%duSt=W="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    tuple_0 = ()
    int_0 = -2996
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    complex_0 = -840.50531 + 3035.8735j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    bytes_0 = b"\xae\x03\xb8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    float_0 = -2400.445551
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    complex_0 = 541.33 - 2194.079514j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    int_0 = 36
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bytes_0 = b"\xafI"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    str_0 = "wU+A"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bytes_0 = b"-\xa3k\x15\xfeH6\x9f"
    module_1.object(*bytes_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    str_0 = "}{rOW\r1lE\nuv*"
    set_0 = {str_0}
    int_0 = 406
    tuple_0 = (int_0,)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bytes_0 = b'"~\x10\xd6\x81\x92\x11\xd9\xab\x18\xd8D\xa5#\xcb\xa9be\xab'
    module_0.match(bytes_0, bytes_0)


def test_case_2424():
    pass


def test_case_2425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2426():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


def test_case_2427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2428():
    int_0 = -1625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    int_0 = -34
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bytes_0 = b"jS\x86T\x16n\xee&y\x97mD\xb7\xab\xe2\xb5\xad-\xcd"
    int_0 = 387
    dict_0 = {bytes_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    complex_0 = 1143.50606 - 384.860953j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    int_0 = 317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    str_0 = "jA$y&kncj+5nDb^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    str_0 = "9mx[17b;W{hI"
    set_0 = {str_0, str_0}
    bytes_0 = b"\x11\xfc}GH\x1b\x7f\xfa\x882->\xbeG\x8e"
    tuple_0 = (str_0, str_0, set_0, bytes_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    float_0 = 370.52161
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"P7\xc8x_#\xcb\x19\xb9\xdc\xc4\xb7\x01\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = -3153
    float_0 = -279.64256
    bytes_0 = b'"\x889\xb0\t\xb5\x0e'
    tuple_0 = (float_0, bytes_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    int_0 = 546
    set_0 = {int_0, int_0}
    bool_0 = True
    list_0 = [int_0, int_0, set_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bytes_0 = b"\xb4dp%e\xb2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b"\x12\xc9%\x8a\x13\xa5W\x81\xb9\x0b\xe8,\xa9\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\x19|\xa6\xe3A3\x1a\x9f\xa50fs_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = -5099
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    int_0 = 255
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b""
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    str_0 = "?z6L }(}} dOwWph"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    bool_0 = False
    str_0 = ":5V\\,;xwB"
    list_0 = [bool_0, bool_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_2449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2450():
    complex_0 = -2821 + 2757.18811j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    float_0 = -2314.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    str_0 = "?W^){]fH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    int_0 = 922
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    int_0 = -4334
    module_0.get_new_command(int_0, int_0)


def test_case_2456():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2457():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    bytes_0 = b" U\x81\x00\xa6a\xe4qP\x04#m\xe6"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [bytes_0, bytes_0, set_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    int_0 = -1108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    str_0 = "3xM2;Y_"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "ybfG_ 0\n*4au;_I"
    bytes_0 = b"\xb3\xa4"
    bytes_1 = b"\x04\xbcX\xe6\x19_5\xce"
    tuple_0 = (dict_0, str_0, bytes_0, bytes_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2462():
    pass


def test_case_2463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2464():
    int_0 = 599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    int_0 = -3211
    module_0.match(int_0, int_0)


def test_case_2467():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2468():
    bytes_0 = b"$\x0f\xcd\x04\xfdN\xdb\x13+\xd0\xb5\x10:\x06\n\xa8r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    int_0 = -2290
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    str_0 = ".\x0cx\n}P{cOb&."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bytes_0 = b"rll\xfa\xa4\x8b\x0c\xbb\xcbZ\x02\x14\xb0\xa7\xdb\xa5\xd1n\x8b\xd8"
    module_0.match(bytes_0, bytes_0)


def test_case_2473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    bool_0 = True
    bytes_0 = b"V\xe6\x96\xf0\xcb\\"
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = 1941
    int_1 = -445
    tuple_0 = (int_0, int_1, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bytes_0 = b"\xe9\x9f#\x06\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    str_0 = '@v"*ztTCtR7T'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    complex_0 = 2708.14 - 379.76186j
    str_0 = "jS\n|"
    str_1 = "~Idk1LzJL\nc]vhtZ]\rI/"
    dict_0 = {str_0: complex_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    bytes_0 = b"\xe4\xb3\x80\x9f\x98+\x9b\x05\xf1\xdeY\x85\xff\x14"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = -907.4
    tuple_0 = (dict_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    float_0 = 2908.0
    module_0.match(float_0, float_0)


def test_case_2482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2483():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    str_0 = "r<GAO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    complex_0 = 884.126 - 417.45016j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = "tN5:!HzJ\x0caCz<\n5f4\x0bfJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    str_0 = "//["
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = 166
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    int_0 = -2042
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    float_0 = 1674.317301
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    list_0 = []
    str_0 = "fE\x0bnlnr"
    str_1 = '(h3C!q]ZetFPR}0d";i'
    str_2 = "\x0b>yw|c5BN"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    str_0 = ""
    complex_0 = -2555.5 + 153.63j
    tuple_0 = (str_0, complex_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2498():
    tuple_0 = ()
    int_0 = -1857
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    int_0 = 731
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    str_0 = "Jr\x0b\t5o+38D $j.HkX9g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    int_0 = -326
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    float_0 = -1460.20612
    set_0 = set()
    tuple_0 = (float_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "'ws#{\r"
    str_1 = 'Doj\x0cEx633"e<WoCa`5Oz'
    module_0.match(str_0, str_1)


def test_case_2506():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2507():
    float_0 = 1560.578948
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    float_0 = -561.7204
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    str_0 = "~g8yh\x0b17h1Ccrm(K1"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    bytes_0 = b"&u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    int_0 = 6071
    bool_0 = True
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    complex_0 = -3149.494 - 2668.2j
    str_0 = "F]$O"
    dict_0 = {str_0: str_0}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    str_0 = "s}#}>dzt<|8Zf0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bool_0 = True
    bytes_0 = b"l\xaf"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bytes_0 = b"w\xa2\x10\xb0\xab\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bytes_0 = b'k\x0e\x7fv\xc4\x1e\x91["\r\x1b\x93!\xe1`W\xcb\xd7\xd0{'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    int_0 = -1930
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    int_0 = 581
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, dict_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    str_0 = ".lA-'t\n(\rG<32wO$.`.t"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    bytes_0 = b"\xbb\x16\xab\xe8\xfb\t\xd6"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    bytes_0 = b"E_\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    int_0 = 354
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2525():
    pass


def test_case_2526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2527():
    none_type_0 = None
    str_0 = "Re9[rq?'"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    int_0 = -641
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    int_0 = 401
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    bytes_0 = b"R\x12v\xff\xf8IN"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "s@Z{r(y2{_%8ZLc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    int_0 = -544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    str_0 = "qyt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bool_0 = True
    str_0 = "@"
    list_0 = [bool_0, str_0, bool_0, bool_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = -287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bool_0 = False
    bytes_0 = b"B#\x04lV4\xc3\x10\x85\xea\x81\x94\x82\xc9"
    tuple_0 = (bool_0, bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    complex_0 = 912.79626 - 2171.81656j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = "q;KoIj*"
    module_0.match(str_0, str_0)


def test_case_2539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = 3237
    tuple_0 = (bool_0, set_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    bytes_0 = b"\xea\x82\xbf\x1c\xeb\xfeN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\xa4gZ\xfc\x9c\x88\xac\x165"
    tuple_0 = (list_0, bytes_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    complex_0 = 3304.57 + 2154.87055j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"\xfc[\x0b^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    str_0 = "HI~|I{o\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    str_0 = "\t{+Sr4S6EwhhAQ)d^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    bytes_0 = b"*\xaeb\r\n\xf5f\xf2[3\x89\\\n\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = 1429
    module_0.match(int_0, int_0)


def test_case_2552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2553():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    tuple_1 = (set_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    str_0 = "Q<2VE&!IK.RmR\x0bPy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    float_0 = -854.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    complex_0 = 400.242 + 1605j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    bytes_0 = b"C\xa0\xe0\xf2\xc8p\xf9\x9f\xe9"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    int_0 = 246
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    complex_0 = 3795.34581 - 71.6j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0, complex_0]
    bool_0 = True
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = -2179.4
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    str_0 = "%a"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    str_0 = 'jBPvj}4v/h_"hq;'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    float_0 = -1044.663
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    int_0 = -2075
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    str_0 = "!lTqEy1p"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    int_0 = -1123
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    float_0 = -1443.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    str_0 = "NA6Yb]]\tpR>aaU"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    int_0 = -1774
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    int_0 = -1046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bytes_0 = b"\x97\x7f\x85\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = 1607
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    float_0 = 3152.2238
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bytes_0 = b"U_69\xc1\x9e\xf9a\xbb$\x0bz\x8e\xea"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_2578():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2579():
    int_0 = -2
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = -2190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bytes_0 = b"|\xac5\xd3/\x19t^\xf6"
    list_0 = []
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    str_0 = 'UK"pnDI\r-{Xsq"WExzG'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"2\xbd\x85\x0c\xf2\x1f\xd0\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    int_0 = -1870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bytes_0 = b"l\xe8\xdb:\x91\xf1r\x18\xa6\xa4\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    complex_0 = -4164.571 - 1504.56607j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    int_0 = -893
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0,)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bool_0 = False
    str_0 = "  j["
    bytes_0 = b"\xc8\xaf+9\xd8\xe0\x1c\xf8\xc1"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bytes_0, bool_1)
    module_0.match(tuple_0, bool_0)


def test_case_2590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2591():
    str_0 = "\r+^\n&,z%)9_JJ0D+E\tT="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = 'r+|0kE\\]~_\najd V4"h'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    float_0 = 2976.199
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    int_0 = -844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    int_0 = 3856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    complex_0 = -3435.7335 - 3144.0793j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    int_0 = -237
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    int_0 = -5692
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    complex_0 = -412.683782 + 985.9503j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bytes_0 = b"\xae\x82\x02\x89H\x14\xec\xaa90\x1f\t\xdf\x08\x02;qT"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    str_0 = "j~y=k"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    float_0 = 2030.58
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    int_0 = -2680
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    str_0 = "v41dkHF^10=K^'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bool_0 = True
    complex_0 = -2013.6379 - 1612.371j
    list_0 = [bool_0, bool_0, complex_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_2606():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = "/vZ4]p)::5T&%`"
    module_0.get_new_command(str_0, str_0)


def test_case_2608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2609():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    str_0 = "uRP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    complex_0 = -1631.68623 + 1530.1j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2613():
    str_0 = "I` wTxsB}%pPr(??5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    str_0 = "+)E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    str_0 = "cC`\x0bSrqv\t7J]R+t2#s("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    str_0 = "Z/N"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    str_0 = "@%oG)J(&Ck3q+T-/^p}2"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 2066
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"\xf0\x0f\xaclV[!o\xb7\xf6n\xc7\xbc\x19\xac2&\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    int_0 = 757
    list_0 = [int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    float_0 = 1338.766
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = 995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    int_0 = 1126
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    int_0 = -2325
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    int_0 = 799
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    float_0 = -3253.725
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    set_0 = set()
    list_0 = [float_0]
    tuple_0 = (dict_0, dict_0, set_0, list_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (dict_0, tuple_1, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    int_0 = 2506
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2631():
    float_0 = -66.380254
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    str_0 = ""
    bool_0 = True
    int_0 = 1580
    dict_0 = {str_0: str_0, bool_0: int_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = "./[)7$8Ls5t/.dl\n'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    float_0 = 3344.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    complex_0 = -850.9 - 941.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bytes_0 = b"\x8c\xfbaq\x1d8\xe9\xa9"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = -1873
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, int_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    float_0 = 1900.0999
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    int_0 = -1080
    tuple_0 = (int_0, int_0)
    float_0 = -512.898
    set_0 = {tuple_0, int_0, float_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    bytes_0 = b"PR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    bytes_0 = b"\xb7\xab#!\x89\xa9\xb6\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    dict_0 = {}
    float_0 = -396.5
    tuple_0 = (dict_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    float_0 = -4.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bytes_0 = b'42\xe6G"\x8f\x9f\xcb\xd4\x1cd'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    str_0 = "Cf%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    bytes_0 = b"\x99\x82\x06\xfc\xc4\xae\xf5\x12Zg\xad/\xc6"
    set_0 = {bytes_0, bytes_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    float_0 = 692.151
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bytes_0 = b"?\xb7\xc1\x91"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    str_0 = "BF xK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"$\xc8\x11k\n\xf1"
    module_0.match(bytes_0, bytes_0)


def test_case_2653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2654():
    float_0 = -1599.1351
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    int_0 = -207
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2657():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2658():
    int_0 = -1032
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "J.~[Hn\tu(k3F\nlA_"
    tuple_0 = (set_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    int_0 = -2493
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    complex_0 = -1458.4 + 2122.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    complex_0 = 207.55508 + 295.971j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"\x9b!7\xde\xa0\xb2\x89\xf1\xe5x\xe3y\xc6\xbc\x9aBL\x91"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    float_0 = -1948.35
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    complex_0 = -2943.545 - 2720.8897j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2668():
    int_0 = 2087
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "ib!~#C>A"
    tuple_0 = (str_0,)
    bool_0 = False
    list_0 = [tuple_0, str_0, str_0, bool_0]
    tuple_1 = (list_0, list_0)
    list_1 = [tuple_1]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    float_0 = -3961.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    int_0 = 101
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    int_0 = -896
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    int_0 = -2511
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"\x8b\r\xbd\x7f\x9b\xe9\xeet\x82\xceO\xb4\xed\xcb\x14"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = -2275
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b"@K\xd2\x16\xe1\x97\xe5\x9e/.\xa7\x93\x9b\xe8\x96\x0b\x17\xae\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    tuple_0 = ()
    int_0 = 1651
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0, int_0: int_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bool_0 = True
    bytes_0 = b"\xc9/cf\x8dFk5-\xaa"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    int_0 = 3416
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    int_0 = 1889
    module_0.get_new_command(int_0, int_0)


def test_case_2685():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bytes_0 = b"\x9fy\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    str_0 = "3\r.@>t>_3j"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0, str_0)
    dict_0 = {tuple_0: tuple_0, bool_0: str_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    bytes_0 = b"\xe4\xba\xe4Hbx\x97\x7f<\xbb\x90\x95M}1H\xeco"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(bool_0, object_0)


def test_case_2691():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2692():
    float_0 = -509.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    int_0 = 906
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = 3641
    bytes_0 = b"\xbe"
    dict_0 = {int_0: bytes_0, bytes_0: int_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    int_0 = -1019
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    int_0 = -161
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    int_0 = 162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    str_0 = "E85xUBVt2s)g\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    int_0 = 4327
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    float_0 = -1341.312951
    str_0 = '"$A2U^!FFC>rwaxJ'
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    list_0 = []
    bool_0 = True
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"\xcc\xd1\xf8\xcc&j"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = "\r1j"
    int_0 = 20
    str_1 = "yueS"
    dict_0 = {str_0: str_0, str_0: int_0, str_1: str_0, int_0: int_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    str_0 = '["~'
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = 2889
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    str_0 = "Qq9g]^~M`oN"
    list_0 = [str_0, str_0]
    str_1 = "[<I2"
    str_2 = "\r-o8% G+"
    dict_0 = {str_1: str_0, str_2: str_0, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    str_0 = '&^"'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    str_0 = "AvY9C&<;:(p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    int_0 = 2216
    int_1 = -198
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bytes_0 = b"\x88\xf0\xaf\x1b\x0b\xed0i\xc7^\xb0\xecO^"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


def test_case_2714():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2715():
    int_0 = -1275
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    complex_0 = -795 - 1613.94407j
    list_0 = [complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_2717():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2718():
    int_0 = 1718
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    bytes_0 = b"GS\x14\xb0$\xd1"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    str_0 = "}"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    bool_0 = False
    bytes_0 = b"\xa5\x81\xda\x123\x8e\xe1uE&J\xb5X\x17\xf2"
    list_0 = [bytes_0, bytes_0, bytes_0, bool_0]
    tuple_0 = (bool_0, bool_0, bytes_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    int_0 = -469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bytes_0 = b"+27;\xea\xe4\x0f\x9d\x9ej\xb6\xc0\x08\x14R"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    bytes_0 = b"\xe3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    int_0 = -850
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0, set_0, bool_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    float_0 = -332.72363
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    str_0 = "R6n>.VA| +</S{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    float_0 = 1584.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bytes_0 = b"\xbc\x0e\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    bytes_0 = b'\xb4\xf5\x88\xa3\xef\xd8wA\xd1\xf89\x01d\x97\x1d\x13"M'
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bool_0 = True
    int_0 = -416
    tuple_0 = (bool_0, int_0, int_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


def test_case_2733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2734():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    str_0 = "CH33Kg8I17<'mLJM[1Gh"
    str_1 = "o("
    dict_0 = {str_0: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    str_0 = "D/\x0clSF]i-#4c <r="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    str_0 = "w'Ky"
    module_0.get_new_command(str_0, str_0)


def test_case_2738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = 629
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    float_0 = 1231.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    object_0 = module_1.object()
    list_0 = []
    object_1 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    str_0 = '@(X5m"{LU3wPmLi'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    int_0 = 432
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    float_0 = 804.462
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    bytes_0 = b"\xbd\xf4\x17\xef\x9a\xc8\xb2\x128"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    bytes_0 = b"\xd0h\x16k\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    str_0 = "H.qb2"
    dict_0 = {}
    bool_0 = False
    tuple_0 = (str_0, dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = -3083
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    int_0 = 1975
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


def test_case_2751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2752():
    int_0 = -24
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bytes_0 = b"t\xb0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: list_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    int_0 = 799
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    str_0 = "b\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    str_0 = "i@3leS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = 1613
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    str_0 = "+"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    int_0 = 1309
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    bytes_0 = b"\xfa\xc2\xf3\xa0)XF\xd2:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    int_0 = -1908
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    complex_0 = 2376.55 - 1990.35784j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -1449
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "i67\n|U"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    float_0 = -1899.937
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    complex_0 = 16.287894 - 146.563j
    float_0 = -1712.149733
    set_0 = {complex_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    str_0 = "|kV22RB&;4|sQix"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    str_0 = "M85QC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    complex_0 = -898.3 + 1653.59j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    int_0 = -728
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    str_0 = "i<HX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = -2831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b"\x15\x84\x12\\\xf6\x96\xe7\x87^rg\xcf\x87:6\x17\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bytes_0 = b"\x97\xdbb"
    int_0 = 954
    bool_0 = False
    tuple_0 = (bytes_0, int_0, bool_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bytes_0 = b"'\xab\x1e\xfd\x0b\xbd`\x003?Y\xa0X\xa5\x87\xbc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    int_0 = -923
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bool_0 = False
    int_0 = -673
    str_0 = ""
    tuple_0 = (bool_0, int_0, str_0)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bytes_0 = b'VV"\xa3\t\xeb%\xf5\\\x86\\\xa2\xf2k\xe9'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2784():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2785():
    int_0 = 703
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = -1016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    int_0 = 1327
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    bytes_0 = b"8\xb9\xab\xe2\xa5\xf3\xde\xcb\x01W\xe6\x9b\xd3#"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"\xef\x19>"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    int_0 = 998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    str_0 = "5UA(fB'3ad_#.[["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    int_0 = 788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    int_0 = -1001
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    bytes_0 = b"\xfb\xe2i\xf5\x19/\xc2\xc6\xcd"
    bytes_1 = b"\xdc[\xf7c_>gBstpe\x0b\xfao\x8c&\xde"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    complex_0 = 2580.85243 - 852j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    none_type_0 = None
    float_0 = 1300.201
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = "yy/!>[3:#TYt\x0cYp\\\t+}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    int_0 = 2058
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    str_0 = "\n#9Nnw;OROnE`N@4N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [object_0, object_0, object_0, set_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    str_0 = "{C%@!\\3^sk/a_rGi\t2&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    int_0 = -431
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    int_0 = -1113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    int_0 = -139
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    bytes_0 = b"\xf6-"
    int_0 = 5034
    tuple_0 = (bytes_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    object_0 = module_1.object()
    int_0 = 992
    dict_0 = {object_0: object_0, object_0: object_0, object_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    float_0 = 5014.013173
    bytes_0 = b"\x1e:j\xeb1"
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: float_0, bytes_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    list_0 = []
    str_0 = "'D:"
    tuple_0 = (list_0, list_0, str_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "=:X<{@G"
    module_0.get_new_command(str_0, str_0)


def test_case_2814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2815():
    str_0 = "M!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    float_0 = -1959.264
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    str_0 = "{^o;EC42>7zr'ushb3"
    str_1 = "D`oE'PMCb0=?4xt"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bytes_0 = b"D7\xe6^\x9b\xb9\x11\xecJ\xb1\xe2e\xa0`\xac\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    str_0 = "oEv}uR|n/TCAQ$Q"
    none_type_0 = None
    str_1 = "DwE,B{_Pea"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    float_0 = 744.43
    str_0 = "z)VFOcmu\r#@8~b?:"
    dict_0 = {str_0: float_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    str_0 = "\tHh8W{7d-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    object_0 = module_1.object()
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    float_0 = 394.17184
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    str_0 = "tUkX&u"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2825():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = 2591
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    bytes_0 = b"\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    object_0 = module_1.object()
    str_0 = "S[Ky\n*}wGdaI^\tlaF"
    complex_0 = -2290.81 - 2881.056726j
    tuple_0 = (object_0, object_0, str_0, complex_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    int_0 = -102
    dict_0 = {int_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = -3286
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    bytes_0 = b"\xa3\\\xa7\xf06\xa8\xe3\xba\x80\x1d\xce_\xca#;\xe3\x17\xaao"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    complex_0 = 2746.1 - 3593.4098j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    float_0 = 903.4
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    str_0 = "%8!(\nfvWQ:jN%>@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    int_0 = -1413
    str_0 = "G}0"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    str_0 = "a$O$O7f\\\ncX"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    str_0 = "&f[%,Cu*0r1cb(J>~"
    set_0 = {str_0}
    str_1 = ""
    module_0.match(set_0, str_1)


def test_case_2841():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bytes_0 = b"2\x0e\xc9\xb7\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    float_0 = -1922.0
    str_0 = "rR\n,@@\rz>sa]9Ccv\rT"
    list_0 = []
    tuple_0 = (float_0, str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    bool_0 = True
    bytes_0 = b"}\x87\x05,o\x19\x99\x1f)\x8b\x81\xb9J\xcb)M\xf4f"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    str_0 = "}87xX\tH_|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b'g<:t}x\x8d\xda"\x19\x8f}\x11\xcc\xac\x9d\x8a\xdd'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = "(%Rdp`{`KY&BP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"`\xaeH\x95"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bytes_0 = b"/\r\xfa\xb9\xc3"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    dict_0 = {tuple_0: bytes_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"y(\xa0\xbf\xe3\xe9\xa0+y\xc5HS\n\x81e\xd1r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bytes_0 = b"\x85z\x08\xc9\xe8{\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2856():
    float_0 = -2084.2
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    str_0 = "X%#L5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = -4466
    float_0 = -2971.66
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    float_0 = 82.9078
    set_0 = {float_0, float_0, float_0, float_0}
    str_0 = "`9f<#uVNoOj0<r"
    tuple_0 = (float_0, set_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = 'q{#":OpF1\x0c`z~ht\x0c0 '
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    int_0 = 47
    module_0.get_new_command(int_0, int_0)


def test_case_2862():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2863():
    object_0 = module_1.object()
    list_0 = [object_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = "X~_fRKq*Or\tR"
    list_0 = [str_0]
    str_1 = "F0"
    str_2 = "R \ts"
    int_0 = -150
    dict_0 = {str_1: list_0, str_1: str_0, str_0: str_1, str_2: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    float_0 = 3015.5
    str_0 = "\\osz;\x0cd[,&*LDI"
    complex_0 = -861.041 - 3666.03448j
    tuple_0 = (float_0, float_0, str_0, complex_0)
    module_0.match(tuple_0, float_0)


def test_case_2867():
    pass


def test_case_2868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bool_0 = True
    bytes_0 = b"_7\x01C +\xf9\x13\xf3"
    set_0 = {bytes_0}
    float_0 = -458.7479
    int_0 = -802
    tuple_0 = (bytes_0, set_0, float_0, int_0)
    tuple_1 = (bool_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    bool_0 = False
    int_0 = -186
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    float_0 = -2191.133
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    str_0 = "[Z8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2873():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    str_0 = "\x0bWUYN+A40$eSV2F.m!"
    int_0 = -3220
    tuple_1 = (tuple_0, dict_0, str_0, int_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    int_0 = 2168
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_0, bool_1, bool_1, bool_2)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    str_0 = "/"
    str_1 = "2,ez,`]"
    dict_0 = {str_0: str_0, str_0: str_1, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    list_0 = []
    list_1 = [list_0]
    int_0 = -645
    list_2 = [list_1, int_0, list_1]
    module_0.get_new_command(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    int_0 = -1624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    str_0 = "ZVU.Iy8NG%--"
    dict_0 = {str_0: object_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    float_0 = -1637.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    int_0 = 1022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    str_0 = "pe,k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bytes_0 = b"\xf0\x9753kR\x00\x11_d\xe4*\x8b`\x1f5\x06\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    float_0 = 1731.265713
    module_0.match(float_0, float_0)


def test_case_2887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2888():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    int_0 = -783
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    object_0 = module_1.object()
    float_0 = 1709.0
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    str_0 = "*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    str_0 = "}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    int_0 = -3250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    float_0 = -1829.512
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    bytes_0 = b"s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bytes_0 = b"\x82\xcf\xf2"
    bytes_1 = b"<\xbf\xc7\xee\xf7\xbfB_z'z\x10"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    complex_0 = 4054.29 - 2994.81542j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = "DQU)K8qHn:s}Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bytes_0 = b"e(t\r\x96dj\xe8\xbc\xeb\xbb\x04Y\x94\xbd\x06\x11\xd0z\x17"
    str_0 = "}6k~3"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    float_0 = 792.276
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    bytes_0 = b'd}\xca"\xd5lQ\xab\xb7`"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    float_0 = 2289.3235
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    complex_0 = -1428.5 - 3400.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    complex_0 = -2155.761 + 478.4187j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    bytes_0 = b"'\x8e\x93\x84{`9\xcdp\xd0"
    module_0.match(bytes_0, bytes_0)


def test_case_2910():
    pass


def test_case_2911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b"\xa4"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    float_0 = 125.675
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    int_0 = -324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    set_0 = set()
    list_0 = [set_0, set_0]
    list_1 = [list_0, list_0, list_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2918():
    int_0 = -3603
    module_0.match(int_0, int_0)


def test_case_2919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2920():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bytes_0 = b"\x03\x08\xcc\xc1~z\x80/\x1e\xf9M\xe6n"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    int_0 = -1395
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    float_0 = 1855.248
    tuple_0 = ()
    dict_0 = {float_0: tuple_0, tuple_0: float_0, tuple_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    str_0 = "2wweo^.\x0bp&d.Ij"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    complex_0 = -1393.831511 - 1868.51j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "<_^nV1cZX^sk0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    str_0 = '[R[CtVe"wXO%3h#N'
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    str_0 = "=O4X.MW(#>;l{]*]@jq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    int_0 = -1626
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    bool_1 = True
    tuple_1 = (tuple_0, bool_1, bool_1, tuple_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    complex_0 = 1965 - 681.2j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    float_0 = -221.37
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    str_0 = "xI8{sgjq\ngF:O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    complex_0 = 2351.939695 + 273.20013j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    complex_0 = -376.275167 - 1029.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    bytes_0 = b"\t\xd6\xd8\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = True
    str_0 = ".)t'"
    set_0 = {str_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (bool_0, str_0, set_0, bool_1)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    complex_0 = 3679 + 4338j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = -1454
    bytes_0 = b"k\xad\xf5\x98+\xea\xf2\xc6\xa1O\xa5q\xf1A"
    module_0.get_new_command(int_0, bytes_0)


def test_case_2942():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    object_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bool_0 = False
    dict_0 = {}
    int_0 = 162
    list_0 = [int_0, dict_0, int_0]
    tuple_0 = (bool_0, dict_0, list_0)
    bytes_0 = b"\x0e\x18\xc2i\x93LE\x95-E\xfd\xee\r%\x0b\x8a\x8a"
    list_1 = [tuple_0, dict_0, tuple_0, bytes_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    int_0 = 1398
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    float_0 = -1956.601
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    float_0 = 2541.61629
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bytes_0 = b"P.\xf548\xc3?F\xb7\x84\xf68\xf7\xf49\x0e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    int_0 = 1048
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    bytes_0 = b'\xb0?\xf3"f\xfb\xb4\x91\xc6\x9a\xbfO.\x8e\x01\x92\x1b'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    float_0 = 1023.1091
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = 223
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    float_0 = 2200.1008
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    int_0 = -4175
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2957():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2958():
    str_0 = "x"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, bool_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "i#'%@v=a80*"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = 'txC"p- "i)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    float_0 = 1168.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    str_0 = "FAEfi\rQR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bytes_0 = b"\x8f\xc9-\xb9\xe9\x80\xdcl\xe3\x1e\xaa\xfa\x8b\r\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    float_0 = -2743.9
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    int_0 = 2526
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bytes_0 = b"\xfa\xde5y\xc9\xff\xc7w\x14"
    bytes_1 = b"4\xad\xe0\xeaIP"
    list_0 = [bytes_0, bytes_1, bytes_0]
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    complex_0 = -642 + 2547.81756j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"\xc7!"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    float_0 = -422.48145
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    complex_0 = -33.3325 - 2359.0514j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    str_0 = "T^6M}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    int_0 = -475
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    str_0 = "R\\O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    float_0 = -1604.5
    module_0.get_new_command(float_0, float_0)


def test_case_2978():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2979():
    bytes_0 = b"l\xfd\xa6\x16\xc5\xfb\x93\xfdO"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    bool_0 = False
    int_0 = -2083
    set_0 = {bool_0}
    tuple_0 = (bool_0, int_0, set_0, set_0)
    bytes_0 = b"O\xa4\xdf8o\xbc\x1f'n\x1b%\x97\x17\xbb\xe6\xeb,W"
    tuple_1 = (tuple_0, bool_0, bytes_0, bool_0)
    bool_1 = True
    tuple_2 = (tuple_1, bool_0, bool_1)
    tuple_3 = (bool_0, bool_0, tuple_2)
    module_0.match(tuple_3, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    float_0 = 1364.153
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    float_0 = 609.88
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    int_0 = -700
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = 1878
    str_0 = "lqjKVexwQ,G\tM*"
    list_0 = [int_0]
    tuple_0 = (int_0, str_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    complex_0 = -2275.81 + 209.6j
    bool_0 = True
    dict_0 = {complex_0: bool_0, complex_0: bool_0}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    bytes_0 = b"i\xf2N"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, bytes_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_2989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2990():
    complex_0 = -972.08 + 1876.4917j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bytes_0 = b"\xf3\x10\x00\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    int_0 = 247
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2994():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2995():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bytes_0 = b"\xd4\t\xd7\xe5=YW\xebs\xa7!\xfcZ\x8b\x0f\x02\x87\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bool_0 = True
    int_0 = -1806
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    int_0 = -790
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    str_0 = "iN<Q.2Qb\tA.;\tni?u"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    str_0 = 'a&"\\'
    float_0 = -3272.4423
    bool_0 = False
    tuple_0 = (str_0, float_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bytes_0 = b",\xa3\xb8\xe0\x05\xc6\xf3{\xec\xb8\xd7\x1e\n\x85XF"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    float_0 = 182.593
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    str_0 = "BM+Yu"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    str_0 = "\nt-Y%]J"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    str_0 = "Q\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    str_0 = "iN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    int_0 = 5131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    float_0 = -397.085805
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    float_0 = -1060.0
    tuple_0 = (float_0,)
    str_0 = "qD[b/p.`-%uX@@l .J"
    str_1 = "n8tV("
    str_2 = ") YE"
    dict_0 = {str_0: float_0, str_1: float_0, str_1: str_1, str_2: str_1}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    float_0 = 29.332
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    int_0 = 2520
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    str_0 = "NR}A^"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    str_0 = "TMCGP5w}V94ll0J"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    str_0 = ",Oh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = 611
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    bytes_0 = b"\xbd\xb1-\xde\x07\x1d\x1fXA\xd8\xc4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    float_0 = -1305.47
    int_0 = 1793
    tuple_0 = (float_0, float_0, int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bool_0 = True
    bytes_0 = b"w\xe8YK\x16)H[\xf9\xad,jr\x15\xef"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    complex_0 = 3053.6456 + 1312.73378j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    complex_0 = 51.0252 - 109.601595j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    str_0 = "R]_dn]x"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    none_type_0 = None
    int_0 = 580
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    int_0 = -2315
    bytes_0 = b"\xbb\x12\xdb\xc0\xc3"
    set_0 = {int_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    object_0 = module_1.object()
    str_0 = "D/ZS/Zave)EF)Qr"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "dQ8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    str_0 = "g}^cHK8J|WZxGb"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"\xdfZuqNF\xf5\x1e\xefc\xbc7%\xbaq\xbd\x983m\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bytes_0 = b"\xb1\x8e/f\xd8{*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    int_0 = 735
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    int_0 = 2259
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    int_0 = 586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    str_0 = "==XT)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    str_0 = "uP-"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    str_0 = "#o$H5-|hNx2^AWSF&6!j"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    str_0 = "g`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    int_0 = 604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    float_0 = 1080.7
    bool_0 = True
    bytes_0 = b"\xb3\xd0\x16\xa4"
    set_0 = {float_0, bytes_0, bool_0}
    list_0 = [set_0, bytes_0]
    tuple_0 = (float_0, bool_0, set_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    bytes_0 = b""
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    float_0 = 1868.563
    module_0.get_new_command(float_0, float_0)


def test_case_3049():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = "=~nt1E/AtO9$\rW*Ug@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    float_0 = 31.81
    bytes_0 = b"(\x14\xf4p\xf6\x9f\x92M;\xaf)\xa2a\xef\xd0.\xddr"
    tuple_0 = (float_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    int_0 = 1630
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    str_0 = "B!!5k|{(X@_4.>0"
    str_1 = "wB8wW#84dH\\Xoy&s5"
    set_0 = {str_1, str_1, str_0, str_1}
    float_0 = 785.432689
    tuple_0 = (str_0, set_0, float_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bytes_0 = b"\x9a\x1b{\xf1W\x86\x9e\xcce\xcf\xf5y>>\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b"\x01!\xca"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    float_0 = -1639.7343
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    int_0 = -1134
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    str_0 = "'NQ5P$1!\x0c!D1o9\x0cc$="
    float_0 = 1294.6
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    int_0 = -544
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    str_0 = "mO>~#@O3Xcd"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    str_0 = "MIA2"
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {str_0, str_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"\x93\x80\xb2\xf8\x95\xbb\x89\xe2\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bytes_0 = b"\x0c\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "/{kZoHn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bytes_0 = b"\xd7\x94\x18/\xc8\xc5[vi\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    int_0 = -1544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bytes_0 = b"\xf2\xd7\xcfn\xa9,r$\xde-\xf6\xd4j/3\xba"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3076():
    bytes_0 = b"[Q\xb6*\\\xb9\x0e\xc4\x9cO\xe0\xf9*\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    float_0 = -726.79384
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = "/r6xx<JYGv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    tuple_0 = ()
    int_0 = 770
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    float_0 = 571.84
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    int_0 = -1197
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_3082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = -1711
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    int_0 = -196
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    str_0 = "6RNW$U\x0bSTMo"
    module_0.get_new_command(str_0, str_0)


def test_case_3086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3087():
    int_0 = -2051
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    str_0 = "n{xI0I:7Mksfa7El=n!/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    int_0 = 294
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    none_type_0 = None
    str_0 = "X"
    str_1 = "41,"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    int_0 = -1529
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bytes_0 = b"\xd5-\xcb=\x85\x8c\x17\xb7\xd2AXX`\xf0\xbamZ*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    str_0 = '{.iLGV"&!.:%t9x,c\r'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    int_0 = 2249
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bytes_0 = b"\xb6\xaa\x10\x90\\\xb53\x9aBP\x81\xec\x86\xa6\xe8x\xc8\xef\xe6\x9f"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    str_0 = '?RNTW;eR7"1\tKmCemhy\n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bytes_0 = b"\xa4t\xe2\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = -1315
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    int_0 = 4477
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    int_0 = 1342
    module_0.get_new_command(int_0, int_0)


def test_case_3101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = "bt')Xg cWy3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    str_0 = "4F3o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    str_0 = "G/D0k\x0bFYQc3IqA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    int_0 = -3999
    bytes_0 = b"=\x17\x85\x990\x15\xfe7^\x8a\xb4\x9c\xc1\xee\xc3Q\xdf\xfe\x00Y"
    set_0 = {int_0, bytes_0, int_0, int_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    float_0 = 2721.7
    dict_0 = {float_0: float_0}
    tuple_0 = (dict_0, float_0)
    bytes_0 = b"5#\xb8[S\x8dg\xa7>J\x9b\xde\x8b3}-\x18"
    list_0 = [dict_0, dict_0]
    tuple_1 = (tuple_0, bytes_0, list_0)
    list_1 = [tuple_1, tuple_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bytes_0 = b"\x03\xf8\xbb\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bytes_0 = b"(\x05}v\x06aA\x9b\x16a\xdb\xf6S!\xa7d\x1d\xa4\xc8P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bytes_0 = b"\xc8M\xaf\x84\xc2\xd0\xb5\xbdN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    float_0 = -318.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bytes_0 = b"\xec\x91"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


def test_case_3113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3114():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    int_0 = 2227
    module_0.match(int_0, int_0)


def test_case_3117():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bytes_0 = b"\xaa\xeb\x06\x15\xadb2q\x88R0\xfbDY\x84\xa4?\x9b"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    bytes_1 = b"U\xa9\xf2\x0e=\x9f`\xe7\x91\xf1\x03\xcf\xf4\x14}"
    set_0 = {tuple_0, bool_0, bytes_1}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    int_0 = 654
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    none_type_0 = None
    str_0 = "JP}[]WFjy"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


def test_case_3123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3124():
    int_0 = -786
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = -2338
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    complex_0 = -1927.46 + 832.1j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    str_0 = "\x0crl+lpA2Yc~bZC"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bytes_0 = b"\xb0\xb0"
    bytes_1 = b"\xfc"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_3130():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3131():
    str_0 = "oCw S*$1K"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    int_0 = -2471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bool_0 = True
    str_0 = "H[P8?;gE~]ZW@=7L"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    bytes_0 = b"\xb8\x13\xa6UL\x95\x9cO\x0b\xfb\xb0\n\xba\xa0\xf4\xbc\x01"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    complex_0 = -520 + 390j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = ""
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    set_0 = set()
    str_0 = "]Yey~_%"
    tuple_0 = (set_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bytes_0 = b"R\xc12\x87lQ\xfd\xc25\xd8\x9ci\xb8\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    float_0 = 299.1917
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    float_0 = -236.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    int_0 = 3403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    int_0 = -1598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bytes_0 = b"\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    bytes_0 = b"\xe8RLit\x9eU\xe8\xaf\x17\\\xbd\xae\xd1f\xa3\x90"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3146():
    pass


def test_case_3147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bytes_0 = b"\x90h\xc5\xf5\xd4s\xd5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    bytes_0 = b"g\x8c\xd4"
    bool_0 = True
    bool_1 = False
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    bool_2 = False
    tuple_0 = (set_0, bool_2)
    tuple_1 = (bytes_0, bool_0, bool_1, tuple_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    float_0 = 960.298
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


def test_case_3151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3152():
    complex_0 = -2644.79231 + 1310.64318j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    str_0 = "^:*F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    bool_0 = False
    int_0 = 943
    bool_1 = False
    list_0 = [bool_0, int_0, int_0, bool_1]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    float_0 = -411.6
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bytes_0 = b"\xc4t\xed\x03\xdd\xdf\xdc1:\x90\xbb;-X\x188KL"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    str_0 = "rA;Ow4z9x\x0bWGeXU"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, set_0, set_0, str_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    bytes_0 = b"`\xa0\xf2\x1d[\xca"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bytes_0 = b"\xfcKDh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    int_0 = -1272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    none_type_0 = None
    complex_0 = 2617.499 + 896.9419j
    tuple_0 = (complex_0, complex_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    int_0 = 457
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bytes_0 = b"\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    none_type_0 = None
    complex_0 = 878 - 1385.7755j
    int_0 = 2941
    bool_0 = False
    tuple_0 = (complex_0, int_0, bool_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "{3C}\tF!jqv("
    bytes_0 = b"\x8a\x18\x84K\xaf\xce\xb8\x92\xe0\x08\xd3\xa7\x7fy"
    str_1 = "\\P9"
    dict_0 = {str_0: list_0, str_0: bytes_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    list_0 = []
    object_0 = module_1.object(*list_0)
    int_0 = 1615
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    complex_0 = -2824.8 - 21.51j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    float_0 = -1070.565321
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bool_0 = True
    complex_0 = 3044 + 892.7j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    str_0 = 'o,"E4WCF=@\nu>S\t9D4pU'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    float_0 = -3174.0
    module_0.match(float_0, float_0)


def test_case_3178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3179():
    int_0 = 1219
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bytes_0 = b"\x11\xbaj\xbc\x87\xa5OCu@\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    bytes_0 = b"\xff\xee\x95\x9f\rH"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = -1395
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    float_0 = -2876.60553
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    int_0 = -2243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {bool_0, tuple_0}
    tuple_1 = (bool_0,)
    tuple_2 = (tuple_0, set_0, tuple_1)
    tuple_3 = (tuple_2, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_3, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    int_0 = 3537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = 1476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    int_0 = 944
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    str_0 = "@n@5Q|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    float_0 = -40.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = ""
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = 415
    tuple_0 = (int_0, int_0)
    tuple_1 = (dict_0, tuple_0)
    module_0.match(tuple_1, dict_0)


def test_case_3194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3195():
    complex_0 = -409.2753 - 3515.609j
    dict_0 = {complex_0: complex_0}
    float_0 = 1377.802
    tuple_0 = (dict_0, dict_0, float_0)
    module_0.match(tuple_0, float_0)


def test_case_3196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3197():
    bytes_0 = b"\xf0\x1enk\x14j\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bytes_0 = b"\xe9z }k\xe9\xae\xd7\xc9\x0f96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    complex_0 = 1479.7 - 1015.18j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    str_0 = "dDYv._"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    object_0 = module_1.object()
    bool_0 = False
    set_0 = {object_0, bool_0, bool_0}
    dict_0 = {object_0: object_0, bool_0: set_0, object_0: object_0, bool_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    bytes_0 = b"\x9cw\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    int_0 = 567
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    list_0 = []
    set_0 = set()
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    str_0 = "\x0c(d?6 "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    str_0 = "d:>$ln29+0J:%0F\rQls"
    bytes_0 = b""
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    str_0 = "5\r|0y2Bu0O@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    bool_0 = False
    int_0 = -1737
    bool_1 = False
    list_0 = [bool_0, int_0, bool_1, bool_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    int_0 = 1107
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_3211():
    pass


def test_case_3212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3213():
    int_0 = 1541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    int_0 = -872
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [object_0, bool_0, object_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    str_0 = "_je9G~\r AF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    bytes_0 = b"{\xea@J\xc9Loa\xc2\x7f\x93\xd9\x12\xb0\xcb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    float_0 = 3320.20041
    float_1 = 830.601
    str_0 = "/-D\t\tlQ>4bp\n^Qrq"
    tuple_0 = (float_0, float_1, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bytes_0 = b"\x08\xc3\xd1\x077\xed\xe3\x94\x8cSg\x0f\xde oP\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = "=T.5B=uQ]@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    int_0 = 815
    bool_0 = False
    bool_1 = True
    int_1 = 1328
    tuple_0 = (bool_0, bool_1, int_1, bool_0)
    tuple_1 = (tuple_0,)
    tuple_2 = (int_0, tuple_1, bool_1)
    list_0 = [tuple_2, bool_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3225():
    str_0 = 'pi(",v\\s4./8\x0ch'
    str_1 = ""
    str_2 = "mMm(2"
    str_3 = "1*;%QzR29"
    str_4 = "0}"
    dict_0 = {str_0: str_1, str_2: str_2, str_3: str_1, str_4: str_4}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    str_0 = "Mp6>\x0b[Fl\r[R-*/\x0c`0V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    str_0 = "-jC0, G1s<5F\t+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    str_0 = "e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bytes_0 = b"V3\xd0G\xdaA\xf7g\xda\xcf="
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bytes_0 = b"\xc4\xf2\xa3\xdb:;\xa7}6\xd0\xcc\x1f\x05\xaaN#\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    int_0 = 1777
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "$?k$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    complex_0 = -1683.8058 + 237.37501j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "QY5G_YhLY9Fp"
    float_0 = -1828.637
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    int_0 = 364
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = -1285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    str_0 = "WdcotSC<zj+{R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    int_0 = -349
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    str_0 = "W\x0b"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    str_0 = "(zBGk8.~$\n]V2"
    int_0 = -402
    dict_0 = {str_0: str_0, str_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "k+n4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    str_0 = "%iA;5#B~ J:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    bytes_0 = b"5\x7f\xb2h\xab\xac\x9eDp\xe7*\x17d\xb2\x80$D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    int_0 = -739
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    str_0 = "Rvz\np0S*\x0b%"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = -2415
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bytes_0 = b"\xb5\x06\x94\x8a\xcb\x80_\x8c\xb8"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    str_0 = "Cg&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = -1032
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    int_0 = -1377
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    int_0 = -1357
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    int_0 = 337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    bytes_0 = b"a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    int_0 = -1024
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    int_0 = -830
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = "mst"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    bytes_0 = b"\xf3(\x87\x8c\x11\xdf\xfa1\xe1\xdd2\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    str_0 = "(beb]0#U'qv-\\Zef[}"
    int_0 = -392
    dict_0 = {str_0: str_0, int_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bool_0 = False
    float_0 = -3339.6004
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    bool_0 = False
    str_0 = "[M3GfH~_y5JAL&"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    int_0 = -1469
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bool_0 = False
    dict_0 = {}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    int_0 = 1596
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    int_0 = 3167
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    object_0 = module_1.object()
    str_0 = "~wkhORjk"
    dict_0 = {str_0: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bytes_0 = b"\x7f)\xa7\x81.\xdeh\xdc\x8e8Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    int_0 = 98
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    set_0 = set()
    str_0 = "&h;1@OGgu,"
    int_0 = 2659
    tuple_0 = (set_0, str_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    int_0 = -2181
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    complex_0 = -436.2993 + 1519j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    int_0 = -1031
    module_0.match(int_0, int_0)


def test_case_3278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3279():
    str_0 = "(6v9 eyu+4SoJ3\tvhL"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    int_0 = -863
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    int_0 = -148
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 274
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    str_0 = " uNJ iiPh{xQB-\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    str_0 = "l%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bytes_0 = b"a\xdc\xfd\xff\xac\x05\xdd;\xad\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    str_0 = "#fmso{xr@}}Ow\x0b*Vc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    int_0 = 2441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    str_0 = "k?9Hq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = -3879
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    int_0 = -1855
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b")\xfbH\xcf~\x86o#A\xf7\x82"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    float_0 = 2115.9987
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = "&!4J\x0cnaq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    bytes_0 = b"\xd9F\xdb\xf9d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = ".OXn\n\"mMK'\x0b:q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    float_0 = 3928.942153
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    int_0 = 359
    float_0 = 6.914
    str_0 = "Z08UpDl-\r^4$\n,"
    tuple_0 = (int_0, int_0, float_0, str_0)
    dict_0 = {tuple_0: int_0, float_0: float_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    str_0 = "e!xV:%%-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = '8p."=Y'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = 3519
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    int_0 = 1615
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bytes_0 = b"\xe2\xe3*]"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    str_0 = "n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    bytes_0 = b"a1y\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    bytes_0 = b"\xbcWOu\r\xf0\x99v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    list_0 = []
    str_0 = "wSc=+\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    str_0 = "-LVtLWp\t E=7!;le\x0c_]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = 647
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    float_0 = -522.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    int_0 = -2381
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    str_0 = "2%"
    bytes_0 = b"\xdc\xd8\xb6\xb9\xf1"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    int_0 = -1368
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    str_0 = "7!9<&\nh]6Q"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = 1433
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b"\xf3\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    bytes_0 = b"\x04\x9f"
    module_1.object(*bytes_0)


def test_case_3321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3322():
    complex_0 = -1724.0184 - 1582.327j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    int_0 = -2167
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"\x96\xde\xe6\t#\xcf\xb9u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    int_0 = 758
    module_0.match(int_0, int_0)


def test_case_3326():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3327():
    bytes_0 = b" \x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    str_0 = "/"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = False
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3332():
    int_0 = -4852
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3333():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    bytes_0 = b"6\xe2C\x92S{\xda\xa8\x12\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = -2800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bytes_0 = b"\xaa\x98\xd6_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    int_0 = -1551
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3342():
    float_0 = -60.97
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    str_0 = "(u:5thLh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    str_0 = "+*Z0<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = ""
    list_0 = [str_0]
    dict_0 = {str_0: list_0}
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    set_0 = set()
    bool_0 = False
    list_0 = [bool_0, set_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bytes_0 = b"\x10\xc6\xb4S\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    int_0 = -318
    module_0.match(int_0, int_0)


def test_case_3352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3353():
    int_0 = 1941
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    str_0 = ",=YO~|v#%c9"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"\xf5\x06O\x00\xfap\xe3\xa1\xf0L"
    bytes_1 = b"\x1b\x94\xc28_;\x85@\xb4\xe6"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bytes_0 = b"\xf1fBZ\x12`:\xe6\x06\xd9\x1e\x82\xd0/\x18"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    str_0 = "tf~D!FnT7dZ25"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    bool_0 = False
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\x99j\x88\x9b\xb9\xb3-\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    bytes_0 = b"\xa6\xfeL\x14\x1b\xbaD"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    str_0 = "g4C+4D^"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    float_0 = 569.0642
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    str_0 = '4"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    str_0 = "_%m8GG`*Bc%x:|'Dr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    int_0 = -1083
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    int_0 = -517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    int_0 = -1003
    module_0.match(int_0, int_0)


def test_case_3371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3372():
    complex_0 = -1416.040254 + 2084.97252j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    str_0 = "XA-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3375():
    int_0 = 414
    module_0.get_new_command(int_0, int_0)


def test_case_3376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3377():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


def test_case_3378():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3379():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    int_0 = 1222
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    bytes_0 = b"\\\xee\xdcq\xe6\xcf\xd9c\x8f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    dict_0 = {object_0: set_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    float_0 = 1263.56271
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    str_0 = "wQ4[99#Sklmq9c(.\x0b?3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"\x16i\xe6)\xc9\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    int_0 = -3035
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    float_0 = 739.686
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    float_0 = 2592.323
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    str_0 = "+(|\x0b\t:"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (none_type_0,)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    int_0 = 1099
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    str_0 = "8#NE8y*~>g5luXmh>P@"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = "\x0c L\\=\x0b-%\x0cq"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "3"
    set_0 = {str_1}
    dict_0 = {str_1: str_0, str_1: set_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, object_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "Si+mt<"
    none_type_0 = None
    str_1 = "l>?Tf"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


def test_case_3398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3399():
    str_0 = "N^BF\nD2.G}0W?"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "u}\x0czJlK|PIL4{Hd1*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bytes_0 = b"\xb3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    complex_0 = -4479.7744 - 488j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "$P]7"
    str_1 = "$Xe8]\n~p*x MjbZB@\nl7"
    set_0 = {str_0, str_1}
    str_2 = "MQ~G%"
    dict_0 = {str_0: str_0, str_1: set_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = -125
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    int_0 = -532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bool_0 = True
    int_0 = -2032
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    int_0 = -1243
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    float_0 = -104.111
    str_0 = "tz 4i~"
    bytes_0 = b"\tQ"
    tuple_0 = (float_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bytes_0 = b"\x86\x95\xaf\x96\x81\x1f\xb0\xd6\xa9\x12*\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    set_0 = set()
    float_0 = -1165.26137
    module_0.match(set_0, float_0)


def test_case_3415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bytes_0 = b"J)\x0fe\x13\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    complex_0 = -6094.34 - 1862.00988j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    str_0 = "@\x0b\rF=]yE/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b"e\xc4q\x10\x96\xe8%X<\x19\x93\xc7\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = -4273
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    bytes_0 = b"\x0f\xc3\xf7A_8\xae\x82R\xf3\x0b\x01b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    str_0 = " @R:=4&AQ="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    int_0 = 2950
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    int_0 = 2994
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    int_0 = -206
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    int_0 = 514
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    float_0 = 2232.02
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "W\r8=W~\\=qg2[:W\x0c2`"
    dict_0 = {str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    float_0 = -4301.41
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    int_0 = 420
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    float_0 = -4155.28949
    list_0 = [float_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    float_0 = 250.271228
    object_0 = module_1.object()
    set_0 = {float_0, object_0}
    list_0 = [object_0, object_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    str_0 = "kp\ra[94vtex_SA6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    float_0 = -225.85
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = -4460
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    int_0 = 1334
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bool_0 = True
    set_0 = set()
    tuple_0 = (set_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bytes_0 = b"\xf3\x8b\xce\xb4\x84\xb6]\xd6/O\xe0\xdf\x9b\xa8\xa8\x1f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    bytes_0 = b"\xcd\xf6R\xbd]o1\x8ccc\x1f\x1cc\xe7\xe3\x15)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_0}
    list_0 = [set_0, set_0, set_0, bool_1]
    int_0 = 1347
    tuple_0 = (list_0, int_0, bool_1)
    bool_2 = False
    int_1 = -109
    tuple_1 = (set_0, tuple_0, bool_2, int_1)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    int_0 = 156
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3444():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    str_0 = ""
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bytes_0 = b"|U\x06\xa5\xd3\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b"\x80\x90\xbe\x8c\x8c\xd09\xe3`$\xf8y\x8b\x97M\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    float_0 = 278.413445
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    int_0 = -3653
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    int_0 = -126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    complex_0 = 2242.9082 + 1075j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    int_0 = -451
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    str_0 = "b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    bytes_0 = b"\x8c\xe68\xe1u\xec\x99\x9a\xbc\x8eo\x12S\x9fP"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    str_0 = 'N Yp"l0'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    str_0 = "o~An"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    none_type_0 = None
    float_0 = 305.1
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bool_0 = False
    complex_0 = 1276.96921 - 2075.3j
    set_0 = {complex_0}
    tuple_0 = (bool_0, bool_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    float_0 = 1509.218612
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    str_0 = " hO@/IwvrJs&5h\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    int_0 = 521
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    int_0 = 718
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    str_0 = '8s!]/$E7:h/5h"`^'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    int_0 = 2130
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


def test_case_3470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3471():
    str_0 = "\x0c"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    str_0 = "<Cu,$kST"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    bytes_0 = b"\x9f\x9f\x9b\x04/\x9e\x08."
    bytes_1 = b"\x11\xa3\xd8\xdd\xfe\nd\xac\xf1z\x9c\xb6"
    int_0 = 2289
    tuple_0 = (bytes_0, bytes_1, int_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    float_0 = 1125.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    str_0 = "6]\nt]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    bytes_0 = b"J\x97\xd3\xa0o\x1a\xbe\x01\xf8\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    str_0 = "F.*A=iRd3qp24M=l5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bytes_0 = b"{\xecp\xe8\x85\xcf\xa1'\xfba\x0f\x0c\xbbMn\xc1\xe8\x8e\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    int_0 = -948
    module_0.get_new_command(int_0, int_0)


def test_case_3482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bytes_0 = b"\xef\x9bM\xe6\xf2\x04\xa1#v\xe8\x10\xdff\xb0\xf8T\xe1t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    complex_0 = -304 - 3345.78j
    bool_0 = True
    str_0 = "}3$N\x0bSJi%{-q`7uF"
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
        bool_0: str_0,
    }
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    str_0 = '=K"DTkAE4z</'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


def test_case_3487():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    str_0 = ")$0B>*N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    tuple_1 = (tuple_0, bool_0, bool_0, tuple_0)
    list_1 = [tuple_1, bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0,)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    float_0 = -3484.1
    tuple_0 = (float_0, float_0)
    dict_0 = {tuple_0: float_0, tuple_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "&"
    tuple_0 = (str_0,)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "!CB+0>Q\x0bfF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bytes_0 = b"p-\xf8\xaf\x0c}\xcfN^Kt\xc4\x99\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bytes_0 = b"2\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    int_0 = 65
    module_0.match(int_0, int_0)


def test_case_3497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3498():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    float_0 = 1614.71938
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bytes_0 = b"S\x16u\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    bytes_0 = b"\n)\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    float_0 = -1429.256155
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    complex_0 = -2882.5972 + 1931.3195j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    str_0 = ""
    tuple_1 = (object_0, tuple_0, str_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    str_0 = "r0\n_=8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    int_0 = 705
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    int_0 = 1309
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    float_0 = 1122.76432
    bytes_0 = b'"&nn\xdf\xa5\xc8\xc8'
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    str_0 = "QCE!\nBR"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    int_0 = -1936
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    complex_0 = -104.3549 - 3437.789j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "FsN4oj"
    set_0 = {str_0, str_0}
    tuple_0 = (list_0, bool_0, str_0, set_0)
    list_1 = [tuple_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    float_0 = -4312.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    complex_0 = -2125.863732 + 442j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.object(*list_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    int_0 = 652
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bytes_0 = b"e\xe2\x8c\x01|f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b'S\x81\x7f\x1f\x0c\x92\xab\x8d\xc9\xd9"8\xab|'
    module_0.match(bytes_0, bytes_0)


def test_case_3523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3524():
    complex_0 = -936.6 - 381.82992j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    str_0 = "N P\rp4x>%I*2aj]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = 82
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    int_0 = 662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    int_0 = 87
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "vXQ;~\t"
    tuple_1 = (tuple_0, str_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bytes_0 = b'o\x1a"-\x80y+p\x92W&\xdb\x8d\x07\xb8ZVj'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = ")y"
    int_0 = 1044
    str_1 = "f&hXro.\\IdV{]}\x0bPw"
    str_2 = "+@\x0bYOo1}t3u?4-*_-i8\\"
    dict_0 = {str_0: int_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bytes_0 = b"\x98\x8e\xfdN\xd0i\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    bytes_0 = b"\x1e\x0c \xcdr#\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    int_0 = 1499
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    str_0 = "\x0c/{CeEO#i\x0b\\%ZB`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    str_0 = "]s]="
    bytes_0 = b"\x15\x16\xb6\xdap\xf6G\xec\xe2RN\x02\xec\xa2\xee"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    float_0 = -1127.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    str_0 = "xbhuWTZ/f%*T#T\\++>;"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    int_0 = 1870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bytes_0 = b"T+\xe9\xe6\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bytes_0 = b"\xf8_SQ\x05;\x90\xfb\x0b\xd5\xe1F;\xd5\xf7\x80G"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    float_0 = -1994.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    int_0 = 697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    float_0 = -3212.618
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    int_0 = 2887
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "mi^NPbYj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    bytes_0 = b"\xa9\x98\x1cy\xb2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    int_0 = 3511
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    int_1 = -3749
    module_0.match(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 1383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bytes_0 = b"l\x11\x83\xc01\x1cL\x10\xb0y\xa7\xb3-\x95\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = 763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    str_0 = '4"HA)"'
    module_0.get_new_command(str_0, str_0)


def test_case_3560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3561():
    float_0 = 4734.833
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_3562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3563():
    float_0 = 990.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    int_0 = 1029
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    bytes_0 = b"\x9f\x07\x1c\xe1N\x1c\x80p\xfa"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    int_0 = -556
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    bytes_0 = b"eeE\x8b\xca\xda\x1b\xed\xb6\x0f{\x9c\x8dC"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bytes_0 = b"2\xe0\x0cx\x98\xa90\x98^\x9d0\x12\xb5\xd1\xc8\n\xa0\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    int_0 = 2321
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"\x8f+\xc2\xb7\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    int_0 = -60
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    bytes_0 = b"\xcfn\x01\x98}\xd5\x89\x05D\x8e\x02"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    str_0 = "u>L\\*)|R|cX*W"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    str_0 = "DnY\r)A73=?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    float_0 = 1790.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    complex_0 = -657.2 + 2469.664j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    int_0 = -5316
    int_1 = 3442
    dict_0 = {int_0: int_0, int_0: int_1}
    module_0.match(dict_0, dict_0)


def test_case_3579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bytes_0 = b"\xbd>\xb2f\xa8\x00\xf5\\"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    bytes_0 = b"\x9b\xd9\x1c\xbdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    bool_0 = True
    complex_0 = -1609.311 + 2970.5813j
    dict_0 = {bool_0: bool_0, bool_0: bool_0, complex_0: bool_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = -481
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "y_^<)W|wv(v3n/\x0beC0T1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    int_0 = -3750
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    bytes_0 = b"\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = -707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3591():
    complex_0 = -1123.5 + 2933j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    float_0 = -2610.323
    tuple_0 = (float_0,)
    str_0 = "`gZR*fj}<uij"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    str_0 = "J`_*N92r"
    set_0 = {str_0, str_0, str_0, str_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    str_0 = "EZMGBt5P>f~!u\t]`O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bool_0 = False
    bytes_0 = b"\x82I_\xfb\xc1\x10S\xd5o\xea\x98\x18l\xb4\xd8\x96\x86"
    tuple_0 = (bytes_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    str_0 = "]`!QOb{u$^/;'YGEKO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    float_0 = 359.29
    module_0.match(float_0, float_0)


def test_case_3599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    str_0 = "P(@$6MRR6.R"
    float_0 = -3226.76798
    dict_0 = {str_0: str_0, str_0: float_0, float_0: str_0, str_0: str_0}
    float_1 = 772.0
    list_0 = [dict_0, float_1, dict_0, float_1]
    module_0.get_new_command(list_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    int_0 = -218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    float_0 = -3447.586036
    module_0.match(float_0, float_0)


def test_case_3604():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bytes_0 = b"\x1c@\xfc5`\x17\xab!7\x15\xd8\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bool_0 = True
    int_0 = 3342
    str_0 = "#B%HKcVY`RKVUj"
    tuple_0 = (bool_0, bool_0, int_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    float_0 = -2338.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    object_0 = module_1.object()
    dict_0 = {}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    str_0 = "Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    int_0 = -779
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "#FgCo9P1##"
    tuple_0 = (list_0, str_0)
    bytes_0 = b"Z\x89\x86\xdb\xe5\x8f\x80"
    float_0 = 3397.0
    tuple_1 = (tuple_0, bytes_0, bool_0, float_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    str_0 = "'d\t\\rDRP$1Y.#N#C8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = -658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    str_0 = "~;jCa`]\tPJA{qp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    int_0 = 2061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    complex_0 = -680.9 - 1622j
    float_0 = -2431.0
    module_0.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    int_0 = -3555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    str_0 = 'wJgc<"`f'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    int_0 = -3527
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = -502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    int_0 = -1459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"j\xa7\xb4\x13\xf9\x94\x96\x0fMCS\xed\xab\x00(\x90\x92A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    float_0 = 3139.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    str_0 = "G6*c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bytes_0 = b"\xf2\xb9\x94\x18\x986\xdaY\x18IT*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    int_0 = -1413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    bytes_0 = b"\x03\xbb\xbf\x88k\xd8\x82\x91\xcfm#R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = 3672
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    int_0 = 3396
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3638():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    bytes_0 = b"\xe0\\\xf4\xe5\x08\xb8\x1d\xbb\x10\xac\xa95\xdd\x8e\xe1\xbb \xef\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    bytes_0 = b"\xd0v3m@"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


def test_case_3641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3642():
    bytes_0 = b"H\x1b^6\x05\xd1&m\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3643():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3644():
    complex_0 = -954.814 - 1525.022358j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    str_0 = "WbTxjo\\EyC.Dzo%v~;"
    float_0 = -351.62
    int_0 = -985
    tuple_0 = (str_0, float_0, str_0, int_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bytes_0 = b"\x15H"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "?Euv~*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    complex_0 = -218.650921 - 516j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    int_0 = 621
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    str_0 = '~G.=yD!\x0c%&(VCW~"\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    int_0 = 1268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    int_0 = 2139
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bytes_0 = b"\x12GW4I3\x9e\x87jx\x16"
    str_0 = "\x0cy7B"
    tuple_0 = (bytes_0, str_0)
    list_0 = [tuple_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    str_0 = "d2jUU[%Y~}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    str_0 = ";GclyVy\x0bvUrPc.{%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bool_0 = False
    set_0 = set()
    list_0 = [bool_0, bool_0, set_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    bytes_0 = b"Z\xbf\x97\x8b\x92\xd4\xc5]\xdfy"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    float_0 = 1136.8267
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    int_0 = -818
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = -2024
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bytes_0 = b"\x08"
    float_0 = 3138.0
    int_0 = -464
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, float_0: float_0, int_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bytes_0 = b"\x88\x85w'2w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    bytes_0 = b"\xb6\xbfs\xc8\xf2\x87\xc0\xfe:\x7f\xbb}\xcaxu\r\xe5\x1ef\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    bytes_0 = b"\xbcO0\xdeq\xc1\xad\x06P\xcb\x04\x9f\x83QqQ"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bytes_0 = b"\n\x0f"
    bytes_1 = b'\xc9m/"\x14\x92{F\xfa\xbb\xb2R\xdc'
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    str_0 = "mH{"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = -191
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    float_0 = 1978.628
    str_0 = "@%(aH8ak%xb3"
    set_0 = {float_0, float_0, str_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    float_0 = -1612.561
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    int_0 = 742
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    float_0 = 775.32
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    bytes_0 = b"\xb6\xef\x16\xf9\xd8\xb9\x88\xd8\x804\xd1\x8ee\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    str_0 = "\x0bX*9!2!t6Z/"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    float_0 = -1431.4232
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    float_0 = -448.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    complex_0 = 2030.1 + 175.6871j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    int_0 = -487
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    float_0 = -2065.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    str_0 = "XpI}61\nZ7F+T\n\nHM%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    int_0 = 4129
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = 282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    str_0 = "s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    float_0 = 1248.03602
    bool_0 = False
    str_0 = "WiL1AH"
    tuple_0 = (float_0, bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    int_0 = 2085
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    bytes_0 = b"\x11\xb0\x1dy\xd6X\xdd\xea\xdbM\xec\xc88/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    bytes_0 = b"\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    int_0 = 650
    float_0 = 1125.15
    bytes_0 = b"\xea\xaa'=\x1f:z\xcf\t\"4v%B\x1d!\x18"
    tuple_0 = (int_0, float_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bytes_0 = b"=m\x7f\x89\x95\x8b\xeb\xf6Kh\x9fks`\x88\xe0}"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    str_0 = "6Rv?\rHW@Gowh!rVT}Z."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bytes_0 = b"\xcdV-\x19\x16\xe2U\xcb\xcb\xf3]\xe1n\xb8\x9f\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    int_0 = 3092
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    bytes_0 = b"\x89\x83\xd78)\xa7\xbe$\xb2\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    str_0 = "~"
    str_1 = "t%_cT\t6u4"
    int_0 = -1633
    str_2 = ",@^|K6OH=,N"
    str_3 = "sRhQC4T"
    dict_0 = {str_0: str_0, str_1: int_0, str_2: int_0, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    str_0 = "Fo,nz8\\gGoq+2y1H-}\tI"
    bool_0 = True
    set_0 = {str_0, str_0, str_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = -1498
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    object_0 = module_1.object()
    set_0 = set()
    tuple_0 = (object_0, set_0, object_0)
    object_1 = module_1.object()
    list_0 = [tuple_0, set_0, tuple_0, object_1]
    module_0.match(list_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    tuple_0 = ()
    list_0 = []
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    str_0 = "k\t6}>t])Dqja"
    list_0 = [str_0]
    module_1.object(*list_0, **str_0)


def test_case_3706():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bytes_0 = b"\x07\x91\xb6\x00\xad@\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    bytes_0 = b"\xbfL\x16\x87\xd12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    float_0 = 28.35587
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    complex_0 = -2459.666136 - 81.558j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    int_0 = 2473
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    float_0 = -2241.54784
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    str_0 = "-nqJB=\\,"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    tuple_1 = (str_0, tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"@\xb0\x80\xdf\x97\xce\xda?\x14\xebd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    float_0 = -757.941169
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    str_0 = "~:o[OQ.z\\Z+3As,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bytes_0 = b"o,"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "dSc-0?]^"
    tuple_0 = (dict_0, str_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    int_0 = 2342
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    float_0 = 2252.367914
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    int_0 = -2271
    set_0 = {int_0, int_0, int_0}
    str_0 = "g8w#h"
    list_0 = [int_0, str_0, set_0]
    tuple_0 = (set_0, list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    int_0 = 3858
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = "sCGQ)Eq`t/R\x0b[@nf4"
    str_1 = "x\n4t3kaqh'`\x0b\"T?X(qRA"
    str_2 = ")Q7X~\x0b9R^"
    str_3 = "$sza`"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    none_type_0 = None
    int_0 = -2532
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    str_0 = "|dPa'+;'[kG"
    module_0.get_new_command(str_0, str_0)


def test_case_3730():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3731():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_3732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "1'\"m5?mp1s)%/"
    module_0.get_new_command(str_0, str_0)


def test_case_3734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3735():
    complex_0 = 436.127652 + 954j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    str_0 = 'Fuw{@o&`3"5M 0.U~'
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bytes_0 = b"\xa5\x18r\xef\xd00\xefX\xeb!\xe7\x1a"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    int_0 = 853
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    int_0 = -1276
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"eK\xe8\t3\xde\xf5\xbb\xb8\xab\x14\xf8w\x14\\\xee\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    int_0 = -2249
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bytes_0 = b"\xbdfk\x90\x1c3\x1c)\xe4\x18\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    int_0 = 1667
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    list_0 = []
    str_0 = "ak(%uN8c8"
    str_1 = "qZANvBET{"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    bytes_0 = b"\x90z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bool_0 = False
    bytes_0 = b"\xd6*)J\xc6\xaf\x01\xb1M\xd3\\\xaa\x94\x1e\x13\n\xfb\xa4\xd5E"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = "*`<mI}lL~xk5e-5.\x0c\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    float_0 = -1574.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "cnj]&?]\rR{"
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_3754():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3755():
    str_0 = "Xrc\n0s"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = -69
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = 717
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    str_0 = "9_\rU1klP$rkm#v<D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    complex_0 = 283.91 - 220.5j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    float_0 = 1749.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


def test_case_3762():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3763():
    int_0 = -441
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    float_0 = 3352.53
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    bytes_0 = b"]\x01\xaa\xf9\x08$Vk\xf9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    bool_0 = False
    str_0 = "\r"
    dict_0 = {str_0: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"\x84\xde\xe0\x0eD\xce\x8f\xc3\x89-/P\xb8{A\n"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3769():
    int_0 = -243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    str_0 = "a#9V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    str_0 = "z(NK:hY\x0b1p\tx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bytes_0 = b"3\xe5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    int_0 = 3255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    complex_0 = -3193 + 465.346539j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    float_0 = 607.624
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    complex_0 = -1634.381 + 954.45559j
    str_0 = "<S}}_*17JWh\x0b1R.A+z%"
    list_0 = [complex_0, complex_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    float_0 = 5794.427
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    float_0 = 2671.641
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = "0bB:y{L7]~tqf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    float_0 = -1046.996525
    set_0 = {float_0, float_0, float_0}
    bytes_0 = b"\xb5\xce\xa9C\x940\xaf\xe1J\x8f\xf7c\x9a"
    module_0.get_new_command(set_0, bytes_0)


def test_case_3781():
    pass


def test_case_3782():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3783():
    str_0 = "t`i@\n "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bytes_0 = b"\xb8z\x8e\x157\xa2\x82)\xf3\x8b\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    str_0 = "8s04\r+\x0c$]d?"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bytes_0 = b"I\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    complex_0 = -1154.248 + 696.549098j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = '"%fe{Yysge&a2@$u9'
    str_1 = "d6\t@T.tj7tc@&3SG"
    int_0 = -1007
    str_2 = "jlS?"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: int_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    int_0 = -1212
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    int_0 = -999
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    str_0 = "X'X%TO%.<7{Rkt%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = 4226
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    int_0 = 2571
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    str_0 = "lc5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    str_0 = "\\n"
    module_0.get_new_command(str_0, str_0)


def test_case_3797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3798():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    int_0 = -468
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    set_0 = set()
    int_0 = 712
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    str_0 = "]6y5]K6{my"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    int_0 = -3336
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    str_0 = "h:KyG|2Ng\r)m\nb#(dBk\x0c"
    str_1 = "Tb)szz\\yt#\r$M(rq(+0"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bytes_0 = b"\xca\x11\xbb\x1c@\xbe\xcf\xb3\xc2\xac\r\xbav\xdf\x9d"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    float_0 = -2024.658
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = 1677
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    bytes_0 = b"\x93-\x95X>\x13\xf8]'"
    int_0 = -791
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    float_0 = -516.3408
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    int_0 = -2104
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    float_0 = 2589.8
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, set_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    int_0 = -2984
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    int_0 = 80
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    int_0 = -207
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    float_0 = 543.17
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    str_0 = "\t*=K=LCG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_3819():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bytes_0 = b"%\xafkb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "RY]r7>BYP#4n@Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    complex_0 = 2126 - 2255.45j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_3823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bytes_0 = b"}\xd4\x9cL\x11\xfc\xc3M\xf3\xba\x10\xb7\x0f\xa5\x83>"
    int_0 = 46
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    int_0 = -392
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    str_0 = "`'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_3827():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3828():
    bool_0 = True
    int_0 = 1500
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    str_0 = "~Qk.59rl0mMB"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = -1761
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    bytes_0 = b"\x8f\x8c\xef\\\xd8\xec\x17\x86\xb9\x9e\x9a:su.H"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    int_0 = -123
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bytes_0 = b"_j\xc6N\xf4\xff(\x15-N\xce\x03\x16\xf7b\xf0\xd3\x0c\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    int_0 = -2920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    int_0 = -164
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "TSkuKUjRwH_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    float_0 = 1323.544
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    int_0 = -3697
    str_0 = "\tmh%q{"
    dict_0 = {str_0: int_0, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    bytes_0 = b"X\xb8\xf4j`\x9d\xda\xfa4\xaf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    str_0 = "t/^NY(X@*D@"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    int_0 = 485
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = -125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    bytes_0 = b"\xd2\xcb>H\xef\xab>-\xf7\xa0h\xdc\xb3d\x8b\xff!"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    float_0 = -129.149104
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    int_0 = -323
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    int_0 = -454
    int_1 = -25
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    float_0 = 407.9209
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    int_0 = -2492
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    complex_0 = 271.5942 + 3023.024j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    int_0 = -435
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    int_0 = 250
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, set_0)
    list_0 = [set_0, set_0]
    tuple_1 = (int_0, set_0, tuple_0, list_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    int_0 = -1702
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    object_0 = module_1.object()
    set_0 = {object_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


def test_case_3858():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3859():
    float_0 = -189.83844
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bytes_0 = b"c\xca\xfap\xf0\xe02\xde#XN\xbd\xd6\xbc+"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = "jh\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    float_0 = -1377.32828
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = 1235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    float_0 = -796.72
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    int_0 = 1698
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bytes_0 = b"\xf5\xf6\x8d\x16 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bytes_0 = b"\x19+\x10c\x82"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0, bytes_0)
    dict_0 = {tuple_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b"\xd6Z9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    int_0 = -319
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    str_0 = "fAD>D0u)+2BQ1"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = 709
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    bytes_0 = b")\xa5"
    float_0 = -185.7
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, float_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    float_0 = -333.45
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    int_0 = -1771
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    str_0 = "`oj\t}vn\r"
    str_1 = "X|6e'eMs&6}=QFfRSu"
    set_0 = {str_0, str_0, str_1}
    module_0.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    complex_0 = 751.9824 + 2904.375j
    str_0 = '+z\n1&\x0b|Z`I[mgQ"X'
    tuple_0 = (str_0,)
    module_0.match(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    int_0 = -1860
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    complex_0 = -3889.97923 + 1361.435742j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = 887
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bytes_0 = b"]\x81\xe5\xf2\xff]\x00m\xd1\x1c\xec\xac}\x8e\xf4\x9b\x1fq\x9e\x11"
    int_0 = 1279
    list_0 = [bytes_0, bytes_0, int_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bytes_0 = b"\xb6ya\x02\xdc\xd4P\x06\x11p\x8c$(5@\xbc\x01W\x96"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bytes_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    complex_0 = -2006 - 351.81004j
    bool_0 = False
    module_0.match(complex_0, bool_0)


def test_case_3887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3888():
    float_0 = -814.3105
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    str_0 = "z8=|{Sf$d8T'AoAh-9l\""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    str_0 = "C=["
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    complex_0 = -188.5 + 367.027j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    complex_0 = -3363 - 1705j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bytes_0 = b"8\xdbZ\xd8\x8c\x9f4\x14\x18"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bytes_0 = b"z\xec\xacg\x1e\x8eD\x04\x19\x18\xe3\x9ev\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    str_0 = "*3K<~}D\r;4n"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = '=VS"5#bw@?'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    str_0 = 'yii~_>""qH?!~'
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_0, list_1)


def test_case_3899():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3900():
    str_0 = "_iGV^jjC|NC O%\x0c/"
    int_0 = 1057
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0, int_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    str_0 = "Sv+JSvw`\\k\x0bT\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    int_0 = -491
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bytes_0 = b"G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    str_0 = "9K^#0"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    int_0 = -694
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    bytes_0 = b",j\xb9\xb9\xb0\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = -2284
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 1055
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bool_0 = False
    str_0 = "K\x0c-0$`v 4<"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "x"
    bytes_0 = b"Ojov\xe6^"
    tuple_0 = (str_0, bytes_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    bytes_0 = b"\xa0]\xe7\x8b\x0e}!'\xea3"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    bytes_0 = b"t\xc9\xc05\xf0\xca\xa3"
    int_0 = 2297
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, bytes_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bool_0 = False
    float_0 = -128.2
    list_0 = [bool_0, bool_0, float_0, float_0]
    list_1 = [bool_0, float_0, list_0, list_0]
    tuple_0 = (bool_0, float_0, list_1, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    float_0 = 1077.621915
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "3!LnsyPtPb]pFt&Z}>S "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    int_0 = -1557
    str_0 = ""
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, str_0: int_0}
    list_0 = [str_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "_5-7-"
    str_1 = '~l"7?t$+^,^2wVOYlA'
    str_2 = "~$"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    bytes_0 = b"\xee\xfeq\xaa\x1et\xc9\x8cQ\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = -1379
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    bytes_0 = b"\xbb\xbc\x00/\x88c\xa3M)\x9e&."
    int_0 = 322
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0}
    tuple_0 = (dict_0,)
    tuple_1 = (bytes_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    int_0 = 1849
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


def test_case_3926():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3927():
    float_0 = -986.0
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    int_0 = 3624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0, bool_0]
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    int_0 = 1204
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    int_0 = 1694
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    str_0 = "WQPeHHXw`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    complex_0 = 1509 - 590.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    complex_0 = 864 - 956.036j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = -6481
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    int_0 = -2606
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3941():
    str_0 = "2~c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bytes_0 = b"K\x92o\r^W\xadh\xe3\x9c\x00\xb3\xfdq\xe2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bytes_0 = b"\xe8-\xf6\xd3\x89O\x83c;gI\x97>\xb3\xc8j\x8e\xad\xb0"
    module_0.match(bytes_0, bytes_0)


def test_case_3944():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = -361
    str_0 = "Nu+"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = 685
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    float_0 = -600.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    str_0 = "9\taW&xYVNK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    int_0 = -254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    str_0 = "s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    float_0 = -1386.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    bytes_0 = b"\x81\xcf\xcb\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    int_0 = 189
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    int_0 = 444
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    int_0 = 2338
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    float_0 = -2081.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, dict_0, bool_1, float_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    int_0 = 229
    float_0 = -3285.4429
    tuple_0 = (int_0, float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    float_0 = -3008.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    float_0 = 1677.0
    bool_0 = True
    set_0 = {float_0, float_0, float_0, bool_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    float_0 = 910.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    str_0 = "?juAdyiC"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    int_0 = -2728
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    float_0 = -2217.9354
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_3967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3968():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    bytes_0 = b"36m\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "l;VpK;j 5("
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bool_0 = False
    int_0 = 707
    set_0 = {bool_0, bool_0, bool_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_1, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = -4206
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    str_0 = "_}\tJfd5f\x0b&NO=Spdj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    bytes_0 = b"\x82\x0b\xc5k\x02\xdb\xc9qa\x029\xdb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    str_0 = "HE*\\ZVn2?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    bytes_0 = b"\xcc\xfa\x03\xfbs^\x0c_\xe5\x8a\x0e\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    str_0 = ""
    complex_0 = -1764.0273 - 786.71557j
    tuple_0 = (str_0, complex_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    str_0 = 'Jxr{c8S*4\ng"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "/[7OhO$>wJ**\n$"
    list_0 = [str_0, str_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    int_0 = 1661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    object_0 = module_1.object()
    float_0 = 1101.14
    tuple_0 = (object_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bytes_0 = b"\xba\xef\xc8\x13\xfe\x9a\xf7\x13\x98`\xfb\xfa\x82h6U,\x81\x1e\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bytes_0 = b"\xd7\xacV\xc95\x1c\x8e\xa2\x0c"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    bytes_0 = b"+\xaf\xf9\xeb\\\xd3\x86\x06\x08\xe8\x14\xee|\x9b)\xfcmVP\xe1"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    float_0 = 1396.3569
    module_0.match(float_0, float_0)


def test_case_3990():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bytes_0 = b"$\xe9A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    str_0 = "p&@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    str_0 = "~)L;hi$(:ceA:.+g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    int_0 = 1826
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bytes_0 = b"\xac\x15_\xde"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bytes_0 = b":Q,\x1d\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    bool_0 = True
    bytes_0 = b"\x91e\xfa#\x17\xda\xf1\xe7\x04\x12\xa0C\xed7\xe3\x9d"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    float_0 = -775.7197
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    int_0 = 1766
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = 3058
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bytes_0 = b"H:_\xdf\x97\x90\xe7\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    float_0 = 1634.41998
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = 1575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    str_0 = "L&n-r03/"
    none_type_0 = None
    str_1 = "Z{=E("
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    int_0 = -377
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4008():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4009():
    str_0 = "sKFCt VtE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = 4854
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bytes_0 = b"\xee\x97\x81\xe0\xf1\x80>z\r\x02\\\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = 557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    bytes_0 = b"m\x06\xe9\x95\xe1\x8b\x93fb\x1a_\xba\xd2\xc6@\x9b\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    float_0 = 1980.576017
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bytes_0 = b"\\\xc4\xaf@E\xde\x05\x05b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    float_0 = -1784.278
    tuple_1 = (tuple_0, list_0, tuple_0, float_0)
    bytes_0 = b"\xbf\x92\xfcp\xaf\xd9\xb5\xbfa\x05\xcbi\xc3#\xf7>\xa1\xba\x83"
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bytes_0 = b"\xb2\x1fm\x9eg/ ~\xf2\xa5\x96\xfb\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    float_0 = -3175.01
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    int_0 = 1627
    str_0 = 'VO?V%pr"UxL'
    dict_0 = {int_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    int_0 = -1843
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    int_0 = 207
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = ""
    set_0 = {str_0}
    module_0.match(set_0, set_0)


def test_case_4023():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = -1280
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    str_0 = "0M:TOCa887jOLMH(/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = 1974.0098
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bytes_0 = b"yF\xf0~\xc3|7\xc1\x89\x9e\xd5\xbe\xc4/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bytes_0 = b"\xc2\xe0\xa4R\x95H\xa2\xf9\xc7\xd5Y\x8d(\xd6\x8b\xc7Iy\xb2A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    str_0 = '"""9^A{m_'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "<lPdSiv9B\ngu?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    int_0 = 595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    str_0 = '(,MtfTkG"d'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = "3U<;U\\Owr;5bKIirc~y"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    float_0 = 1819.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = 449
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = 989
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    complex_0 = 3453 - 978.4963j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    str_0 = "-K?z6{tU+&f(M}.d"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"5\x88\xce\xa1\x15K|\x7fj^\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bool_0 = False
    none_type_0 = None
    module_1.object(*bool_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    float_0 = 674.45
    module_0.match(float_0, float_0)


def test_case_4043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4044():
    none_type_0 = None
    complex_0 = 580.9393 - 1828.86683j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


def test_case_4046():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4047():
    float_0 = 2560.6139
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    int_0 = 3228
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    str_0 = "<R]Kc)C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bytes_0 = b"\xb6\xd6\xa6\xa2J\x0f\x0b\xe0\x02/\xfa\x98>`^\x13\x12J?\xed"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bytes_0 = b"`\xc0\x8a\xf3.\x99\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    int_0 = -323
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    bytes_0 = b"\x06'+x?\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    str_0 = "}</H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    int_0 = -5059
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "C\n7X|n-,tY2q"
    module_0.match(str_0, str_0)


def test_case_4058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4059():
    str_0 = "\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    str_0 = '2"N\x0bi.Q-.Rq+zj>}sS%\x0b'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    bytes_0 = b"\xbe\xa8\xe1\xdf\n\x9d\xab\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    str_0 = "Ti@0-$k)"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\xd3\x05?\xe5\xb4%\xd2ububI"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    int_0 = 421
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    bytes_0 = b"\xd5\xe7\x9f\xf1\xe0r\xecbL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    float_0 = -4256.1847
    module_0.match(float_0, float_0)


def test_case_4067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bytes_0 = b"s6\xa2h'\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bool_0 = True
    bytes_0 = b"f\xdf\xd4\xc3\xcb\xc0I\xbac\x83@\x7f\xed\xdf"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    int_0 = 2092
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    float_0 = -2964.864
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "<A_b4\x0c9_["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    float_0 = 777.72
    float_1 = 4079.0
    list_0 = [float_0, float_1, float_1, float_1]
    module_0.match(list_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    float_0 = -1172.923534
    module_0.get_new_command(float_0, float_0)


def test_case_4075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4076():
    float_0 = 4512.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bytes_0 = b"R"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_4079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4080():
    float_0 = -2017.05
    bool_0 = False
    str_0 = "u/$WV}@hstD"
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, bool_0, str_0, tuple_0)
    module_0.get_new_command(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    float_0 = -949.006814
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    int_0 = -3180
    int_1 = 2518
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    tuple_0 = ()
    list_0 = [tuple_0]
    bytes_0 = b"Q\x0f\rhqET\x8b\x81\xc8r\x98\xe5f\xad"
    list_1 = [list_0, tuple_0, bytes_0, bytes_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    int_0 = -1008
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    str_0 = "9NBl4(Ow9?\x0cOD{JD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    str_0 = "YvK{<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    str_0 = "y;MHe&Mk405r@"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    tuple_0 = (str_0, set_0, bool_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    str_0 = "v%5L4gf8{|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bool_0 = False
    bytes_0 = b'\xcb"Y'
    tuple_0 = (bool_0, bytes_0)
    bytes_1 = b"%\xee\xa5k\x19Q)"
    tuple_1 = (tuple_0, bytes_1)
    list_0 = [tuple_1, bool_0, tuple_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    object_0 = module_1.object()
    tuple_0 = ()
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    complex_0 = -857.623 - 1588.65403j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = -2867
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bytes_0 = b"S\x00Y9g4\xe5\x00n\xb4\xb1\x1f\x95\x0cS\xfeo\xae\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    int_0 = 2718
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = "gDvJ[\ttbTK,.e"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    float_0 = -2407.017794
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"\x80\xd8\x92F%\xc9\xbf\xba\xc7m,JoAx\xab"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bool_0 = False
    str_0 = "'n*"
    str_1 = "|QipQ|y2I9"
    str_2 = "\nmFk?T7hitjIcBbk\t"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "1QQC@JKf*i$a\x0b%&q+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = -1271
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bool_0 = False
    bool_1 = False
    bool_2 = True
    tuple_0 = (bool_0, bool_0, bool_1, bool_2)
    module_0.match(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = -2625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    str_0 = ")H~FC7l;%ED9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bytes_0 = b"]z\x06\xc7\xd3\xb5Q\xd0\xd9B;A\x81\x01\xca\xee\xd6K\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    float_0 = 1391.3135
    bool_0 = False
    list_0 = [float_0, bool_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bytes_0 = b"[\xb74\x8d!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bytes_0 = b"\xc2\xaeD1>\x90\xdd\xbdCfY\x10\x86j\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    str_0 = "<4mHN2"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


def test_case_4120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4121():
    bytes_0 = b"\x14\xa8{e[s\xfd\xaf|\x9bM\xd5\x98}\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    bytes_0 = b"\x86\xbdZx\x17\x11A+'\x03\xe3\xc5\x8b]h\xe1\x15]K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    int_0 = -1076
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b"\xad\x04\x915\xac\xcc4\xb6\xbf\xc6bTn\x99t\x84\x8b\xb6"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    str_0 = "txyQ#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"\xb7\x99N\x8b\x91\xdc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    complex_0 = -2019.3229 + 394.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bytes_0 = b"\\\x14\xef\xdd\x95\xbe\x93\xd1\xb9\x92\xd1\x90 hGeM\xdd\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    complex_0 = -732.397871 + 3578.1817j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    str_0 = "_q]s1#uR!|\rVJk<V7Iq"
    module_0.get_new_command(str_0, str_0)


def test_case_4132():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4133():
    int_0 = 3277
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    bool_0 = False
    bytes_0 = b"\xbfe"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"g$*> \xdfZ"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, list_0]
    bytes_1 = b'6\x80\xdcC@\xf3\r\\/\x17"Y\xef\xbam\xacW'
    bool_0 = False
    tuple_0 = (list_1, bytes_1, bool_0)
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1, bool_0)
    list_0 = [tuple_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    str_0 = "Sd8?^5m\n`t"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0]
    list_1 = [list_0, str_0, dict_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    str_0 = "N 8g-l\x0bQ #\nzV2qLF]\tE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    int_0 = -2253
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    str_0 = "XUmTu.~NU\x0c"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    bytes_0 = b"8<3H\xe2\x9a\x97B\xa1C\x12\xf02\xe4\xab\x836o\x87\x97"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    float_0 = 2254.725081
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    str_0 = "I5R/\n`e?G]hp6"
    int_0 = -890
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = -1317
    int_1 = -347
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    int_0 = 2312
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bytes_0 = b"x\x82\x8c\x0c\xd2\xa5\x9dt\xd9\x06\xbb\xa3D\xe2\x86"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bytes_0 = b"EX]\xf4\xd10\xd9\xd3]\xa6Wr\xbbC\x8e\xfa\xe6\xd7\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bytes_0 = b"u\xf2r\xb2_\x08\xa3"
    module_0.match(bytes_0, bytes_0)


def test_case_4151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4152():
    str_0 = ";RFK`v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    bytes_0 = b"k=\xeb\xf5_\xd6#`"
    bytes_1 = b"\x81\xa4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_1]
    set_0 = set()
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    str_0 = "@sD~"
    str_1 = "I`"
    str_2 = "w'k58s<U]\"+"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    float_0 = 93.614629
    int_0 = -663
    dict_0 = {float_0: float_0, float_0: int_0, float_0: int_0, int_0: float_0}
    tuple_0 = (float_0, float_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bytes_0 = b" \xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_4159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4160():
    bytes_0 = b"\x9dG?\x12\\K\xf5\xc2E\x0e\x92\xa0\xc0M\xf89J\xf0hy"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    int_0 = 1543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    int_0 = -2079
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    str_0 = "TridUq<2/6Y*8Md'Q/H&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    bytes_0 = b"\xd2\xd1\xea\x971\x8c\x9b\x8c1\x1f\x99\xeb7\xd8\x91^GP\x95\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    str_0 = "B{^|D\t}X}{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    int_0 = 3113
    dict_0 = {int_0: int_0}
    float_0 = 2442.061
    bool_0 = True
    tuple_0 = (dict_0, float_0, bool_0, bool_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    int_0 = 3076
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bytes_0 = b"\x87|vd\xf0\xe8\x19\xd8$"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    bytes_0 = b"v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    float_0 = 3202.21
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    int_0 = -3993
    str_0 = "$fl\t&u"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = -2540
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bool_0 = False
    list_0 = []
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    tuple_1 = (bool_0, list_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    bytes_0 = b"%\xcb\x86\xffC'-\x90\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    str_0 = "u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bool_0 = False
    int_0 = -3175
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    str_0 = 'CNe&.d;]QH\nVl"7[A'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bytes_0 = b"\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    str_0 = "+:,O'KCLB]: NL3s5\nY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    str_0 = "jKQj$duH"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


def test_case_4186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4187():
    str_0 = "Y'\"+Hl}L0S@/awQjtkh"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = -1110
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    object_0 = module_1.object()
    str_0 = "zcP# {}|j<yoJi3C]Gg\x0b"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"2\xb6v8\xa5Q\xf4\xeb#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (tuple_0, bool_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    bytes_0 = b"\xb4\x84\x9d\x1a4I\x15\xfd\xa9\x8f\x0e"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bytes_0 = b"Rp\xc2\xa5\xa3\x8e\x88ka\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    str_0 = "?V_?P{)Ii)Z1y^bNf"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"\xa4\x93\xee\x058b\x86\xdb\xd0\xdfm\xb6l\x14\xe1\xe9\xee,\xe5"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    str_0 = ">$/:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bytes_0 = b"u"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    int_0 = -1448
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    complex_0 = -591 - 850.270517j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    int_0 = -778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    bytes_0 = b"k\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    int_0 = 2427
    module_0.get_new_command(int_0, int_0)


def test_case_4204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4205():
    str_0 = "LKl;)(L}Kk&(p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    str_0 = "Y#j|u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    str_0 = "Kax"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0, str_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bool_0 = True
    list_0 = []
    int_0 = 4088
    tuple_0 = (list_0, bool_0, int_0)
    tuple_1 = (bool_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    bool_0 = True
    complex_0 = -2139 + 223.1j
    dict_0 = {complex_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    str_0 = "35Q\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    list_0 = []
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    int_0 = 1886
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    float_0 = -1738.23
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    str_0 = "Qj9"
    module_0.match(str_0, str_0)


def test_case_4215():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b"\x920.\xaf\xce\x8e\x84\xda<\x81\xa3\xed\xf0(\xbaN7\xbcE\x03"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bytes_0 = b"\xb9+@ \xc6\x93\xd3\\u\xed5"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    int_0 = 4047
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    float_0 = 2627.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    float_0 = 3247.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    int_0 = 2145
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    int_0 = 1005
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    str_0 = "z+WjakQ("
    str_1 = "F>|"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    int_0 = 1076
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    float_0 = -3951.0
    module_0.get_new_command(float_0, float_0)


def test_case_4227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = 551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    bytes_0 = b"\x94\xc8\x93\xda"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4230():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4231():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    float_0 = 635.625524
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    bytes_0 = b"\x1f\x0e"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    dict_0 = {}
    int_0 = 784
    tuple_0 = (dict_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    bytes_0 = b"\xb7\xe1\xc6TK\xfe\xc8\x12Qo\xa0R=\xf6 \xcf\xf9\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    bytes_0 = b'*\x98M&"\x9d<\x1c\xa0\xe2\xc2F\xbd\xfegl\x9d'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    bytes_0 = b"\xa2\xa7r\x0e0\x9c1D\t\xd9\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    int_0 = -3231
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = 4318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    float_0 = -2385.40567
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    bytes_0 = b"\xff\x91K\x90\x04\xb4\\"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4244():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4245():
    int_0 = -224
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    complex_0 = -1594 + 1052.305j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    str_0 = 'l"*kiy4JbAQN3L\x0b,I<:'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    int_0 = 1454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    complex_0 = -1759.87973 - 6120j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bytes_0 = b"!EJG\xf6?0\x0e\xdc\xd2\xf7\x8c\xf6]=\xdc\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    bool_0 = True
    list_0 = []
    str_0 = "g"
    dict_0 = {str_0: list_0, str_0: bool_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = 796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    int_0 = -126
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = -1507
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4255():
    pass


def test_case_4256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = " \x0cWpta"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0, bool_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    str_0 = "dC'&Gb5hvN"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = "BSm*L`..'m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bytes_0 = b"\x96V:-n\xa5\x1b\xa1u\xd3\xd7\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "[Hq$\x0c<8w9$J?Lp=T~"
    tuple_1 = (tuple_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = 884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    bool_0 = True
    str_0 = "}SR\x0b1fYP1 xcFva"
    bytes_0 = b"\x03\xbf="
    tuple_0 = (bool_0, str_0, bytes_0)
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bytes_0 = b"\x00\xeb\xc1\xb8o\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    float_0 = -1705.0
    int_0 = -2038
    list_0 = [int_0, float_0, int_0]
    tuple_0 = (float_0, list_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    int_0 = 3383
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    str_0 = ""
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    int_0 = 2558
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = 1891
    tuple_0 = (int_0,)
    bool_0 = False
    tuple_1 = (tuple_0, tuple_0, bool_0)
    str_0 = "\r |mp=0P"
    module_0.get_new_command(tuple_1, str_0)


def test_case_4276():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4277():
    str_0 = ",8B8X2ty6X)Viw~6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    int_0 = 2889
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    bytes_0 = b"\xe0\x07\xf4 8\x8bR\x93\xfa\xe0e\xa2\xe8\xf7\xf9Y\xdc\xdd"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    complex_0 = 472.069 + 981.24861j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = "<QBvI ,8Po8h"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = 2091
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    float_0 = 61.769448
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = -3101
    module_0.get_new_command(int_0, int_0)


def test_case_4285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    float_0 = -375.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    int_0 = 2826
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    str_0 = "\x0cq!D6j6NBu nJ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    int_0 = 1485
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    str_0 = "|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bytes_0 = b"\x84\x14\xed\x19d\xd6]\xf1\xae\x0f\xbfWz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    complex_0 = -119.438 + 361.55j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bytes_0 = b"K\xf5D\xec\xb3\xb0A\x9e\xe7TP"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    str_0 = "6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    str_0 = "sp</3=~?hh_d.4MR\x0b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = "TgKY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    str_0 = "GH;AC#G,HS'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    bytes_0 = b"\x12\x19\xe8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    complex_0 = -1548.162 + 2886j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    complex_0 = -1266 + 2441.77j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    bytes_0 = b"-\x02"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
    module_0.match(dict_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    set_0 = {bool_0}
    tuple_2 = (tuple_1, set_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bool_0 = False
    bytes_0 = b".\r!\xc4N"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    int_0 = 1517
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    str_0 = 'g\x0bD8P"h@7q'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    str_0 = "`2-|ZWU^4*R'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    complex_0 = -1251.47 + 802j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    bool_0 = True
    float_0 = 1040.634
    tuple_0 = (bool_0, float_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_4313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4314():
    str_0 = "h=};H/-<One[F^=f"
    int_0 = -2039
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    bytes_0 = b"\x84\x9cJ\x1co\x18\xf9\xa2\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bytes_0 = b"\xa5\xe1\xd9\xfa\xa0<h\xcaI\x9c\xc1\xb7\xaa\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    bytes_0 = b"\xac>m8\xd3m\x1a-u"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4318():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4319():
    str_0 = 'CR"_3P1TmtZ9)W0Nu'
    int_0 = -2718
    dict_0 = {str_0: int_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bytes_0 = b"\xebE\x08\x13\xee\xc9}\xa6\x03\x96\x9d\r\xe5\x0f\x93U>["
    module_0.match(bytes_0, bytes_0)


def test_case_4321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4322():
    none_type_0 = None
    float_0 = -2319.4
    list_0 = [none_type_0, none_type_0, float_0, float_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    str_0 = "5~O2|&]\x0ci/56Lp0.%\x0b2W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    float_0 = 2475.7673
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    complex_0 = -4140.1 - 647.58659j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    str_0 = "Yhb\n.7JM)N8("
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    int_0 = -2143
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "oF\nb`xmsM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    int_0 = -3027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    int_0 = 324
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    bytes_0 = b"Bw\xc1W\xcb\x8c\xc5\x96\xd9\xc07k\x88\x04\x85\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    complex_0 = 1254.988 + 2336.775894j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    str_0 = "<Mx"
    tuple_0 = (dict_0, complex_0, str_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bytes_0 = b"\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    float_0 = 1247.299881
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4336():
    pass


def test_case_4337():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4338():
    int_0 = 2750
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bytes_0 = b"\x85\x94\xd9\xe5\xf4L[u\xbe("
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    list_0 = []
    dict_0 = {}
    tuple_0 = (list_0, list_0, dict_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    int_0 = -1446
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bytes_0 = b"\xd7\xe3R\xb9f\xc4\xda\xf5\x03\xa2\xcbX'\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bytes_0 = b"\xad\xdd\x19\xf6N\x05\xbc\x91\xcf-m)B\xa6\x1a*"
    str_0 = "]e7N.lZC%]5!*(%j/Q`F"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    int_0 = 1669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    int_0 = 2428
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    str_0 = "$$(g\r\n?r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "18qFk"
    str_1 = "`<"
    str_2 = "t\x0b]\nex@v>:5UZ"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: str_2, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    bytes_0 = b"\x03,\x8f2Q1:\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    complex_0 = 5302.4 - 401.8j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    str_0 = "POEMj3C\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    int_0 = -3941
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = 76
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    str_0 = "I|sHSs*UN^i-eJ~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    str_0 = "MW`p<F?z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    str_0 = "yM^,}1Ad7h\x0cb&LphI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    int_0 = -3661
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    int_0 = -5413
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    int_0 = 1180
    dict_0 = {int_0: int_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


def test_case_4362():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4363():
    str_0 = " %$FRWMC>q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    str_0 = ""
    str_1 = "j9{46\r7qK.aJh"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    str_0 = "g;n(H*RW!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    bytes_0 = b"L\x90\xbf\xc4/\x1b3J\xed\xb4\xd9\xabE\xeawT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = "e:k?U~'\"wu?{>u%D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bytes_0 = b'D\x13\x04\xde"#$\xbb\xb4|\xc5\xf5\xa8\x808w\xa1\xa43s'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    str_0 = "[B`uAw1+ tui["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    str_0 = "n;%VFq"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    int_0 = 270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    int_0 = 1147
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    int_0 = 3111
    module_0.get_new_command(int_0, int_0)


def test_case_4375():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4376():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    complex_0 = 1530.12451 + 515.50925j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "?M:pib`R.(tdw}1oX6;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bytes_0 = b"\xccmE!\xa3\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    dict_0 = {}
    bool_0 = True
    list_0 = [dict_0, dict_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    bytes_0 = b"\x87"
    module_0.match(bytes_0, bytes_0)


def test_case_4383():
    pass


def test_case_4384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4385():
    float_0 = -2680.352
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"\xbb{ \x06V@\x8c\x898"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    str_0 = "5GE4:OGLtg8:O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    object_0 = module_1.object()
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b"94\x19\xd8:\x9b\xce\x92\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    bytes_0 = b"\xafq\x9a\xbf|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    none_type_0 = None
    bool_0 = False
    complex_0 = 1060 - 2417.415931j
    tuple_0 = (bool_0, bool_0, complex_0)
    module_0.get_new_command(none_type_0, tuple_0)


def test_case_4394():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4395():
    str_0 = ',|"PnTz7Zt<o#U'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    bytes_0 = b"5\x01"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, list_0]
    dict_0 = {}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    bytes_0 = b"\x1e$\xa5&\xc6\xe4\x13\x9a}\xd9\x91@~w\xbc\xb3\x14\x19\xc6\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    str_0 = " B\ta'keuHQwsX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    bytes_0 = b"\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bytes_0 = b"%g"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    list_0 = []
    none_type_0 = None
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bytes_0 = b"\xf5\xb0 \xe4\x0c\xd8Z8]F\xe3\x9f\x08e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    none_type_0 = None
    str_0 = "L1v~\nHN'D}b"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    str_0 = "%0'1Sp1T"
    str_1 = "bsWGm@(JO$K>HlC5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: tuple_0,
        object_0: object_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    int_0 = 1358
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    float_0 = -2799.86
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bytes_0 = b"\xf9\xe7)\xce"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "vOPaT1KUSx&8"
    bool_0 = True
    tuple_0 = (dict_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bytes_0 = b"\xbc\xe7pci\xd2\xc9s\xd6q\xa0\xb9\x03\xf7\x15\xc9\xd2Ak"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    bytes_0 = b"\xae\xaa"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = "/Pn+iEoARIC+FceE_a5"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    bytes_0 = b"\xf9E\xdb@U\xf3dq+\xe3N`#\xfcIZ"
    tuple_0 = (dict_0, bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = False
    complex_0 = -1440.1692 - 159.07472j
    module_0.get_new_command(bool_0, complex_0)


def test_case_4414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4415():
    str_0 = 'PjW\x0bcl,Jn~D6^a`&d"##'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    float_0 = -229.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    int_0 = -3565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bool_0 = True
    str_0 = "PM`*m)_R-aq`"
    dict_0 = {bool_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    int_0 = -610
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    str_0 = "^R/:\rs<:D Q/$T8c,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    int_0 = -3120
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = " @m1[,^D.N=%&x"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    complex_0 = -131.2 + 1648.91j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    tuple_0 = ()
    str_0 = "V$8jTdj"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    int_0 = 5173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    int_0 = -1343
    str_0 = "Q@_"
    str_1 = "'i9J\nTJTzh\x0c/*AiY"
    dict_0 = {str_0: int_0, str_1: int_0, str_1: int_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_4433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bytes_0 = b"\xbce\x85\xf5G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    bytes_0 = b"\x9b\xf7\x9e\x7f\x81\x04"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4437():
    float_0 = -944.89718
    bool_0 = False
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, bool_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    bytes_0 = b"\xd0\xcc\x08m\x00\xf7\x8b\x95\r@S\x95\xf4YG\xf2\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    str_0 = "^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bool_0 = True
    bytes_0 = b"\xc0\xda\x7f/"
    bool_1 = True
    tuple_0 = (bool_0, bytes_0, bool_1)
    list_0 = [tuple_0, bool_0, bytes_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    bytes_0 = b"!\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    bytes_0 = b"\xcc\xab\xc8\xbd\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    str_0 = ";TR5%pw{@1by{87h9X\tl"
    module_0.match(str_0, str_0)


def test_case_4445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = "\r:|o7?2[Hy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    bytes_0 = b"#\x9b\xd2\x91/\x8c\x041\xc0\x00Y6\xf2CJ\xb2H"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    bytes_0 = b"-\x85\xc0\xa2Zk\x11?\x8c+\xa0\xa1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = 2263
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    int_0 = -1835
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    str_0 = "\nb 2b4'C]%&4{s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bytes_0 = b"\x1f\x01\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    int_0 = 2520
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    bytes_0 = b"\x9f@#\xb1\xb8R:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    bytes_0 = b"\xe1\xa5{\xb9/\xd0\xb0\x15x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    float_0 = 2812.31213
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    str_0 = "!XdP)V:(y7\x0cq"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = 44
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = "B+7k`*Cnc!\n^\x0b5#I"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    complex_0 = 101.2 + 5238.965797j
    int_0 = 1337
    dict_0 = {complex_0: int_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bytes_0 = b"\xe1\x99\xae2\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    int_0 = -1950
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    float_0 = -427.51
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    complex_0 = 2200 + 197.237466j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bytes_0 = b"N<\xfc\xf1\xc2\xe2d\xe7\x10\x8c\xdd\xfd\xb1\x0e)\xd6\x93\xd3"
    bytes_1 = b"Q\xad\xc0\x13m\xd8\xa1\xe5\x0e\xe1\xec\x96\xc1;"
    dict_0 = {bytes_1: bytes_0, bytes_0: bytes_1, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bytes_1, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"7\x17\xf1j\x9fM\x12\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    float_0 = -551.9
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    int_0 = 1829
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    int_0 = 3256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_1, bool_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    bool_0 = False
    float_0 = 1990.15568
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    bytes_0 = b"{\xb1\x88\x84\x8b\xcbz"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bytes_0 = b"\x81y\x01\x8d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4477():
    tuple_0 = ()
    str_0 = ",ZV0?9%TP!#qW1cU|yo"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = 2038
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = '&sjeM"'
    str_1 = "IHa_%5"
    bool_0 = False
    dict_0 = {str_0: str_1, str_0: str_0, bool_0: str_0}
    list_0 = [bool_0, bool_0, dict_0]
    bool_1 = False
    tuple_0 = (dict_0, list_0, bool_1, bool_1)
    list_1 = [tuple_0, list_0, tuple_0, bool_1]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    complex_0 = -1784.559 + 1715.203j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bytes_0 = b"\xaa\xd0\x95\x8bf\xcc\x1eL\x7fD\xfe\xae\x1a\x07\xcd2w\x8c\x86"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    int_0 = -2601
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    float_0 = -2023.7978
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    bytes_0 = b")\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    float_0 = 1511.326
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"\x11\xd6\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    int_0 = -3684
    str_0 = "UzoU0QUL{#\nA6Ym*"
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, str_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = -138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    float_0 = -5185.979564
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"I\x87\xd1,\xf7\xe0\x85\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = -1256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    bytes_0 = b"kX?\xdds\x85e\xefD\xf3\xc8\xe8\x17 \x87\x14\x17\xfd$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    str_0 = "*Q~HMx@w7'4"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    bytes_0 = b"Q)\x9e\x9a\xf6\x0bmq\x9a\r\x8b'\x9f\xcdl%\n\xbc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    complex_0 = -1254 + 4367.113j
    float_0 = 4068.0
    module_0.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b"b\x91\\u\xbf~o@\xd1\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    complex_0 = 6027.051 + 815.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"\xb5\x12\xbb\xf2\x91\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    str_0 = "R\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    str_0 = "iyxAfqGeRM&RbUD{x2A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    int_0 = -2752
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "#}[|Ju"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    str_0 = "?!#<bI 0X"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    float_0 = -1226.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = ">\nd=fWnG3nf6zpfK"
    str_1 = ",cH7l 'I"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    none_type_0 = None
    str_0 = "CK:z\\_]\x0b=Vt\x0c"
    module_0.match(none_type_0, str_0)


def test_case_4509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4510():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    float_0 = 2146.9705
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bytes_0 = b"\x92k\x18\xcc\t\x08\x84\xae\x0fg1\x0b\x97\xf3#H\xc1\x95\x07l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    int_0 = 1329
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bool_0 = True
    complex_0 = -1368.4197 + 2722.908j
    module_0.get_new_command(bool_0, complex_0)


def test_case_4516():
    pass


def test_case_4517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4518():
    str_0 = "~_%xo"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    int_0 = 1490
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    int_0 = 364
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    int_0 = 113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    str_0 = "{&SA2b0(y"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    str_0 = "\tA4[PFfy>?H1F,.|)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b"\xf8\x0b\xf1\xc8,\x94\xc8\x95\x80\xa3\xd4-d\x8e\xbd\xf7\xcb"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    bytes_0 = b"k\xdfr}1x\xd4\xbb"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "3[~(]"
    list_0 = [dict_0, str_0, bool_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = "}\t][=VE[h/=D"
    tuple_0 = (str_0, str_0)
    dict_0 = {}
    bytes_0 = b'"\xf0H\xb6\xba\xe3O\x85\x95\xe4\x84n'
    tuple_1 = (tuple_0, dict_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "eii1JiW<Gi{[t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    dict_0 = {}
    str_0 = "6QDro .e\t s"
    tuple_0 = (dict_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    int_0 = 2588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    int_0 = -2782
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    bool_0 = True
    bytes_0 = b"\xc9\xc3\xfc']^\x04\xe2\xb93E\xa6\xa6\x0cf\xae\xf7"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    bytes_0 = b"\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    none_type_0 = None
    str_0 = "iC\x0cKt~.\tND)`Z_"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    bytes_0 = b"\xab[\xcf\xac\x937An\xef\xb1\xa1\\\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    list_1 = [dict_0, list_0, list_0, bool_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = -647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "~\x0b`y|N"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    int_0 = -2334
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    float_0 = 733.85
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    float_0 = -208.3425
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b"q\xffZ0\xfc\x99\nu"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, dict_0, dict_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    int_0 = -426
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    str_0 = "O-7}O[Q:&E`#_ygX1\nu"
    list_0 = [str_0, str_0, str_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    float_0 = 4001.0
    complex_0 = -3153 - 882.7j
    tuple_0 = (float_0, complex_0, float_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    list_0 = []
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    float_0 = 1057.245
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    complex_0 = 256.13 - 423.93j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    int_0 = -1128
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    str_0 = "j9mbJgZ_<_OLbrg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bytes_0 = b"II\x1d<\x84\x1b\x9e\xaf\x92TX\xbdY"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    float_0 = -2778.658973
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    int_0 = -169
    module_0.match(int_0, int_0)


def test_case_4559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4560():
    complex_0 = 2032.931 + 2349j
    list_0 = [complex_0]
    str_0 = "CgqUaw.j\tQ-Lq4Vn"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    bytes_0 = b"c*\xfa\xa9F\xd0'\x9e\x91\xee\xba\xc6\x9b\xc9R\x98\xe4}\x9cd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    int_0 = 42
    module_0.get_new_command(int_0, int_0)


def test_case_4564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = "w8(re;? -k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    str_0 = "7 Z\x0c}cgJR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    int_0 = -949
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    str_0 = 'a\tU+zQI$"c\x0c9\x0c"'
    int_0 = 995
    tuple_0 = (str_0, int_0)
    list_0 = [tuple_0, int_0]
    bytes_0 = b"\xdc:\n\xff,\xd9!\x0b \x05TL]\xa7\xb2"
    tuple_1 = (list_0, str_0, int_0, bytes_0)
    module_0.get_new_command(tuple_1, bytes_0)


def test_case_4570():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b";.$\x1f\xfa\x10\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    int_0 = -955
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    str_0 = "h#}fN5KMob\x0c]\\A1*m8\\"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    complex_0 = -1260.228727 - 1211.7j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4576():
    float_0 = 2745.9753
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    str_0 = "|A0q|}Eod\x0bb<cckG9\nmi"
    none_type_0 = None
    str_1 = "l(3#4z!Uj[4Fr"
    str_2 = "``)VZgel8ZGd{S5M<LMQ"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    float_0 = -1932.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\x80\xa0\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    tuple_0 = ()
    bytes_0 = b"\xdf\xcaH\x7fsb\xb8"
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    str_0 = "H\nIH,:CbZ/NV/P\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    str_0 = "3"
    float_0 = 796.03885
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    tuple_0 = ()
    str_0 = "\r4[u!ig$pJ\r"
    dict_0 = {tuple_0: tuple_0, tuple_0: str_0}
    float_0 = -643.5694
    bool_0 = True
    bytes_0 = b";Vt\xf2)"
    tuple_1 = (dict_0, float_0, bool_0, bytes_0)
    list_0 = [tuple_1, dict_0, tuple_1]
    bool_1 = False
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    str_0 = "+n6|>37"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bool_0 = True
    int_0 = 1631
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    float_0 = -994.52897
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    str_0 = "0v"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"x\x9c\xb98\x9e\x8a\xe1N\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    str_0 = "u@X~s9DU"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    dict_0 = {tuple_1: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    float_0 = -2623.22132
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    int_0 = -1027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = "m%Fmpa"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4595():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4596():
    str_0 = "-\tfqv;V2T;@cS\x0bY,K:N{"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    bool_0 = False
    bytes_0 = b"\x96i\xcc\x1b\xd3\xf2\x90X+"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    list_0 = [tuple_1, tuple_1, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    str_0 = "*[6kGqO~)ArhuKvO!r9v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    int_0 = 672
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    int_0 = -88
    bool_0 = False
    tuple_0 = (int_0, bool_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    int_0 = -1046
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = 3228
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    str_0 = ")7`;v<La@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = 952
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    float_0 = -901.306
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    bytes_0 = b"\xc1\x11\xb4\x14\x98\xafP\x9d\xff\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    bytes_0 = b"\x07"
    set_0 = {bytes_0, bytes_0, bytes_0}
    int_0 = -2358
    tuple_0 = (bytes_0, set_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bytes_0 = b"\x08D\x12\xbf\xfc`\xc1\xd6\x05{\x12\x12\x118\xe4\xfa\xdf\xfd\x81\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    int_0 = 1700
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    bytes_0 = b"\x98I'\xf7\xfa\x18`\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    complex_0 = 1417.76 + 638.67994j
    list_0 = [complex_0, complex_0]
    complex_1 = -3622.73151 + 4081.872376j
    module_0.match(list_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    str_0 = "Uf5_v?}V/(,V'#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, tuple_0, tuple_0)
    set_0 = set()
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    float_0 = -2482.59
    module_0.get_new_command(float_0, float_0)


def test_case_4617():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4618():
    str_0 = "D[dAI5Kz2JyX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bytes_0 = b"\x8e\xaa\xd8n\xc4U\xf8\xd1\xa5\xd6\x17(\x7f*s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    str_0 = "\t[`/v]L4y$;8K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = "k/B)cN9@hxY><*^E@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    bytes_0 = b"\x97Qo>-9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    int_0 = 3317
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bytes_0 = b"\xbd\x80u\x8d\x07\xf0E9nJ\xa7\xabV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    str_0 = "8EQf h`\ro4\\JQEgd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    bytes_0 = b"d"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    str_0 = "+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    none_type_0 = None
    str_0 = "NX2*R\x0b/;7mlk"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    float_0 = 681.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    float_0 = -568.98427
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    int_0 = 1170
    int_1 = 3123
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -1048
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    int_0 = 1028
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    complex_0 = -1320.586465 - 1848.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bytes_0 = b"L\x8a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bool_0 = True
    float_0 = 1222.356091
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    bytes_0 = b"\xbc8\xe9\xb5\xcc\xe9c\x8c\xca\xc7\x06O"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    complex_0 = -3357.7797 - 2033.564312j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    bytes_0 = b"\xbe\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    int_0 = -3086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    complex_0 = 2193.008 - 111.04j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    complex_0 = 2786 + 1496.63255j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    float_0 = 856.7536
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    str_0 = "/3;O<l\x0ca5,h#'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    float_0 = 120.17
    bool_0 = True
    module_0.match(float_0, bool_0)


def test_case_4651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4652():
    int_0 = 2619
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    str_0 = "d]4nS}Eu8 7Z`^!z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bytes_0 = b"l\xe3\xb2\xc7\xd2\xbe\x8f\xe9z\xe4\xf6\xcf}\x97\x98\xa5\xdc "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bool_0 = True
    float_0 = 713.4
    dict_0 = {bool_0: bool_0, bool_0: float_0, float_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    int_0 = -4143
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4658():
    complex_0 = -921.97 - 831.6863j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    int_0 = 1508
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    int_0 = -3260
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bool_0 = False
    complex_0 = -1394.1 + 1986.88264j
    module_0.match(complex_0, bool_0)


def test_case_4663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4664():
    int_0 = 805
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [bool_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    float_0 = 565.476
    list_0 = [float_0]
    tuple_0 = (float_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    float_0 = -1512.961
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    float_0 = 261.620084
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"\x81\xd9\x0c\xfc_\xa7+x9(\x1f\xe6*"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    bytes_0 = b"\xc0\x98\xde\x1bf\xe0\xefdz\x11\\\x83P\xfcj\x1c\xb0\x9c\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4673():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4674():
    bytes_0 = b"\x82\x9d\xfa:\x94\x95/0\xf1{\xb9\xce\x99C "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    str_0 = 'NT=U"\x0cwe\x0b;Q'
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    float_0 = -948.2481
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    int_0 = -3310
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    str_0 = 'X!]M"ueVKP'
    bool_0 = True
    set_0 = {str_0, bool_0}
    tuple_0 = (bool_0, str_0, set_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    int_0 = -2025
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    float_0 = -725.7838
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = -351
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = "v3rg<"
    int_0 = 1889
    bool_0 = False
    tuple_0 = (str_0, int_0, str_0, bool_0)
    bool_1 = False
    float_0 = -356.1877
    bool_2 = True
    tuple_1 = (bool_1, str_0, float_0, bool_2)
    module_0.get_new_command(tuple_0, tuple_1)


def test_case_4684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bytes_0 = b"\xe8\xddK\x83f\xf0\x0c<Y\xa0b,:_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "NP:rk@0"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    int_0 = 2442
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    float_0 = -1216.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    bytes_0 = b"~\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    complex_0 = 1140.071 - 1142.791569j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    str_0 = "HbnHL)Kp62N- Gs"
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = []
    bool_1 = False
    tuple_1 = (set_0, tuple_0, list_0, bool_1)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bool_0 = True
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    float_0 = -2567.50419
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    int_0 = 735
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, list_0, tuple_0]
    list_2 = [list_1]
    module_0.match(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    float_0 = 1635.73
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    int_0 = -3498
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    int_0 = -81
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    float_0 = 4494.862
    tuple_0 = ()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    str_0 = "zo</\ny@*"
    module_0.match(str_0, str_0)


def test_case_4701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4702():
    bool_0 = True
    dict_0 = {}
    list_0 = [bool_0, dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4703():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4704():
    str_0 = "\t:Rjnh8a7\\x$x&1&Ol"
    str_1 = 'X^YY {n"~^'
    str_2 = " Qj"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    str_0 = "AkP52a<ocd&&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    object_0 = module_1.object()
    bytes_0 = b"d"
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bytes_0 = b'\xc46\xed"5?\xc2\xd3m\xc7\xe0\xa0\xef^5'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    int_0 = -3988
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    float_0 = -438.757257
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    float_0 = -2373.732705
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    bytes_0 = b"\xb5\x0e\xd8\x11M.\xe52"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    int_0 = 432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = 344
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    str_0 = "5:.:O[:cFi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "6e!K2z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"pM[,\xe8Y\xbd\x1a\x8a0\x7f\xfd6\xce\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    str_0 = ">pBZ#RY><"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = -567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    bytes_0 = b"\x9b\xb8\xb9|\xcfV\xbf\xff\xbaHV\x8e,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    str_0 = '>"*!gs7'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = "kf/8'fvn"
    int_0 = -567
    tuple_0 = (object_0, list_0, str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4724():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4725():
    int_0 = -3833
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    str_0 = "E\x0cD@&"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    complex_0 = 1098.426 + 886.74j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    str_0 = "H}\x0cxR"
    module_0.get_new_command(str_0, str_0)


def test_case_4729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bytes_0 = b"\t\xd3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    str_0 = ""
    complex_0 = -3586.483239 + 1798.71j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    none_type_0 = None
    str_0 = ".QVeH$qy\r3&Vcc"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    int_0 = 2491
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = '\r8Wswag9ldc.B"(i K<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    int_0 = 3625
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b"\x1df\xe6m*\xd1\x9f\xa1[\x89=\xd7M"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    complex_0 = -1688.147826 + 21.726j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4739():
    bool_0 = False
    set_0 = set()
    bytes_0 = b"\xbf\xc1\\\xd7\xc1\xb7\x82]<\xf5\xbd\x9c\x0cI_"
    complex_0 = 757.561 - 3075.9388j
    tuple_0 = (bytes_0, complex_0)
    tuple_1 = (bool_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    complex_0 = -1204 - 1331.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bool_0 = True
    float_0 = -5493.420309
    set_0 = {bool_0, float_0}
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    float_0 = 8.886927
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = -2595
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    int_0 = -857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    str_0 = "Ac!qa#g9_\t,u*HQ=x"
    str_1 = "omC4\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_4746():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4747():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    float_0 = 1331.218
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bytes_0 = b"(G\x1a\xad\x0b\xf3G\xf3\xd8\xcf2<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"'\xbe\xa9O\x02\x15\xa8\x1b(\x7f\xcc\x06u\xc1\xc8\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    bytes_0 = b"+qP\x8fJ\x84\xb8{C"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    bytes_0 = b"d\xca\xa6\x04\xb2\xb5\x1d\xed\xf4\x17\xe8`\xf0i"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bytes_0 = b"8F\x96\x90@"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = -581
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = 1817
    module_0.match(int_0, int_0)


def test_case_4758():
    pass


def test_case_4759():
    pass


def test_case_4760():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"-\xab\xfb\x1aSTK6\xab\x15\x1f(s\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    int_0 = 1900
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    float_0 = -1417.52445
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    set_0 = set()
    float_0 = -2227.194
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    str_0 = "Jhu't3?x"
    module_0.match(str_0, str_0)


def test_case_4766():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4767():
    str_0 = "dC,(}`|aORTs]>ji"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    int_0 = 2246
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    str_0 = ""
    float_0 = 526.633957
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    tuple_0 = ()
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    bytes_0 = b"9\x8f\xc3B\xdb\xa7\xb1\x8d\x1d\x12\x1bN\xb0\x19a\x9c\xb2\x07f"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bytes_0 = b"\xec\x17\x92\xfan~\xf6@6\xaa\x8c\xe5\x92\t\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bytes_0 = b"OE\xdb\xa9SW\xbeU\x9f\xd9\xf3\xd9"
    set_0 = set()
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"M\x17\xccl|\xf0\x84\xd9\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    float_0 = 909.96912
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = -2059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bytes_0 = b"\xe4\xc8$\x02\xc1\xe0\\e\xdf\xc7;\xef\xbfz\x82=\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    str_0 = "-\\!\ni5w$\x0bDsla,8#\x0c#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    int_0 = 1916
    dict_0 = {int_0: int_0}
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    int_0 = 245
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bool_0 = False
    bytes_0 = b"\xa2\xb7\xee\xab\x16\xf2\xf9"
    tuple_0 = (bool_0, bytes_0)
    set_0 = {tuple_0}
    list_0 = [set_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    int_0 = -1596
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bytes_0 = b"\x96"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    int_0 = 1674
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    none_type_0 = None
    int_0 = 3312
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    complex_0 = -1846.898 + 572.890694j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    str_0 = "fX\\BT];M3\t)"
    int_0 = 2898
    tuple_0 = (str_0, int_0, int_0)
    dict_0 = {tuple_0: str_0, str_0: int_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


def test_case_4791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4792():
    object_0 = module_1.object()
    module_1.object(**object_0)


def test_case_4793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4794():
    int_0 = 1080
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "E,O]X="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    str_0 = '4vKX$";v-9m'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = -2441
    dict_0 = {int_0: int_0, int_0: int_0}
    int_1 = 946
    module_0.get_new_command(dict_0, int_1)


def test_case_4799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4800():
    str_0 = "M_?0jR_Hv@?Zb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    int_0 = 1070
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    str_0 = "o:HHs2n;?ttjz\\\t."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = 4465
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 1583
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bytes_0 = b"\xbd\x15r"
    int_0 = -2178
    module_0.match(bytes_0, int_0)


def test_case_4806():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4807():
    complex_0 = -1351.6582 - 1490.58j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    int_0 = 3171
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    str_0 = "[=Ty`J b]In\tk\\mgh"
    none_type_0 = None
    str_1 = ">,wKv\\k([x%,9m7AQ"
    str_2 = "!lyCijU~h<9"
    str_3 = "@_LGQrJ^{{6t~X"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    str_0 = "jCF=jtXx25QTk@L`BcD"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    float_0 = 544.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    int_0 = 1602
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bytes_0 = b"%\x1eq:\x08B3\x02,\xda\xb0\xf2n\x95\xe3\x88\xc8\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bytes_0 = b"\x95K"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bytes_0 = b"\xe9\xf4\xd2 ,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (object_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bytes_0 = b"\xf7"
    list_0 = [bytes_0, bytes_0]
    list_1 = [bytes_0, bytes_0, bytes_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "le"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    str_0 = '4JK=mD"28lxVy6Sni*'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    float_0 = 2257.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    complex_0 = -2003.715823 + 186.087047j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    float_0 = -1910.0
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bytes_0 = b"\xeb\xb6w\xb4\x84"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    bytes_0 = b"l$\xfb/mA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    int_0 = 3211
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = 1638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    int_0 = -243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = 1394
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    str_0 = "u"
    int_0 = -802
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    str_0 = "RBLy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    str_0 = "yYH(#c@\tR$$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    float_0 = 1095.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bytes_0 = b"\\\xec\x035\x08\x1e\xd3#\xfe\x82h%w\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    none_type_0 = None
    str_0 = "ZOH<\t*\rU0n"
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    str_0 = "fwg/1a`]0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    bytes_0 = b"\xe4\xc3\x8ag"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bytes_0 = b"\x1d\xaf?p\xb5j\xb9%\xc6\xa1\x13"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    bytes_0 = b"h0\x84\x9e\xd7[6\xc2\r)\xf7\xfa\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = -1522
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    float_0 = -1504.661
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    int_0 = 1659
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    str_0 = "!P\naK-|c\\l9'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bytes_0 = b"\x02\xf0\xed\x8bd\xe0\xb9\x03\xc7\xaf\x93"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    str_0 = ".+o1\tXD[Cr*\nh4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    int_0 = -519
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    int_0 = -1154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bytes_0 = b"5\x1c\xa2Z\x9bj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    str_0 = "VC{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    str_0 = "GC{w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bytes_0 = b"\xf24"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    int_0 = 2143
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    float_0 = 2973.399734
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    bytes_0 = b"\xd5\x9cCg7\x8c\xe3\xef\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = 382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    str_0 = "IS0$Ejy%`"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    str_0 = "Rr\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    float_0 = -1383.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4867():
    str_0 = "/q+qit!+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    str_0 = "?Wm4D3}>RaRp!c:iUv_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    int_0 = -1369
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    str_0 = "h'P!` r["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    bytes_0 = b"9\x98#\xb4\xa6Tx\xb8"
    module_0.match(dict_0, bytes_0)


def test_case_4872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4873():
    bytes_0 = b"\x8b\x06\xd9u\xf5\xef\x95\x9c\xcb-\xb0\xbfm\t\xbb\r\xb9"
    set_0 = {bytes_0}
    bytes_1 = b'\xe3(X|\xdc,1@\xcde\x1a\t\x94\x13"\x1doa\xe6'
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = 2770
    int_1 = -1524
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    str_0 = "DE\\U|X_$nO+EnmXA]t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    bytes_0 = b"\x16\x19q)\xf7\x91\xf3\x84\xa1\x8d\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    str_0 = "|%(#\n/]I:jTeo=HoEM|m"
    module_0.match(str_0, str_0)


def test_case_4879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4880():
    int_0 = -1375
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = 1895
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


def test_case_4882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    complex_0 = -1240.9 - 2293j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    float_0 = 1449.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = "5%<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    float_0 = 3936.0
    module_0.get_new_command(float_0, float_0)


def test_case_4890():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4891():
    str_0 = "8+fS5h]W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    bytes_0 = b"\xe2\xda\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    str_0 = "Ab\rxE\x0c\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    complex_0 = -4039 + 2398j
    list_0 = [dict_0, complex_0, str_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    str_0 = "NB,3/0"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    str_0 = 'Vt\x0bcL\re"'
    str_1 = "pS&PNf[F"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bytes_0 = b"\x0e\xd8l\xa5\xc5s\x95|2L\x06\x99Y\xb8"
    bytes_1 = b'I\x80"F\xc7&I6\xe4\xbbD\xcf'
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    bytes_0 = b"\x06n}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    float_0 = -360.94839
    str_0 = "NniG EP]3\x0b"
    bool_0 = True
    tuple_0 = (float_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = "ux{"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = "J`C~WCF("
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4901():
    pass


def test_case_4902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4903():
    none_type_0 = None
    str_0 = "oWMIP?wykdi%-tM"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    str_0 = "L&5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    dict_0 = {}
    tuple_1 = (tuple_0, dict_0, dict_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    float_0 = -2148.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    str_0 = "f$]PpG.!/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    str_0 = "V\\y'{>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    complex_0 = 5496.255 - 2003.186584j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    str_0 = "m?; "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    bytes_0 = b"\x86"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = -2528
    tuple_0 = (dict_0, int_0, bytes_0, int_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    int_0 = 72
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bytes_0 = b"_\x1fv\xe4d7"
    module_0.match(bytes_0, bytes_0)


def test_case_4914():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4915():
    bool_0 = True
    int_0 = 3712
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    str_0 = "pX|r?8:p,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    str_0 = "vz,D.D%.6-\tBM=9Qn8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    str_0 = "Jcg.osiFF\\V66\x0cNi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    complex_0 = -1270.33 - 313.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    bytes_0 = b"\xa9\x1d\xaf\xc0;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = -1994
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    bytes_0 = b"z\xf8\xfd\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bytes_0 = b"w[\x01\xf6\xd4\xc4T\x18\xae\xf72\t_0\x93.\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    none_type_0 = None
    int_0 = 3001
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    int_0 = 3371
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = 1858
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    int_0 = 387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    none_type_0 = None
    bytes_0 = b"\xf4\xda\xb3\xef\x9f\xa9"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    complex_0 = 1387.458 + 1637.65j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    float_0 = -3206.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bytes_0 = b"j(\xd2\x9f\x9f"
    bool_0 = True
    bool_1 = True
    tuple_0 = (bytes_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    dict_0 = {}
    int_0 = 366
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_4937():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4938():
    float_0 = -651.07143
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    float_0 = -330.562
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    tuple_0 = ()
    set_0 = set()
    tuple_1 = (set_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_1]
    int_0 = -584
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    str_0 = "^.T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    str_0 = "sQHr>'l1p-;NrXzk\"9l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"8\x13\x1c\xc8{\xe9\xe9\xc2\x16 q\xcc)\x19\xf7!+)&]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    int_0 = 2671
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    float_0 = -1096.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    str_0 = "/iN.; "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    str_0 = 'H2/`}/&7",WN7'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    bytes_0 = b"A\xb1\x93(\x0b\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    complex_0 = 641 + 2446.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    list_0 = [dict_0, object_0, dict_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = '*\t#%".qvb\x0c#R0'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bytes_0 = b"\x94\xa2:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    str_0 = "Eo@$+V\x0b3)x.D'YM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    bytes_0 = b"p`A\xceL\x1d\x18\x8d\x0erR]"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    str_0 = "74:*\r H\x0bL^H9S;oEp-\x0b,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    str_0 = ".&)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    bytes_0 = b"\x15\xa9ole\xb9-\x86.zgy"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bool_0 = True
    float_0 = -2221.9
    module_0.get_new_command(bool_0, float_0)


def test_case_4962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4963():
    float_0 = 1729.91
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    float_0 = -1189.68
    module_0.match(float_0, float_0)


def test_case_4965():
    pass


def test_case_4966():
    pass


def test_case_4967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4968():
    float_0 = -22.85912
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    str_0 = "20bM\\Sy{"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    float_0 = 2331.12
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    int_0 = 1779
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_4974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4975():
    int_0 = 5326
    float_0 = -628.0
    tuple_0 = (float_0,)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, tuple_0: tuple_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    int_0 = 675
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    complex_0 = 1729.6 + 51.4634j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    complex_0 = 851.77 + 1011.450744j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4979():
    pass


def test_case_4980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4981():
    complex_0 = -1909.39461 - 1373.942017j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    complex_0 = -720 + 1056.1661j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"\xcd4\xbb4\xd67'>`\x1d\x8d\xce\x87C=\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    object_0 = module_1.object()
    set_0 = {object_0}
    list_0 = [set_0]
    tuple_0 = (list_0, object_0, set_0, object_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4986():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bytes_0 = b"\xcbG\xd8\x94\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    bytes_0 = b"\x00\xe350k<#\xed\x9f\xce\x02\xa1\x15g\x8f\xe5"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    int_0 = 19
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bool_0 = False
    object_0 = module_1.object()
    set_0 = {object_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    int_0 = 2308
    int_1 = -1735
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    float_0 = 686.372
    int_0 = -2447
    set_0 = {float_0, float_0, int_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bytes_0 = b"\x10\xf5'\xa0\x13\x0cE\xf1'`"
    module_0.match(bytes_0, bytes_0)


def test_case_4996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4997():
    bytes_0 = b"u\xb8\xd6\xa3\x8c\x9e*A\x85\xe1\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bytes_0 = b"\xc1\x81i?\x8aT\x94t\xa3;B\x06\x02"
    module_0.match(bytes_0, bytes_0)


def test_case_4999():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bytes_0 = b"\x17\x8f\xef"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5002():
    int_0 = 1078
    str_0 = "X9#Zhrpqwe"
    tuple_0 = (int_0, int_0, str_0)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    str_0 = 'ivT\rk+PWDHJW"brk:HG7'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    complex_0 = -433.7 + 2211.845598j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b"\xe5\xf8\xcelE\xf5\xe1\xc4f\xbf[~\x8dB"
    float_0 = -1380.8007
    list_0 = [bytes_0, bytes_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = -3067
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bytes_0 = b"=\x99\xee\xe6\xf8\xce\x1a\x0e\xd4\x82\xf0&z\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    bytes_0 = b"UU\xb7\xa0\x0f<\xa4\xb7\xddJ\xdfst\xcc\xf28\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    float_0 = -1181.750672
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    bytes_0 = b"Z\x8d\x90\xc9\xb6\th"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    float_0 = -2838.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    int_0 = 3594
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    str_0 = "te"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    int_0 = -41
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    str_0 = "d80gi(Z{X^%A7j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    int_0 = -4628
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    str_0 = "o"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    float_0 = -1979.574
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = -2751
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, int_0, tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "fu5--+<"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bytes_0 = b"\x1eLB\x1a\xb1\xc8\x85\xf9\x90ev\xe578"
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    float_0 = 4069.04
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    str_0 = "\t{|\n*D%V2\t#z;3("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    bytes_0 = b"s!\xbc\x12\xf3\xf6\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    str_0 = "\x0c(alPt$t$`\t].aC\x0cU`}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    str_0 = '4W!8,J3454j"83*eY\tR'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    int_0 = -1499
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = -790
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    str_0 = "SYZAsZ(N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    int_0 = -1950
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    complex_0 = -1740.64967 - 899.2692j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = 794
    bytes_0 = b"d\x1eA\xbc\xad\xc4\xde\xbbb\xca"
    str_0 = "7w8hv\tzahC"
    list_0 = [int_0, int_0, bytes_0, str_0]
    bool_0 = False
    tuple_0 = (str_0, int_0, bool_0)
    tuple_1 = (int_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = -230
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = 489
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bytes_0 = b"I\xb1\x17`#\x9f\x05\x89\xbbK\x14\x81Wk"
    set_0 = {bytes_0, bytes_0, bytes_0}
    float_0 = 2983.14
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    str_0 = "2{6\x0c5%\r_&BV "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bytes_0 = b"\x06\xef\xf1u\x9e\xe8WT\xd9A\xd9R\x1a\x9c\x87;\xb2"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_5043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5044():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    int_0 = 763
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    str_0 = "j-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    bytes_0 = b"\xb9\x90b\x1a\xe9\x1c.\xc2\x19\xe4\xe8\x81|E"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(none_type_0, object_0)


def test_case_5049():
    pass


def test_case_5050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5051():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    set_0 = {bool_0, bool_1, bool_2}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    int_0 = 1070
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    int_0 = -1921
    module_0.get_new_command(int_0, int_0)


def test_case_5055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b"\xcb\xca\xa6"
    list_0 = [bytes_0, bytes_0]
    int_0 = 637
    list_1 = [list_0, list_0, list_0, int_0]
    tuple_0 = (int_0, int_0, list_1)
    tuple_1 = (tuple_0,)
    tuple_2 = (list_0, tuple_1)
    module_0.get_new_command(tuple_2, bytes_0)


def test_case_5057():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5058():
    bytes_0 = b"\xb0\x13*\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"\x9e\x03\xa4\xbdH\x1b\x00\x1bD\xde\xa1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    str_0 = "ncDX"
    module_0.match(str_0, str_0)


def test_case_5061():
    pass


def test_case_5062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_5065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bytes_0 = b"\xbb(\xe7\xedC\x83\xe4\x1d\xfbF\x89\xd0\xf9\x04\xea\xaeH\xa1\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5068():
    complex_0 = 102.54 - 1629.03833j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    bytes_0 = b"\x97\xb2\xeb]\x1d\x9d\xdec\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    int_0 = -1037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    int_0 = 1104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    complex_0 = -3123.5 + 2412.49j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bytes_0 = b"\n\x0b\x1d\xfd\xf6\xe8\x8d\x96B8O\x80"
    str_0 = " :X-X/q?6Fb3v<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    bytes_0 = b"\x99\x1d\xf0\xe2\x19\xda\xab\xdaQb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "H}<pbi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bool_0 = False
    bytes_0 = b"<g\x9d\xba~\x19\xa1n\x97\xa1\xdf\xd5"
    list_0 = [bool_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5077():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5078():
    int_0 = 2754
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    int_0 = -276
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    float_0 = -2004.8618
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    float_0 = 1596.26
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    bytes_0 = b"\xe3\x00\xa0\x06\xca\x16\xe4$q\xbb\x9d\xeeD\xcd\x91\x1bs\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    int_0 = 1065
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    complex_0 = 481.869 + 1282.412j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bytes_0 = b"\x04\xb28\\\xf0\x0e\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    none_type_0 = None
    bytes_0 = b"#\x19\xbb\t(,h\x83\x81\xf0\xb6\xa4\xa1\x19\x93\x8e|"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    str_0 = ".=3b9=VsX"
    int_0 = -3857
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    str_0 = "nS1ZDLdR\ns5W0'K|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    bytes_0 = b"q\xbe\xf2\xa0\xb8\r\xdc\xf8J/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"\xc5\xe1Fc(\xcdJ\xcbbM"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b"\xaa\x88\xc6\xd0\x12\x1f\xf3M= \xaa\xac\x96?"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_5094():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5095():
    complex_0 = 1997.05 - 3469.8727j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    float_0 = -4570.08
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    int_0 = -130
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = 785
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    str_0 = "r\r4I(;6?ISjwNq'M6"
    module_0.match(str_0, str_0)


def test_case_5100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5101():
    int_0 = 1934
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bytes_0 = b">\xae%L\x07\x9e\xe4Op"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bytes_0 = b"\xa0\xacj\x8a\xbfa\xf2\x9f\xef\x93 \xfc\xdd\x8b.\xac\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    str_0 = "ZV"
    module_0.match(str_0, str_0)


def test_case_5105():
    pass


def test_case_5106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5107():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    bool_0 = False
    bool_1 = False
    str_0 = "zJa"
    tuple_0 = (bool_0, bool_1, str_0, bool_1)
    int_0 = 1114
    tuple_1 = (tuple_0, int_0, str_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = 625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    int_0 = -143
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    int_0 = 1730
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    int_0 = -1890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bytes_0 = b"\xa5\x1c\nW\x03(.\x81\xd6\x9a1\xd6\x1b\x84\xa1\xaf\x04\xc3\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    str_0 = "gpo)%AaX|7L9WO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    bytes_0 = b"\x1c\xb1\x83\x19\x0f\xd9&>\xf7#\x19\xc3\xd5*m\xf9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bytes_0 = b'\xdb\xb6\x9a"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = ">"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    str_0 = "!s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    float_0 = -1566.271
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = "~tAA=b]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, object_0)


def test_case_5128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5129():
    str_0 = "h*`sx'KA^\\y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = 328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bytes_0 = b"\x19\xca\xaa\xfc\xd7\x1d\x87*\xadg\xd7J\xd9\xf1\x91gN\xb5\x90"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    none_type_0 = None
    int_0 = -4066
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    bytes_0 = b"v0w\xda"
    set_0 = {bytes_0}
    str_0 = "01)?mddIs@"
    list_0 = [str_0, set_0]
    module_1.object(*list_0)


def test_case_5135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5136():
    float_0 = 1824.397129
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    bool_0 = True
    int_0 = -996
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    int_0 = -1106
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    str_0 = "J\ri<r_nD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    int_0 = -1946
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    str_0 = "Z~?1InLjI\n~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    int_0 = 4505
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    str_0 = "N!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = "mZ<cu;g\r%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = 936
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    int_0 = -4683
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    int_0 = -572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    bytes_0 = b"\xc9\xcc`\xe7f\x86\x82\xcb\xe7\xa8B.5u\xfa..\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "m+\\7l@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    str_0 = "%,v>6BY0;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    str_0 = "}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    complex_0 = 1486.305 - 11.682054j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    float_0 = 410.4
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    str_0 = "uBFd1\x0cSwo8-?i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    str_0 = "ET:>Hv5["
    module_0.match(str_0, str_0)


def test_case_5157():
    pass


def test_case_5158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5159():
    none_type_0 = None
    str_0 = 's)M"q_xA,\t7XxjHk:}o'
    str_1 = "IYU@-i\\V[o'\rOm />i\n"
    str_2 = '*gjiJC8"NxH'
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    str_0 = "X 0:esd.5N<`HE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    int_0 = -3366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    float_0 = 866.819
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    float_0 = 1909.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    str_0 = "\rc,\x0b7wv345h|pZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    int_0 = -1166
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bytes_0 = b"\x85\xd8\x01\x12\xf0\x07"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0, bytes_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    float_0 = -508.52026
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    complex_0 = 724.1 - 426.110438j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    int_0 = -550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    bytes_0 = b"9hIa:\xaf\x05\x1b\xa9\xda#"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5174():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5175():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    complex_0 = -1170.301 + 530.150697j
    set_0 = {complex_0}
    list_0 = [set_0]
    str_0 = "Dvg\tn~=\\4\x0bF"
    none_type_0 = None
    str_1 = "!uH[^G'<2m"
    str_2 = '58X3/i3\\"1HX:6'
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = -373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    none_type_0 = None
    str_0 = "gX)'V3*jX\nITCoh`F6x1"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bytes_0 = b"\xd5"
    bytes_1 = b":|\x15\xa9\xe0\xe7q$\x1c\x90{\xf5\xbb\xf1\xfd\xdc\xf3Wb\x03"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    int_0 = 378
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    int_0 = -1734
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    str_0 = "`ma^ R-^!Ljrh5"
    set_0 = {str_0}
    list_0 = [str_0, set_0, set_0]
    tuple_0 = (list_0, set_0)
    tuple_1 = (str_0, set_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    str_0 = "0"
    dict_0 = {}
    str_1 = "$,[\tIH"
    object_0 = module_1.object()
    str_2 = ":CFW&="
    dict_1 = {str_0: str_0, str_0: dict_0, str_1: object_0, str_2: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    str_0 = "!?5\x0bl{<Qxmd"
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    float_0 = 1918.041506
    set_0 = {float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    complex_0 = -5234.6119 - 1599.06j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bytes_0 = b'\xae\x00E\xf8\xaf\x9b\x8c\\\xae0c\x1a"c\x16\xd0'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    float_0 = -60.4672
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    str_0 = "_=BW3U~IvU p4;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    float_0 = 491.7
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = -720
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -1563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    bytes_0 = b"\x00i%^\xaa#\xd2V\xcf\x00\xec\x12\x81\xbd&\xe0\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    str_0 = "iZs6+n#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    int_0 = 2022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    str_0 = "d(+#OW{JGuc\rX?7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    int_0 = -2064
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    str_0 = "5yRxrW+\n\n_?[4_@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bytes_0 = b"\xf5#\xb1/\x93"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b"\xf5\t{"
    module_1.object(*bytes_0)


def test_case_5202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5203():
    int_0 = -1667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    str_0 = "%b}@uW(|"
    dict_0 = {str_0: str_0}
    tuple_0 = (str_0, dict_0, str_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    complex_0 = -1101.45103 + 4861.83j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0, complex_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = 'imEaT7tI"KFxX4<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bytes_0 = b"\xcb\xa5\x7f\xbfb\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    complex_0 = 1321 - 188.921j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1,)
    tuple_1 = (bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    set_0 = set()
    bytes_0 = b"D\x04\xd9Y\xb1\r>\xb5\xeb)\x101\x06w\x8b\x1f"
    str_0 = "w}0+B>"
    tuple_0 = (set_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    int_0 = 2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    str_0 = "k>W||Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = "9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    str_0 = "_\nEQ@T&\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    str_0 = "*nFe Rr{FP\x0cr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bytes_0 = b"G&\xf6\xb5\x89O\x04\x06-<\xf7\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    str_0 = "=ora'svJx0*H%IWNM+L_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = -1399
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    int_0 = -624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    bytes_0 = b'~^\xe0\xe4kc\x9e"\xbdCd\x06\xf1!\xb8'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    set_0 = set()
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_5227():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bytes_0 = b"\x9aZ\x8f"
    module_0.match(bytes_0, bytes_0)


def test_case_5229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5230():
    int_0 = -1240
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, set_0]
    list_1 = [set_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    complex_0 = 2631 - 2600.21j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    bytes_0 = b"\xf9(\x15\x02_K\xa3\xefHF\x01\xe4\x8eb\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    bytes_0 = b"O\xd2\xf0\xf1\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    int_0 = 4522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    float_0 = 3259.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    bytes_0 = b"'1\xae\xd2\xe6H\xa3N\x98%\xb3\\m\x88\x8c\x1c7\xa7\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    none_type_0 = None
    object_0 = module_1.object()
    set_0 = {none_type_0, none_type_0, object_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


def test_case_5242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5243():
    bytes_0 = b"\x83\xc1\xb9\xa5\xe7\x01\xd3\xda\xbc\x8f\x84Bi\xe9O1\xe6\x1c}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = -848
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "AzX4>5Gxnc\to6E+\x0c,e&/"
    module_0.match(str_0, str_0)


def test_case_5246():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5247():
    float_0 = -2687.3
    dict_0 = {float_0: float_0}
    set_0 = set()
    str_0 = "RNKR\n!?wCU\\@$(.p}y"
    tuple_0 = (dict_0, set_0, str_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    float_0 = -2780.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    str_0 = "y=3_)z^JX\nt}J<K>Vu"
    module_0.match(str_0, str_0)


def test_case_5250():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    float_0 = 547.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = "?\tO&OZ`\x0cBU-X%-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    str_0 = "o%9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    int_0 = -1016
    dict_0 = {int_0: int_0}
    set_0 = {int_0}
    module_0.match(dict_0, set_0)


def test_case_5257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5258():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_1,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    int_0 = 2552
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    complex_0 = -3303.6 + 2916.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    str_0 = "EF=XN@-+>."
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    str_0 = ".On4\x0c78Z$}1QxlHbrd)f"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    str_0 = "\x0bK}b)EN\tM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    int_0 = 543
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    float_0 = 5259.11135
    str_0 = "@"
    tuple_0 = (float_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    int_0 = -2801
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    complex_0 = -2745.0869 - 537j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    int_0 = 1411
    module_0.match(int_0, int_0)


def test_case_5269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = 3037
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    str_0 = "S=\x0ceJSdz<3gikVN"
    bytes_0 = b"\x1e\xb0f"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"\xe5\x81\xa3g\x86n8\x02\x1a\x9f\x17\x84\x00m\xb6\x0ex"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    float_0 = 1566.61736
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = -1743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    float_0 = 2663.11143
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    none_type_0 = None
    str_0 = "H7_O%!G-VEVfQCkr|BNy"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    int_0 = -745
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    complex_0 = 805.154 - 4263.253011j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_5280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5281():
    bytes_0 = b"\x91\x85\xb4-\xe5"
    int_0 = 1779
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bytes_0 = b"}\xe0\x1a\xbe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    int_0 = -1875
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -1135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    complex_0 = 2210.795 - 3007.6j
    int_0 = -2645
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    int_0 = -786
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    float_0 = -470.82029
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    int_0 = -1237
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bytes_0 = b"\xa7\xa1\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bytes_0 = b"\xe1\xfa\x80g\xc6\xdd\xf3)B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    int_0 = 1011
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    object_0 = module_1.object()
    str_0 = "\\[-95~9\t0oZ\x0csY&X;"
    none_type_0 = None
    str_1 = "/Kgb(9z@e`6Yr\\]]`T~r"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*object_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    none_type_0 = None
    str_0 = ";CN2h$e{9EK8qA mH"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    str_0 = "("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    float_0 = -2666.4
    list_0 = [float_0, float_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_5301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5302():
    str_0 = "zECTDxEZ. ;r#wXUmL0"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    none_type_0 = None
    tuple_0 = ()
    set_0 = {tuple_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    float_0 = -601.69432
    module_0.match(float_0, float_0)


def test_case_5305():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5306():
    str_0 = "-8M]e5XjK\x0bt\x0b.j]CG4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = "h{{1u\x0cg 1P>@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = -160
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    str_0 = "_n}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    none_type_0 = None
    bytes_0 = b"\xe8\xda\xa4B\xda"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    float_0 = 411.989346
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    str_0 = "yH\x0b;VUA*y|k$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bytes_0 = b"\x19\xec\xffm"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    tuple_0 = ()
    str_0 = "t( a.~jeHka;"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    int_0 = 1060
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    bool_0 = True
    bytes_0 = b' \xd2\x01\xd0G\xadM\xbe\xc59\x9b"Or\x87\xb7#\xbf'
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    str_0 = "#a>\\,QPBZ\x0b,`s'$?V\rg"
    bytes_0 = b"\x14\xb0m\xf1\x81\xc3\xbef\x9f\xe4\xfd\xaf\x18\xce"
    set_0 = {str_0, str_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    str_0 = 'C(P `HB!fE3cF(R"[<'
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    int_0 = -2658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = -291
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    int_0 = 2339
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    bytes_0 = b"/\x0c\xfc\xff\xe5\xb8].\xfb\xea>\x87\xa4E+H"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bytes_0 = b"\x1d\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    float_0 = 1310.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    complex_0 = -529.36 - 415.22j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    int_0 = 179
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bytes_0 = b"\x9c"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = "_ HV+/0'U\"Fx5y%I$@lS"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    float_0 = -1363.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    str_0 = "CD*xm}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    int_0 = 2121
    int_1 = -3038
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_1, int_0: int_0}
    module_0.match(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    float_0 = -1846.338238
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    str_0 = "$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    bool_0 = True
    module_1.object(**bool_0)


def test_case_5340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5341():
    str_0 = "JnWW"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"+\xaf\xb1\x16m\x14\xd8\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bytes_0 = b"t=\xad\x01K]\xc4C\xe2\xdf\x11\x16#s"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    int_0 = 855
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5346():
    int_0 = 2404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    bytes_0 = b"\xe3\xbd\x9fS\xa3\x134L%\x8d\x8e&\xbe9\xc9\xcc\x87\x10\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    str_0 = "xi)Y&9Vg<F2;BD M%g"
    list_0 = [str_0, str_0, str_0]
    int_0 = 1715
    str_1 = "Vp:DY"
    str_2 = '&[Xbx6"j\n-='
    str_3 = "."
    dict_0 = {str_0: int_0, str_1: int_0, str_2: list_0, str_3: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = 539
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    bool_0 = False
    int_0 = -939
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    str_0 = "&@"
    bytes_0 = b"e\xc4\xb9\xf1k\xf2\xcb\\\xeb\x8fA\xe2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0, bytes_0: str_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    int_0 = 1059
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = 656
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    str_0 = 'js"&/LXpJLPhDS'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    str_0 = "jdQPLH/:MH=DKi{SAO?="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    str_0 = "x<K7}x%^>[Dzmp1h@Aq"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    float_0 = -1194.224
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    complex_0 = 627.716 + 413.0213j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    bytes_0 = b"\x15O\xd2a\xda\xf2\x19\xbc\xf2\xb3"
    str_0 = "8YK:sJM*"
    bool_0 = True
    dict_0 = {bool_0: bool_0, str_0: bool_0, bytes_0: bool_0}
    tuple_0 = (bytes_0, str_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bytes_0 = b"P[\xc7sCr\xea\xff\xf5\r,\xf5\xfc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    int_0 = -2252
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {int_0: int_0, int_0: set_0}
    tuple_0 = (dict_0, dict_0, dict_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    float_0 = -1126.0341
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    bool_0 = False
    float_0 = -357.4495
    list_0 = [bool_0, bool_0, bool_0, float_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    complex_0 = -1486.376125 - 1429j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    float_0 = 319.053
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    str_0 = ">5\t\\3B`6Y&freat"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bytes_0 = b"\xa2\xfb\xe9\xb0\xe9^#\xe5\xde\xb5\xc4%>\x00\xcbZ\xde\x93\x9a"
    list_0 = [bytes_0]
    str_0 = "c#Y+Ti>>*i\nK\x0bZ"
    str_1 = "0qq\\Gx9B}p?D-~4\r,29x"
    dict_0 = {str_0: bytes_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    bytes_0 = b"\x08A\xaeT^\xe4\xc1\x1fVH'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bytes_0 = b"U\xb8\xa6\xb0y\x0fe\xf4\x05>\xc5\x98\x89\xc0Y\xaf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    str_0 = "60aISr=Iu)77Wj(P`~G6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    bool_0 = False
    bytes_0 = b"\xc8\xd0Q\xab\xe3\x96\x18R\xef?\xdc\x8fQ\x80\xaa"
    list_0 = [bool_0, bool_0, bool_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b"YFN&-\x85.(\xc3\x97\xdb\xf0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    float_0 = -1483.964834
    str_0 = "m:\"4$'R\"q<V`)E\t/2~='"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    str_0 = "kFuoh8-tK\rC209"
    module_0.get_new_command(str_0, str_0)


def test_case_5385():
    pass


def test_case_5386():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    complex_0 = 4834.03 + 2633.6j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    int_0 = 2586
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    complex_0 = 3466.5 - 2186j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    bytes_0 = b"l\xfe\x99\xefI\xc0\x0e\x82Ti|\xa5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_5392():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5393():
    complex_0 = 480.83 - 4497.4856j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = 'jlU|+r"A312\n]flb'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    int_0 = 1459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    complex_0 = 1574.770268 + 2849.78468j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    str_0 = "LRXPF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    bytes_0 = b'\x08\x9a\x8c\xd1\x1d\xe9\x0c\xd3D"ZD\xa2\xe4\xb3\x06D'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    bool_0 = True
    set_0 = {bool_0}
    str_0 = "sz\r]`q1d"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = -2256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    float_0 = -1892.8719
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    bytes_0 = b"V\x16\xe6[{\xd5\x10\xab&\x18\x8f\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0]
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    str_0 = "`&Upml\rN ZlF\t#<"
    module_0.match(str_0, str_0)


def test_case_5408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5409():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    int_0 = -1862
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "!@pkOP6vzVu\r`"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    int_0 = 1344
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    int_0 = -3363
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    str_0 = "Hd.|m2]\r&9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    int_0 = 1950
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    float_0 = 1001.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    str_0 = "oK{`|e(*Dak\\'IUa^\rC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = -1688
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    str_0 = "uVl~-P>I\x0b,8.)[bKTP*"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


def test_case_5422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5423():
    bytes_0 = b"\\\x06\xa6"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    str_0 = " \r^c%J$`I29"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    int_0 = 3726
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "';t536<>"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0}
    bytes_0 = b"\xa0De\xd09"
    tuple_1 = (set_0, bytes_0)
    str_1 = "6NT~2 &"
    tuple_2 = (tuple_1, str_1, str_0)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    int_0 = 128
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    str_0 = "?Q0pj I2\tq\t'pY}"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    int_0 = -3383
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    complex_0 = -1814.99 - 2948.47j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5434():
    pass


def test_case_5435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5436():
    int_0 = 377
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    complex_0 = 701.44 - 2122.85j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    bool_0 = False
    float_0 = 965.786534
    set_0 = {bool_0, float_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bytes_0 = b"\xaf/x"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bytes_0 = b">#\x8f\xbb`\x1e\xf5\xc4c+\x1d\xd1\xf1\x95\t\xa6\xe9t\x8c"
    module_0.match(bytes_0, bytes_0)


def test_case_5442():
    pass


def test_case_5443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5444():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    int_0 = -965
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    int_0 = 546
    str_0 = ""
    set_0 = {int_0, int_0, int_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    bytes_0 = b"&\xc6\xa2\xaa\x90\x8fa}\xc3<\xbc\xb1\xd2=\x934\x7f\x8a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bytes_0 = b"\xc7\xcfH\xaa\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5450():
    str_0 = "g]8%g;obg="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    complex_0 = 875.2 + 1905.85153j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5453():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "KF.\\ZA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    bytes_0 = b"g\x98K\xdf[\xc0\x14!\x9er\x8e\x0f\x9e\xd7\xa3\x19\x1f\xed\xfa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    str_0 = "\n}II7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bytes_0 = b"n~#\t\xe0[\x19r\xdc\xd4\x94\x06"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    bytes_0 = b'\x1e\xaf\x98S\x12u"\x9f'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    complex_0 = -2524.4791 - 851.3j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    float_0 = 608.9
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = -450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = 'PiPLmEJ"EwA}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    int_0 = -1129
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"\xab}\xb0p!\x15\x15\x8d'&"
    float_0 = -865.8
    tuple_0 = (bytes_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    str_0 = "BBt=!#\x0cKf"
    set_0 = {str_0}
    list_0 = [str_0]
    tuple_0 = (set_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    float_0 = 294.47
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    int_0 = 3593
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    float_0 = 1821.68
    bool_0 = True
    set_0 = {float_0, bool_0, float_0}
    int_0 = -701
    tuple_0 = (float_0, set_0, int_0, float_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    none_type_0 = None
    bytes_0 = b"\x7f\x1c\xd8\xa1y\xe8>:\xf3\r\x066\xe3"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = "lm06b;LEXP`[)'uE"
    str_1 = "<T8&t.D"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    complex_0 = -2530.465 - 896.6337j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    int_0 = -1911
    module_0.match(object_0, int_0)


def test_case_5475():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5476():
    complex_0 = 3726.96 - 1613j
    str_0 = "F\r"
    list_0 = [complex_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bool_0 = False
    str_0 = "m_t^TsR`zK?Y\x0c\nC"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "M&ZVh*+h`S73D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    str_0 = "!P-)\r!spefoPL4YC]6&>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    str_0 = "\\{\n3+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    int_0 = 453
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    str_0 = "\r\rzpYcbh_i@y-Y"
    str_1 = "S#}(_"
    str_2 = "d3(<^"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    str_0 = "S}0FB8KGWj*xp["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    str_0 = "/oDF"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.match(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    complex_0 = 404.53 - 762.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    int_0 = -3545
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    str_0 = "n\x0cw\\Y}p=\\bbbjTL"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5491():
    int_0 = 1756
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"\xc2`\xec\xc0\xa66N4\x81\x99\x05\x9bf~\x7fN\xc8H\x0f\xbf"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = ()
    dict_0 = {tuple_0: list_0, tuple_1: int_0, tuple_0: list_0}
    tuple_2 = (list_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    float_0 = -3002.7292
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    float_0 = 111.6927
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    float_0 = -2998.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    bytes_0 = b">{l89B\xf4\xfc\xc3\x17I\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bytes_0 = b"\xdbr7>\xbf\xb8\x87\xaf\xd7e\xfd\x96\x94"
    int_0 = 634
    set_0 = {bytes_0}
    list_0 = [bytes_0, int_0, bytes_0, set_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    complex_0 = 3440.8 + 1089.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    int_0 = 484
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_5499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5500():
    complex_0 = -1166.712 - 1044.25252j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    str_0 = "2q!|RfjpYXa+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    bytes_0 = b"hZz0H9\x81!\xa9\xbdu&\xd4\xc0\xb4\xf6\xfa"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    float_0 = -1904.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    float_0 = 3667.54
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    int_0 = -1331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bytes_0 = b"u\x9eYe\xc1\xa2J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_5508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5509():
    str_0 = "dXpnkuX"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    str_0 = "iM`Zf|*wi.~~FxMFZ`*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    list_1 = [bool_0, list_0, bool_0]
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    str_0 = "G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    int_0 = -3673
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    float_0 = -2047.31289
    set_0 = {float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    float_0 = 649.965
    module_0.get_new_command(float_0, float_0)


def test_case_5518():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {tuple_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    int_0 = -4850
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bool_0 = True
    list_0 = []
    list_1 = [list_0, bool_0]
    tuple_0 = (bool_0, list_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    float_0 = 595.61
    module_0.get_new_command(float_0, float_0)


def test_case_5523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5524():
    str_0 = "f^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    str_0 = "+ud"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    str_0 = "a\t{/.X"
    none_type_0 = None
    str_1 = "vV\x0bxIp\x0c"
    str_2 = "3KK%/{m"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    dict_0 = {}
    str_0 = "b22"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    str_0 = "#\nGs(Q#`M!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    str_0 = "\x0cwoy6m2c}!a*g6"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    float_0 = 3046.6725
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    set_0 = set()
    set_1 = set()
    module_0.match(set_0, set_1)


def test_case_5533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bytes_0 = b"?\x8ccG\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5535():
    pass


def test_case_5536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5537():
    float_0 = 1459.07
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    str_0 = "<Y,wJ'rv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    int_0 = 4189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    bytes_0 = b"M/\xdf\xcb\xa0\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    int_0 = -1139
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    float_0 = -2289.517952
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    str_0 = 'QkbQNuM*#"^`'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1, bool_0)
    list_0 = [tuple_0, bool_1, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    bytes_0 = b"\x8d\xc8\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    int_0 = 2112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    float_0 = -398.89554
    tuple_0 = (float_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5549():
    int_0 = -1715
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5550():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5551():
    int_0 = -128
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    bytes_0 = b"\xe3\xda*ta\x9d\x18\xab\xb9If\xe6FL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bytes_0 = b"\xabD\xa3\xe8#\x8d\x9fnR"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    str_0 = 'R*;&!2zEN4~"(/J\x0b'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    bytes_0 = b"\x90\xa3 hP\x13\xa4\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    str_0 = "@y2afu$\x0c4&u]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    float_0 = -1716.84
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    str_0 = "yV\r"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bytes_0 = b'"\xb6]\x0f"\xdc\xed\x98\x17)\xc0\xad\xad \x18\x1d$'
    str_0 = "$Jl4ld"
    set_0 = {bytes_0, str_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    none_type_0 = None
    int_0 = -48
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    bytes_0 = b"\xbde\xea\xa8\x84\xbb\xd3\xcaH=\x01\x8c\xae\xd3\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    bytes_0 = b"\x80\xbc\x89\x05V\xff\xffh4\x84w"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_5564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5565():
    str_0 = "\naaF|:zh}59"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    bytes_0 = b"/\xee\x0c\xfd7\x1a\xbaX\x99\xeb\xef0\x06\x00\xe64\xe4\xbf\x0f\x10"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    int_0 = 1568
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    int_0 = 4060
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    int_0 = -2336
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    object_0 = module_1.object()
    bytes_0 = b"&4\r\x89\xb14"
    dict_0 = {object_0: set_0, bytes_0: object_0}
    bytes_1 = b"\x14}\xe1\x9d\x1a/<\x0c\xf3\x9e\x14\x98"
    tuple_0 = (set_0, object_0, dict_0, bytes_1)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    int_0 = -1381
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    float_0 = -2232.025964
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    complex_0 = 3411.383 + 706.67435j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    int_0 = 1620
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bytes_0 = b"S\x1b\xa1^\xd2\x02\xe4[\x85B:\xb0\r\x85\xfdj\x89\xbe\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    str_0 = "HA%sT[o$fW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = "W~/xq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    none_type_0 = None
    bytes_0 = b"\x80B\xc3D\xb72\xcc^b\x1amU\xc7qx*\xe8\x91@"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    int_0 = 1307
    int_1 = -726
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    str_0 = "mD\n%QZ0E<lB_r_{Y;zWs"
    bytes_0 = b"\x86|\\\x02\xaac\x05\xf7\xfa|yj\x06\x16\x8e-?\xe3"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (str_0, bytes_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    int_0 = 915
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    bytes_0 = b"\xac\t~K\xbfT\n\xec\\\xef\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    bytes_0 = b"\x16\xc9"
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, bytes_0, bytes_0, dict_0]
    tuple_0 = (bytes_0, bool_0, list_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    int_0 = 1908
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    bytes_0 = b"8\xec\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    str_0 = "Ay/*4<.+X*8bj3yr"
    str_1 = "4n}AVZ,6"
    str_2 = "Sy*~SW"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    int_0 = 3429
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    str_0 = "=\x0bWv$49{p"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    str_0 = "j7p-{mp|E=[YnZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    bytes_0 = b"\xbb\xeeR"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    float_0 = -3317.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    int_0 = -3147
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    int_0 = 1764
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    float_0 = 1223.212
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    int_0 = -1421
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    bytes_0 = b"\x82E\x839Ng\xdc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    float_0 = 970.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    int_0 = 242
    float_0 = 3063.2
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    str_0 = "_U(bg8M9C"
    bytes_0 = b"\xcf"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    bytes_0 = b"@\xbac\xaf\xbbX\x8a\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    bytes_0 = b"'\x80\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    list_0 = [bool_0, bool_1]
    tuple_0 = (set_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    int_0 = 3412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    complex_0 = 2184.3 + 1829.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    float_0 = 5260.359277
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    bytes_0 = b""
    float_0 = 481.1
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    str_0 = "R/mTY1%!q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    complex_0 = 1509.9 + 3396.8j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    int_0 = 3620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    str_0 = "Eq_x)Vm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    str_0 = "&%D/,aXNc//A7"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    bytes_0 = b"\xc4M"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    str_0 = "p6\\\x0c5!*/&\nSd|?\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    int_0 = -2650
    bool_0 = True
    set_0 = {int_0, int_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    bytes_0 = b"VL:\x0e)\xd5\xdb9O\x91t\x8b\x84\xc5"
    set_0 = {bytes_0, bytes_0}
    str_0 = "FA"
    tuple_0 = (bytes_0, set_0, set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    float_0 = -1686.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    str_0 = "t#X!J pmgS{d^Cd)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "_"
    dict_0 = {str_0: list_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    bytes_0 = b"\xbb\x9bJ}vo\x977lJ\xc4w\xc1\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    bool_0 = True
    bytes_0 = b"\x10\x05B7N\xa5\x90q\xad\xc9?\x1cP\xa3\x9ax"
    tuple_0 = (bool_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    int_0 = 1979
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    int_0 = -1986
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    int_0 = -1592
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bytes_0 = b"\x18\xbf\x8e&\xa6\xd89"
    dict_0 = {}
    tuple_0 = (bytes_0, bytes_0, dict_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    int_0 = 471
    int_1 = -2506
    bool_0 = True
    tuple_0 = (int_0, int_1, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    int_0 = 1579
    bytes_0 = b"\xe7yy\xa2\xcf\xd3\xa1\xf1\xde\x9f\x86\xe6\xd2\x96\xb6\xf4V\xfeut"
    tuple_0 = (int_0, int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    int_0 = -244
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    bytes_0 = b"\xa4V\xcc%\xf4E\x93\xa5x=\x9d1\xa9J\xc0\xaf\xe4"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_5642():
    pass


def test_case_5643():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5644():
    int_0 = -2305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    str_0 = "ms?k}OCz8\r"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    str_0 = "J=pI|i?Sxh@\x0b}"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    float_0 = -1828.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    int_0 = 3310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    float_0 = -3133.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    bytes_0 = b"\x1e\x1f\x94\x181\xf2s\xc0\\\xa4,~o"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    float_0 = 3178.588988
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    float_0 = -801.326
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    int_0 = -2095
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    str_0 = "\rOf&u,!mQ\x0b}["
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    float_0 = -1301.424
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    int_0 = -1109
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    bytes_0 = b"\x1e\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    int_0 = 900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    float_0 = -3193.805
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    int_0 = -852
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    float_0 = -2035.65137
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    int_0 = -280
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    int_0 = -4598
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    bytes_0 = b"\x94.]|\x05\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    bytes_0 = b"\x87\x8e\x04b!\xe1\x1d\xe1\x16CU\xf8\x91\x18"
    bytes_1 = b"\x91\x1fs"
    list_0 = [bytes_0, bytes_0, bytes_1]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    none_type_0 = None
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_0, tuple_0]
    list_1 = [list_0, tuple_0, tuple_0]
    module_0.match(none_type_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    list_0 = []
    int_0 = -6421
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5671():
    bytes_0 = b"\xe6\xd6E"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    bytes_0 = b"\x98\xe0;\x8c9\xbei"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    str_0 = "z^[sC:fSebI;6,&o7{e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    str_0 = ':)2ZXL:"%vaB'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    str_0 = "AT0*1J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5676():
    none_type_0 = None
    bytes_0 = b"!\xb0\x8a\xb1\xd7)[\x84\x82\xf8\x83\x17ma\x99'v\x896I"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    float_0 = 1709.889
    list_0 = [float_0, float_0, float_0]
    str_0 = "C\tX7cQ6A/vIUA3N"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    int_0 = 2248
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    float_0 = -2400.959
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    int_0 = 2299
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    bytes_0 = b"\xffq \xf0\xe1\xc4\xc8\x9a\xa00\xe8\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    int_0 = -1970
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    str_0 = "p>"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    int_0 = 2429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    bytes_0 = b"m\xce:R'q\xban\x87#\xf8\x01\x9c\xf16\x0e\xc6\x19\x9d\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    int_0 = -807
    module_0.get_new_command(int_0, int_0)


def test_case_5689():
    pass


def test_case_5690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5691():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    str_0 = ">PjDVC;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    str_0 = "G^;"
    str_1 = "?fU}^*egj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    object_0 = module_1.object()
    int_0 = -456
    tuple_0 = (object_0, int_0)
    tuple_1 = (tuple_0, int_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    str_0 = ".Z:&W|$^_9=o"
    none_type_0 = None
    str_1 = "\\G \x0c(R\r\t"
    str_2 = "dddp(3ux[5>&+577CO"
    str_3 = ""
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    int_0 = -1920
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    int_0 = 3106
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    bool_0 = True
    bytes_0 = b"P>!;S\xcf\x07\xb62"
    bool_1 = True
    set_0 = {bool_0, bytes_0, bool_1, bool_0}
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    str_0 = 'pV]&@h-Si^e#Zqz"'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    bytes_0 = b"\xc4\x90\x93U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5702():
    float_0 = -490.79011
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5703():
    object_0 = module_1.object()
    bool_0 = True
    bytes_0 = b"l\xef\xff\xd6\x83\rmb"
    tuple_0 = (object_0, bool_0, object_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    float_0 = -842.999
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    int_0 = 742
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    bytes_0 = b"]\x15\x16+\xaf\x87\x02(\xf1mR\xa8\xc8\xab\x8a\xb6\n!\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    bytes_0 = b"^H\xeex7D\xb5"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5708():
    float_0 = 2129.2749
    module_0.get_new_command(float_0, float_0)


def test_case_5709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5710():
    str_0 = "e{oz^:M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5711():
    none_type_0 = None
    bytes_0 = b"/\x86\xc4!\x90\x8e\x0eGJ\xd4\x0c\xec\xe7\xfd`\x96$-\x04i"
    set_0 = {bytes_0, none_type_0, bytes_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5712():
    str_0 = "nE;I\t9y~yDQ^z_,``q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5713():
    complex_0 = -1091.126 + 1157.17639j
    module_1.object(*complex_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    int_0 = 3913
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    int_0 = -928
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    complex_0 = -1991.184 - 1478.41366j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    float_0 = 529.899332
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    str_0 = "ix_M0d?9iBT,@\t>c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    str_0 = " vH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    str_0 = '\t7 (\x0bN:|"kda8s3r'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5722():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5723():
    bytes_0 = b" "
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5724():
    str_0 = "|d<\\e;G?`y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    str_0 = ".$s@iQg}z74($\x0b\t/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    int_0 = 614
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    bytes_0 = b"\x07\xa3\x98F\xfa`\x11i9\xf4\xddBM\x80\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    float_0 = -811.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5730():
    float_0 = 1428.181042
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5731():
    bool_0 = False
    str_0 = "*(q9Q0o\t1vWcj>F"
    tuple_0 = (bool_0, str_0, bool_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5732():
    bytes_0 = b"\xf6\x04\xd2ZM\x13\x16?\xfcA\xb8a\xf3\xc8\xac\x8e5R{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5733():
    int_0 = 73
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


def test_case_5734():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5735():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5736():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5737():
    bytes_0 = b"V\x9f\x06\x11\xdd\x05T\xc5g\x80\xd5\x85\x1c%\xb8\xc5@\xf1Y"
    module_0.match(bytes_0, bytes_0)


def test_case_5738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5739():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5740():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5741():
    bool_0 = False
    str_0 = "n9N-\n!=B)uO\r\x0bk=H=H)"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5742():
    bytes_0 = b"\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5743():
    str_0 = "'GxA/\"s_wNjj9BtT.B"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0, list_0)
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5744():
    object_0 = module_1.object()
    int_0 = -558
    dict_0 = {object_0: object_0, int_0: int_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5745():
    int_0 = 1346
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5746():
    bytes_0 = b"\x93Y\xf5\xf4\xd2p\x9f\x976\xd3"
    tuple_0 = (bytes_0,)
    int_0 = -1149
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5747():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5748():
    float_0 = 102.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5749():
    int_0 = -3935
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


def test_case_5750():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5751():
    bytes_0 = b"\xf4\xb3\xfb\x8f5("
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_5752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5753():
    tuple_0 = ()
    int_0 = -3868
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5754():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5755():
    str_0 = "31,&m'U}\n'lW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5756():
    none_type_0 = None
    bool_0 = True
    list_0 = [none_type_0, none_type_0, none_type_0, bool_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5757():
    str_0 = ">x!aaa[yebX[K&\x0bK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5758():
    bytes_0 = b"\xe35\xdc\x8b<\xf4\x0f\xd8"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5759():
    int_0 = 1628
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5760():
    bytes_0 = b"gl\xe3\x03\xa5\xab\xea7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5761():
    str_0 = 'i"%4@l}&'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5762():
    str_0 = "_jL\t$)iib\tDM`6:R"
    tuple_0 = (str_0,)
    int_0 = -913
    dict_0 = {tuple_0: int_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5763():
    float_0 = 857.06624
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5764():
    int_0 = 1121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5765():
    complex_0 = 654.6 - 2763.2j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5766():
    bytes_0 = b"\xdbU\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5767():
    list_0 = []
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5768():
    bytes_0 = b"\x1a\x96\xb6H\x14\t\xa7l\xea"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5769():
    int_0 = -2214
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5770():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5771():
    bytes_0 = b"\xb3\xb5\xd7\xdc\xb5\xc8\xe1\xf4Y\x8a\xad\xb6\x8c\xeb\xcb\xe2\x94vv\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5772():
    int_0 = 704
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5773():
    bytes_0 = b"-{\x93\x80\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5774():
    int_0 = 348
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5775():
    float_0 = 3000.374
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5776():
    str_0 = "vb)v\\?I6p\\J(B<o^Y:W"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5777():
    int_0 = 975
    bytes_0 = b"\xe5T\xfc\xfcc\x11\xc2h\xc2\x98U\xf4"
    tuple_0 = (int_0, bytes_0, int_0)
    bytes_1 = b"\xdc\xcb<\xa6\x02\x80\xa0_p\xcd\x0e\xcc\xf1B"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5778():
    int_0 = 1437
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5779():
    float_0 = -393.401713
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5780():
    str_0 = '%(vsNB"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5781():
    int_0 = 35
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = []
    tuple_0 = (int_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5782():
    bytes_0 = b"<\xcd\x9c\xb1\x88"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5783():
    int_0 = -720
    bytes_0 = b"\x9b"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5784():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5785():
    bytes_0 = b"\xfa\xc0\xceB"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5786():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    str_0 = "JW7`2xK\tXc.2J8q[@t"
    tuple_1 = (tuple_0, bool_0, str_0)
    tuple_2 = (tuple_1,)
    list_0 = [tuple_2, tuple_2]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5787():
    str_0 = "xt\x0cdtBH3'\x0b^'auHRp(r["
    set_0 = {str_0}
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(set_0, object_0)


def test_case_5788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5789():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\x14\xba\xec\xbd\xf1\x18eCM"
    tuple_0 = (list_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5790():
    int_0 = 3271
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5791():
    complex_0 = -1.908704 - 42.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5792():
    bytes_0 = b"\x07-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5793():
    bytes_0 = b"W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5794():
    str_0 = "H"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5795():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5796():
    str_0 = "WOs(8f2P_2\t1JF"
    tuple_0 = ()
    tuple_1 = (str_0, str_0, str_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5797():
    int_0 = 890
    set_0 = {int_0, int_0, int_0, int_0}
    dict_0 = {int_0: int_0, int_0: set_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5798():
    complex_0 = 897.09699 + 2474.083j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5799():
    complex_0 = -403.1668 - 2182j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5800():
    bytes_0 = b"\xf5\x9aq"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5801():
    int_0 = -2901
    set_0 = {int_0, int_0, int_0, int_0}
    bytes_0 = b"\xa7\xb0\xbed\xd8\xeb\xa9\x03Q\xab\x9c"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5802():
    int_0 = 1461
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5803():
    str_0 = "i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5804():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5805():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5806():
    str_0 = "q=n=p<IT*g?jn\rZ')~VM"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5807():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5808():
    int_0 = 667
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5809():
    bytes_0 = b"\x87x\x96D\x17Q\xf3\x80\xf6jo;&D\xa6\xa9\x9f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5811():
    str_0 = "fh-4Eb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5812():
    float_0 = 557.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5813():
    float_0 = -2471.611279
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5814():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.match(object_1, object_1)


@pytest.mark.xfail(strict=True)
def test_case_5815():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_5816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5817():
    bytes_0 = b"o\xf5-\xb2w\xfb\xa2\x85\xd0#\x87\xa9\x85\xb0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5818():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5819():
    float_0 = -507.44
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5820():
    complex_0 = 1894.581 - 3475.371j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5821():
    float_0 = -1123.4
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5822():
    str_0 = "jeURIq|~\x0c)o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5823():
    str_0 = "YspdSmE/mFt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5824():
    str_0 = "d]xEj=atDGiR"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5825():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5826():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5827():
    bytes_0 = b"\rj\x0b\x84\xafM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5828():
    int_0 = -1888
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5829():
    float_0 = -1486.7939
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5830():
    int_0 = 949
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5831():
    bytes_0 = b"\xa8\xbc\xd6\xe84\xf24\x19\xa1\x82e\x078\xac\x9d\xa2?|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5832():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = ()
    module_0.match(list_0, tuple_0)


def test_case_5833():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5834():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5835():
    str_0 = ""
    bytes_0 = b"\x9d"
    tuple_0 = (str_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5836():
    int_0 = 2222
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5837():
    str_0 = '/g{\n"\rkSs_\n!*\\5w/VF;'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5838():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5839():
    int_0 = -1080
    dict_0 = {}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5840():
    float_0 = -686.6763
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5841():
    int_0 = -2303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5842():
    int_0 = 418
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5843():
    int_0 = 1907
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5844():
    str_0 = " ?}]64RparXrd"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5845():
    str_0 = "1C =Q~rW"
    str_1 = "C){rCxr07\twM4YmQGc6"
    str_2 = "77c"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5846():
    str_0 = "F7v5JFM8?M*#M1"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5847():
    bytes_0 = b'\xa2"=\x05\xd7\x8ai\xaf\xf7'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5848():
    str_0 = "@$RY&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5849():
    int_0 = -2045
    bytes_0 = b"cv"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5850():
    none_type_0 = None
    bytes_0 = b"~\xe7\x184!\xe4\xd1\xec;K\xe5\xa6\xad b\xcb\xb4\x94\xc2"
    dict_0 = {
        none_type_0: bytes_0,
        bytes_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5851():
    float_0 = -918.1
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5852():
    str_0 = "s`t\x0b2uwSM!cNiU\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5853():
    int_0 = -587
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5854():
    int_0 = 3476
    module_0.match(int_0, int_0)


def test_case_5855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5856():
    bytes_0 = b"\x17f\x0eU\x12\xb0\x94/wm\x8a\x1d\xe5q\xe7\xeaxo"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5857():
    int_0 = 129
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5858():
    bytes_0 = b"*g\xbem\x98\x8c\x9d\xc5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5859():
    int_0 = -2511
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5860():
    int_0 = 890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5861():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5862():
    bytes_0 = b"\xd7\x06\xda"
    int_0 = 1809
    str_0 = "\r#5\x0bl;2wN9tPx"
    bool_0 = True
    tuple_0 = (bytes_0, int_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5863():
    none_type_0 = None
    bytes_0 = b"\xe7\xc2 \n\xb3\x7f\x8b?\xc2\x99($\xa0\x80\xf0\xf2"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_5864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5865():
    float_0 = 651.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5866():
    int_0 = 1150
    str_0 = "tX"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5867():
    str_0 = "sxzPEUHO<[EVW83wG"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5868():
    str_0 = "K"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5869():
    bytes_0 = b"j\xd2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5870():
    bytes_0 = b"\x8d~\x14\xf4\xe9\xe1\x0c7\x07\xee\xb4a\x12\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5871():
    str_0 = ":WV\t28%>5*]E.Mnb,:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5872():
    str_0 = "80%j,2Uf4HDgR`>'F"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5873():
    float_0 = 572.29
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5874():
    float_0 = -124.883463
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5875():
    str_0 = "**v2(BEP\r\x0bR&`vTREG.6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5876():
    int_0 = 1404
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5877():
    float_0 = 4045.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5878():
    str_0 = "2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5879():
    int_0 = -2234
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5880():
    int_0 = 1044
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5881():
    bytes_0 = b"\xd22\x84\x91{P\xe9\xe1"
    set_0 = {bytes_0, bytes_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5882():
    str_0 = "UZMh\\|AQ3xWLX+&"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5883():
    int_0 = -3259
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5884():
    int_0 = 1158
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5885():
    str_0 = "{<;Hc\x0cd-l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5886():
    str_0 = "Anx"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5887():
    bytes_0 = b"\xf1\x03*\xdb\xd1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5888():
    float_0 = -1032.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5889():
    bool_0 = True
    str_0 = "p\\!h`>QA}Lz\x0c5OTiq`r\\"
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5890():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)
