# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mrrunner as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\n\xac\xad`!\xc6gD\xf0$"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    list_0 = [tuple_0]
    str_0 = "4r|aP3*x5j)7"
    dict_0 = {str_0: object_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_8():
    module_0.Runner()


def test_case_9():
    pass


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 1438
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xd3%\xde:I<"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 1026
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "cW(sex"
    set_0 = {str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_19():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = -1102
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_24():
    pass


@pytest.mark.xfail(strict=True)
def test_case_25():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_26():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_27():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_28():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_32():
    module_0.Runner()


def test_case_33():
    pass


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_37():
    int_0 = -1309
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "sxYT\\v,y"
    list_0 = [str_0, str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    float_0 = -2195.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = "?hj=\t'QuS`FEj "
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = "gSH1  m3{2V@gn("
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bytes_0 = b"\x95\xd1,\xd6\x7f5\x7f"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    int_0 = 1084
    set_0 = {int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "Coudl not find scalding-core."
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = 1946
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    complex_0 = 1153 - 1488.694081j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_52():
    int_0 = 5000
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_55():
    float_0 = 1945.68
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = '4_u&]b"px'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


def test_case_58():
    pass


@pytest.mark.xfail(strict=True)
def test_case_59():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_60():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_62():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    int_0 = -4163
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    int_0 = 787
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bytes_0 = b"\x98\xec\xa7\xca\x98\xc0=?\xb4)\xbb\xfc\x89\xfei\xa4\x1f\xe1"
    set_0 = {bytes_0, bytes_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = "TK@"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_69():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


def test_case_71():
    pass


@pytest.mark.xfail(strict=True)
def test_case_72():
    int_0 = 896
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    float_0 = 1292.7305
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    int_0 = 453
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, int_0]
    list_1 = [tuple_0, list_0, list_0, int_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_75():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_78():
    int_0 = 128
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    bytes_0 = b"\xde~m\xf8M\x97O\xf0Sp\x1bI\xc3\x95\x87^\xee\xfe=\xc5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "Range %s lacked %d of expected %d %s instances"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bytes_0 = b"L\xd1]c\xad"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    bytes_0 = b"\xae\xeb\x99\x9c\xfd\x1dGO"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_86():
    str_0 = '+M,o\n~jQ"*?'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b"\xfe2~{\xe8\x03D\xfdu3D\xe6\xd8|\xd6Q"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    complex_0 = 2216.82 + 3582.04587j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_91():
    module_0.Runner()


def test_case_92():
    pass


@pytest.mark.xfail(strict=True)
def test_case_93():
    complex_0 = 1035.03038 - 960.1j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_96():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_97():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    bytes_0 = b"\xeb\x89Dfy\xf5\xb8B\x8e8\x14\x12"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_100():
    str_0 = "~&lXr,~,@s"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, list_0, list_0]
    module_0.Runner(list_1)


@pytest.mark.xfail(strict=True)
def test_case_104():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_105():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    int_0 = 482
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_109():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b"\xa5\x8b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    int_0 = 50
    module_0.print_exception(int_0)


def test_case_115():
    pass


@pytest.mark.xfail(strict=True)
def test_case_116():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_117():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_119():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_120():
    str_0 = ":"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_123():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_124():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_125():
    int_0 = -1999
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_127():
    str_0 = ">\x0b%wbR94\rD^"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    int_0 = -1506
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_130():
    bytes_0 = b"\xd3\xc01pF\xe4\x81\xcaXl\xe3si"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_133():
    bytes_0 = b"\xb2o\x81\xab|\xfcL\xc4\xce\x04!\x91\xa5\xc3\xd4l\xfd\xf1\xb9D"
    module_0.Runner(bytes_0)


def test_case_134():
    pass


@pytest.mark.xfail(strict=True)
def test_case_135():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_139():
    str_0 = "=>))"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_143():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_144():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    bytes_0 = b'\xef\x00Fw+%Z\xcbh"t8\xb9'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    complex_0 = -2015.56 + 63j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_150():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_151():
    str_0 = "V$c?\x0b%ii\x0cdn[A;9E#Z"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    str_0 = "__main__"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = -396
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = ".L^:J?qJj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    object_0 = module_1.object()
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    tuple_0 = ()
    module_0.Runner(tuple_0)


def test_case_160():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_162():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_163():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_165():
    str_0 = "__main__"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_167():
    float_0 = 253.4
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_169():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    int_0 = -1320
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    module_0.Runner()


def test_case_172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_173():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_175():
    float_0 = -308.096856
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    float_0 = -1093.7962
    list_0 = [float_0, float_0]
    list_1 = [list_0, list_0, float_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_177():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    int_0 = 0
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_181():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    int_0 = 444
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bytes_0 = b"\xa9\xe0\x1f\r\x8fwbb\xa4\xc4\xec^T \\\x93\x17\xcaB\xe1"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    float_0 = 2008.54
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    int_0 = 3045
    set_0 = {int_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_189():
    complex_0 = -571.328077 + 3378.29531j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    str_0 = "<_}"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    complex_0 = 623.5 + 225.84j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    int_0 = 700
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_195():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    int_0 = 50
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    float_0 = 1339.5
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bytes_0 = b"\x9d\x81\x9c\x87\xc6\x8c\xc9\xca\xd2\xf0\x0f\xfch\t\xd4\x94^\xac"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_201():
    int_0 = 1505
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = -890
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    float_0 = 1828.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    str_0 = "yHNM$h|N*"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    int_0 = -2533
    list_0 = [int_0]
    tuple_0 = (list_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    int_0 = -85
    list_0 = [int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    int_0 = -900
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    bytes_0 = b"\xc4"
    module_0.Runner(bytes_0)


def test_case_210():
    pass


@pytest.mark.xfail(strict=True)
def test_case_211():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_212():
    bytes_0 = b"\x9b\xf1\x8a\xbf\xffv\xcb\t\xa5\xecG\xb7t\xbe\xdd\xe9\x9a\xa7;"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    int_0 = 0
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_215():
    float_0 = -883.0
    module_0.Runner(float_0)


def test_case_216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_217():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "v"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    int_0 = 0
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_225():
    str_0 = "bOy\x0cf=tincPv"
    dict_0 = {str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_229():
    bool_0 = False
    float_0 = -159.0798
    bytes_0 = b""
    tuple_0 = (bool_0, float_0, bytes_0)
    bool_1 = False
    list_0 = [tuple_0, tuple_0, bool_1]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    float_0 = -4389.6102
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    float_0 = 2291.5482
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bytes_0 = b"\x1e'h\x82:\x85HzPJ\xc2\xe7\xacp\xc1\xe8\x7f"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"\xf2v\xbf$\x18\x9c\x92\xa4\x17\nA"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_237():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = "S6AR$/2^%QeU\x0c/"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_240():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    str_0 = "__main__"
    dict_0 = {str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    bytes_0 = b"\x19\xd9\x92"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_246():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_250():
    bytes_0 = b"j\x84f\x82.[%\n"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bytes_0 = b"\x8cW\x8a\x1f\xa2z\x7fy\xf6\x8eZ\xb1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = "hyRmeL]o"
    tuple_0 = (str_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    int_0 = 237
    bytes_0 = b'\x8f"\x1c'
    dict_0 = {int_0: int_0, int_0: int_0, bytes_0: int_0, bytes_0: bytes_0}
    dict_1 = {int_0: int_0, int_0: dict_0, bytes_0: bytes_0}
    module_0.print_exception(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bytes_0 = b"\xce^N\x15\xb0\xdc\x15"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_256():
    bool_0 = True
    bytes_0 = b"\xc0/\xe5ZTI\x16`5\xe4p\xc5s\x9d/`\xfaY"
    str_0 = 'H)}4 X+"$c9'
    tuple_0 = (bool_0, bytes_0, str_0, bool_0)
    tuple_1 = (tuple_0, str_0, tuple_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_257():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_258():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    float_0 = 10000000000.0
    str_0 = "J/{p"
    int_0 = -3821
    tuple_0 = (str_0, str_0, int_0, int_0)
    tuple_1 = (float_0, tuple_0)
    module_0.Runner(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_263():
    float_0 = -1393.247785
    module_0.print_exception(float_0)


def test_case_264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_265():
    float_0 = 10000000000.0
    list_0 = []
    tuple_0 = (float_0, list_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    float_0 = 704.1754
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    str_0 = "7>\\fMT+N J@"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_269():
    int_0 = -746
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    str_0 = "#e*h]=[ylm"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_275():
    str_0 = "qSdwbu5lRk"
    dict_0 = {str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bytes_0 = b"u\xb2\xf3\xf6C\x186%"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_280():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_281():
    complex_0 = 2690.66 + 463.549j
    tuple_0 = ()
    tuple_1 = (complex_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_282():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    int_0 = -675
    bool_0 = False
    tuple_0 = (int_0, bool_0, bool_0)
    set_0 = set()
    list_0 = [tuple_0, set_0, tuple_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bytes_0 = b"x\xd4s"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    int_0 = 5000
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    str_0 = "L:k,fFP0}"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_288():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_289():
    bytes_0 = b"k\xc9^\xf9@\x89\x03$T%|\x85,"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = "Wk9"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    complex_0 = 2630.1539 - 2681j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    float_0 = -1356.9
    module_0.print_exception(float_0)


def test_case_295():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bool_0 = True
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_298():
    complex_0 = 49.32 - 1233j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    object_0 = module_1.object()
    str_0 = "jwSY$-?_yz+x$(#"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    int_0 = -3112
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    str_0 = "pp\x0cYl(0\\uTp:Y0 1PFu\x0b"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_304():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\x9f\x03*\xc8\x87\xa7V\x87\xcd]\x982\xe9Y"
    tuple_0 = (set_0, bytes_0, bool_0, bytes_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    int_0 = 5
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_310():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_311():
    float_0 = -883.776401
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    int_0 = 2184
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = "p\\&WrV%RvH"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_315():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_316():
    bytes_0 = b"\xf7\xc0\xbb\xe8}\x98\xdf\x1c"
    module_0.print_exception(bytes_0)


def test_case_317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_318():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_319():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_320():
    str_0 = "b:30>NH,"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_321():
    str_0 = 's-G#}s`N"es|9HLB'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    complex_0 = -1820.3656 - 2169.7072j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    int_0 = 204
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    float_0 = 419.745
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    str_0 = "$a8IeS}W,T(Npu%ohO08"
    int_0 = 1643
    tuple_0 = (str_0, int_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    module_0.Runner()


def test_case_329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_330():
    bytes_0 = b"\x13\xd8gP\t\xe0\xfeQ\x98g\xb9\xdb\xde[_\x04\x1a5\xef\x84"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_332():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_334():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    str_0 = "7W@;t)g+5"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_338():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_339():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_341():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_342():
    str_0 = "08-r~xQ:Z%*'aIJ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    str_0 = "mrrunner"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = "h{ ?Kt%Ak3~Y~ci"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    int_0 = -1813
    module_0.print_exception(int_0)


def test_case_350():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_351():
    int_0 = -1792
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    int_0 = 705
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bytes_0 = b"\x1c`u\x10\xf7\xa8\xe2\x17\xf7\xbb\xfd"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_355():
    int_0 = -611
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_358():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_359():
    float_0 = -1055.69
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    complex_0 = 530 - 905.837j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_363():
    int_0 = -1998
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    str_0 = "b#"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    int_0 = 3304
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    module_0.Runner()


def test_case_367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_368():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_370():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.print_exception(set_0)


def test_case_371():
    pass


def test_case_372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_373():
    int_0 = 787
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_375():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_376():
    str_0 = "\x0bn*=%f<<%6d\x0c7"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    int_0 = -5343
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_379():
    float_0 = -736.549725
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bytes_0 = b"l\x87m'\x04\xe6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_383():
    int_0 = 2000
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    module_0.Runner()


def test_case_385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"\x04\xc6\x8c\xe2q"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    bytes_0 = b"c\x1b\xffe\xd2X\xab\x06\x87\xac\xd2\x03\n`\x8b\xdb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    str_0 = "mrrunner"
    tuple_0 = (str_0,)
    bytes_0 = b"\x8c\x02$-^i\x0c\x87\x16n\x8e\xd2\t\xd6\x8b\x8b<yj"
    bool_0 = True
    dict_0 = {bytes_0: tuple_0, tuple_0: bytes_0, bytes_0: str_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, bytes_0, bool_0, dict_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_392():
    str_0 = "0*0&CtH;O"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    int_0 = 1647
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_396():
    int_0 = -4834
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    str_0 = "bP8X;*Nu"
    set_0 = {str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    dict_0 = {}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    int_0 = -1278
    list_0 = [int_0, int_0, int_0, int_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    int_0 = 2050
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    complex_0 = -425.36 - 1266j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    complex_0 = 1406 - 3820.599j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    int_0 = 3306
    module_0.Runner(int_0)


def test_case_405():
    pass


def test_case_406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_407():
    int_0 = 4267
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    str_0 = "S5NA*~7PG"
    str_1 = "?D:JCWVx*0\\wa:W0>U`"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_410():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bytes_0 = b"\x15\xd9L\xf6"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_413():
    int_0 = -1439
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    int_0 = 779
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    str_0 = "}w"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    float_0 = 537.8489
    str_0 = 'r"'
    bool_0 = False
    tuple_0 = (float_0, str_0, str_0, bool_0)
    dict_0 = {float_0: float_0, float_0: float_0, float_0: tuple_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b""
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    tuple_1 = (bytes_0, tuple_0, bool_0, list_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_422():
    dict_0 = {}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bytes_0 = b"\x85t\x9f\x82\xd0w"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    int_0 = 50
    list_0 = [int_0, int_0, int_0]
    module_0.Runner(list_0)


def test_case_427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_428():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_430():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = -1213
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_434():
    module_0.Runner()


def test_case_435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_436():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    int_0 = 2426
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    float_0 = -2093.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bytes_0 = b"\x95\xe7\xbb\xe2\x15\xb3\xe0\x87n\xdf\x7fD\x0bz(A\xf1\xdd\x90"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    float_0 = -926.9907
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, dict_0, float_0]
    list_1 = [dict_0, list_0]
    module_0.Runner(list_1)


@pytest.mark.xfail(strict=True)
def test_case_442():
    bool_0 = True
    bool_1 = True
    dict_0 = {}
    bool_2 = False
    tuple_0 = (bool_0, bool_1, dict_0, bool_2)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_444():
    int_0 = 2984
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bytes_0 = b"\x9c'\x84\xd5\xd3\xc7\xear\xb0\xe0Z\xb0\xd3f\x97\x8b\xd4\x0bY"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_448():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_450():
    bool_0 = False
    bytes_0 = b"\xbf\xe2qO\xf4c3\x8a\xe5(\xbc\xd9\xe6\xb9Y\x97Z\xfd"
    dict_0 = {}
    int_0 = -1005
    int_1 = 50
    tuple_0 = (bytes_0, dict_0, int_0, int_1)
    str_0 = "h\t>"
    tuple_1 = (tuple_0, str_0)
    list_0 = [bool_0, tuple_1, tuple_1, dict_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    str_0 = "LXD-1m\rI.]_H"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = "AB"
    list_0 = [str_0, str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    bytes_0 = b"\xef\xc8\xdd\xd4\xc3\x02\xca\xfb*\xb4\xccy\x9f\xa5\xb6;\x80F"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    int_0 = 2913
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_458():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    float_0 = 3533.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    module_0.Runner(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_462():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_463():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = 1390
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


def test_case_466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_467():
    bytes_0 = b"BWp"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_469():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_471():
    int_0 = 2027
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    complex_0 = -738.956 + 257.653709j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    module_0.Runner()


def test_case_474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_475():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    bytes_0 = b"\xe8#Q8o\xb7\x8d:&\xb3$\x99\xf4\xad\x86y\x12c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    module_0.Runner()


def test_case_478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_479():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_480():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    float_0 = -654.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    float_0 = -1156.02
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_486():
    bool_0 = True
    set_0 = {bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    str_0 = "params"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_489():
    str_0 = "^(jZi('GFHL:DwVU`"
    set_0 = {str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    int_0 = -1056
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.Runner()


def test_case_492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_493():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_495():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "mrrunner"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    int_0 = 2727
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"\xbf\xdf\xf8\r\xddhU;s\xbf\xd3"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_506():
    complex_0 = -996 + 391.8j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_508():
    bytes_0 = b"L\xb7\x83"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    int_0 = 3306
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    none_type_0 = None
    module_0.Runner(none_type_0)


def test_case_511():
    pass


@pytest.mark.xfail(strict=True)
def test_case_512():
    bytes_0 = b"\xe2\x9b\x1e\xb9Q"
    set_0 = {bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    bytes_0 = b"Q\xf4\xc2\x00\xa3\xa8\xdc\xbe\x1a_t\xd7\x04/S\xb60k4"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    str_0 = "A:\rA}Apy :@sKh"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    bytes_0 = b"\xd7|"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    float_0 = -166.3077
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    float_0 = 551.491
    tuple_0 = (float_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    int_0 = -3019
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_523():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    bytes_0 = b"\xbbg\xa5u\xc6\x91\xe3n\x89v\xea\xa8\xe7\xf1K"
    tuple_0 = (bool_0, dict_0, bool_1, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_526():
    int_0 = 1611
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    int_0 = 785
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    float_0 = 1465.82796
    set_0 = {float_0, float_0, float_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_530():
    bytes_0 = b"\xd8\xe7\x92\xaf\x1d\xc0\x9f\xafi\x1a$g\xb2\x00\x1b"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    str_0 = "\n+bxI5xZhRF%*"
    module_0.Runner(str_0)


def test_case_532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_533():
    bytes_0 = b"x"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_537():
    bytes_0 = b"<"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    float_0 = 1289.1
    set_0 = {float_0, float_0, float_0, float_0}
    str_0 = "p5w\x0bhj|]"
    tuple_0 = (float_0, set_0, str_0)
    tuple_1 = (tuple_0,)
    module_0.Runner(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bytes_0 = b"q\xb5\xa4f\x9b\xc3\x1e\xb2P\xd1R\xe3\xb5-G\xb7\x17\xa6+"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"\xb7\x91~\xac\x1b\xc1\xeeO\xa5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    float_0 = -679.6791
    module_0.print_exception(float_0)


def test_case_543():
    pass


@pytest.mark.xfail(strict=True)
def test_case_544():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    none_type_0 = None
    module_0.Runner(none_type_0)


def test_case_546():
    pass


@pytest.mark.xfail(strict=True)
def test_case_547():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_548():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    int_0 = 2203
    tuple_0 = (bool_0, set_0, int_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_551():
    object_0 = module_1.object()
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    int_0 = 21
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    module_0.Runner()


def test_case_556():
    pass


@pytest.mark.xfail(strict=True)
def test_case_557():
    str_0 = "e\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"G\x07Z\xfe\x1dY\xa5\x1c3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    str_0 = "2T)bg"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_561():
    bytes_0 = b"\xd5O\x8b=\xfa\xf6\x91\xf3\xb7\x00\x12"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_563():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    str_0 = "\tQd>[q(4~@9"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    str_0 = "\t|8j6nlJ&"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    bytes_0 = b"\x11\xce\x07\xb6zv\x9c\x9f\xd9\xeaI[\x95c\x8a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    int_0 = 959
    module_0.print_exception(int_0)


def test_case_571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_572():
    str_0 = "\n        Override to perform custom queries.\n\n        Any code here will be formed in the same transaction as the main copy, just prior to copying data.\n        Example use cases include truncating the table or removing all data older than X in the database\n        to keep a rolling window of data available in the table.\n        "
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_574():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_575():
    tuple_0 = ()
    int_0 = -1202
    list_0 = [tuple_0, tuple_0, int_0, int_0]
    module_0.Runner(list_0)


def test_case_576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_577():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_578():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_579():
    int_0 = 21
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    float_0 = -124.93
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    str_0 = "-\tlXld8Q(8\rvo"
    int_0 = 982
    bytes_0 = b"S"
    tuple_0 = (int_0, bytes_0)
    tuple_1 = (str_0, tuple_0, bytes_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_583():
    int_0 = 343
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    str_0 = "e.]f5CT:e!1@+1n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    int_0 = -2029
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_586():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_588():
    str_0 = "1N.1)fPR&ILLk#"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    int_0 = -873
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_591():
    complex_0 = -492 + 1252.821844j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    module_0.Runner()


def test_case_593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b"\xac0V"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = 1509
    set_0 = {int_0}
    list_0 = [set_0, int_0, set_0, set_0]
    module_0.print_exception(list_0)


def test_case_596():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_597():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_598():
    bytes_0 = b"\xdfB\x14\x89\x92\xca\xebE\xc4\xc5'\r\x97"
    module_0.print_exception(bytes_0)


def test_case_599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_600():
    complex_0 = 566.954304 + 2536.60558j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    float_0 = -461.50299
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    float_0 = 1372.988667
    list_0 = [float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bool_0 = False
    set_0 = {bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"J\x91"
    bool_2 = True
    list_0 = [bytes_0, bool_2]
    tuple_0 = (bytes_0, list_0, bytes_0)
    tuple_1 = (bool_0, bool_1, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bytes_0 = b"}\xf3\xfa\xdbmv\xf1\x95\xc9+\xba|\x93\xe0\xba?"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    float_0 = -6471.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    str_0 = "G &fF9qar>2[n$zlj|e"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    int_0 = 8
    object_0 = module_1.object()
    list_0 = [int_0, object_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = -838
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    bytes_0 = b"\xd4ln\xb2\x9e\"\x18a_\xb8U\x96C\x9dL\x93'\x9b,W"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_614():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    complex_0 = 2871.856 - 31.369j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_618():
    bytes_0 = b"G/\x1d\xa1\xce\x9e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_620():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    bytes_0 = b"\xad"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_624():
    str_0 = "L6$dGvRC\nAx"
    str_1 = "~iZv~m"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    int_0 = 0
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    int_0 = 1733
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    int_0 = 100
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_633():
    bytes_0 = b"\x12\xca\xc7\xfa\n2\x90\xd6\ro\x97h\xeaH2\x05\xab\xba"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_636():
    object_0 = module_1.object()
    bytes_0 = b"\xed\x19\xfd\xd8\xa6\x93\xef\xc3+\x8f9\xf2a\xb1\xf4\x80\xc6"
    module_0.print_exception(bytes_0)


def test_case_637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_638():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_642():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    bytes_0 = b"\xf3\x1f\x9a/\xf8\xaf\x13\xe8"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_646():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bytes_0 = b"\xaclr\xa3\xe6\xddU\xf7\x8e\x18\x05,\x94\x8c!z\xba\x85V>"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    str_0 = "/\x0cH45(F"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    str_0 = "_b"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    bytes_0 = b"\xc2\xc1\x91\x1c\x8c\x83\x99I\x8b\xf2E(\x19"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_653():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_655():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    str_0 = "[%s, %s]"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bool_0 = False
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    int_0 = 3459
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    int_0 = -1776
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    str_0 = "5"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    str_0 = "'(;\rB']mG`kG'-cjfFP"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_664():
    bytes_0 = b"\x8f\xb2\xd4me4z\xe6\xa203s\xe6\x81Y(\xb2\x0b"
    set_0 = {bytes_0, bytes_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xc2b\x14\xd4"
    list_0 = [bool_0, set_0, bytes_0, bytes_0]
    tuple_0 = (bool_0, set_0, list_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    str_0 = "+^\n"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    bytes_0 = b"C\r\xb7l\x1c\x9a\xd0\xae\xf6H\xf0\x04\xe4\xa412\x02\xacF\x91"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = -3478
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bytes_0 = b"\x96e\xbfN\x1f\x0c\xdb\xed\xc4\xa2\x88\xf9\x1a\xbfwq\xd4\x13"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    float_0 = -2320.75
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    float_0 = 476.6865
    module_0.print_exception(float_0)


def test_case_676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_677():
    float_0 = -687.3211
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_679():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    bytes_0 = b"\x86%%\xe2\x11\x8eE\x15b\x19\xbd\x8a=\xdb\x12\x8a\xabM"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0, bytes_0, list_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_682():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_683():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    complex_0 = 618 + 864j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_688():
    str_0 = "\tf2q"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    int_0 = 274
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"\xeb\xed\xfd\x1d*\xb4\x04\xa6A\xdb\xcfd\x01\x9d\xbe"
    list_0 = [bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    complex_0 = -2948.113 + 515.2252j
    tuple_0 = (complex_0, complex_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    int_0 = -3766
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_695():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_696():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = 5
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    str_0 = "\n    External task that depends on a Hive table/partition.\n    "
    module_0.print_exception(str_0)


def test_case_701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_702():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_703():
    str_0 = "T4y-R{w"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    str_0 = "QsZ3I(w+8%7*Li^F=,"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    str_0 = "G\r}7c2\t&PWg'k}"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    float_0 = -2208.016471
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    bytes_0 = b"\xc3z$\x16V\xa9\x05f\x81\r\xfb\x89\xab"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_709():
    float_0 = 4281.7623
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    int_0 = -96
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    float_0 = 10000000000.0
    list_0 = [float_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    str_0 = "4i"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = "__main__"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    str_0 = "vH_Mq+!F8XBxTLhl\nE"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_717():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = "hyouE`H<Yd'\n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    float_0 = -442.23627
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_723():
    module_0.Runner()


def test_case_724():
    pass


@pytest.mark.xfail(strict=True)
def test_case_725():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_726():
    bytes_0 = b"\xd7w\x12\xc5\xc1\xf7\xc7\xe8\xdep\x84\x16!\xd0\xce\xf5\x92X7\xf9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    str_0 = "\r"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    int_0 = 1073
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    int_0 = -419
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    str_0 = "EoK?(E\t;\t't^B0"
    module_0.print_exception(str_0)


def test_case_734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_735():
    str_0 = "v@dPQ}M.R),R"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    int_0 = -13
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    int_0 = 4053
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_740():
    module_0.Runner()


def test_case_741():
    pass


@pytest.mark.xfail(strict=True)
def test_case_742():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_743():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    int_0 = 128
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    float_0 = -979.31359
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_747():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_748():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_749():
    bytes_0 = b'+\x08"'
    set_0 = {bytes_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_751():
    bytes_0 = b"\xe87\xbc\xb4\x96?\x9d\x9aKk\xec"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    str_0 = "Q2V"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    int_0 = -679
    float_0 = -2960.0
    tuple_0 = (int_0, float_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    str_0 = "P"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    int_0 = -1806
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = 'Y\t~%T]~"HbXK'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_759():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_761():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_762():
    complex_0 = 116.96 + 2321.102j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    int_0 = 2000
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    str_0 = "mrrunner"
    bool_0 = False
    list_0 = [str_0, bool_0, str_0, str_0]
    bool_1 = True
    tuple_0 = (str_0, list_0, list_0, bool_1)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    int_0 = 2518
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bytes_0 = b'\xbc\xf5\xe2\xb2&\x84#\xee\xa3\xbb\x85"\xf0'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    complex_0 = 2338.22 - 1340.5582j
    module_0.print_exception(complex_0)


def test_case_769():
    pass


def test_case_770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_771():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_772():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = "LFlX$\r"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    int_0 = 1271
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    str_0 = "Done killing all open Redshift sessions for database: %s"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_779():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_780():
    bool_0 = True
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    bytes_0 = b'<)\xa2\xa2\x95"WW:Q:C\xff'
    set_0 = {bytes_0, bytes_0, bytes_0}
    bytes_1 = b"\xc0\xc3~8\xc8@\x8a"
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, set_0, tuple_0, tuple_0)
    bytes_2 = b"3\x11\xdfw\x13\xa2\x03U\x85\x1a\xe9VP\x889\xb5\xb3\x10\x18^"
    tuple_2 = (set_0, bytes_1, tuple_1, bytes_2)
    module_0.print_exception(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_782():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_783():
    bytes_0 = b"x\x00;-0X\x0e=,\xf2\xbb\xcc:"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    complex_0 = -29.44285 - 437.512j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    int_0 = 3306
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_787():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_788():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = 9200
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    float_0 = 2216.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    str_0 = ",y#<6?^5H+{m~:R"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    bytes_0 = b"\xec-mn\xf1\xf0\x84\x8f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = "8YbX25uq"
    str_1 = "4cGx/7"
    dict_0 = {str_0: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    complex_0 = 1975.27779 - 262.59j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_798():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    bytes_0 = b"\x81\xa4_\xf6k\xa3\x8d't\xd9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    str_0 = "iX8Z"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_802():
    object_0 = module_1.object()
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "j\tO\rYMtykt%'_,wv"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_806():
    str_0 = "mrrunner"
    list_0 = [str_0, str_0, str_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    float_0 = 10000000000.0
    set_0 = {float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    int_0 = -1580
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_813():
    bytes_0 = b'\xb7\xc5\r[\x0fw\xc6\xf5\xb7\x89\xa2\xaf\xc4"Z3'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_815():
    int_0 = 24
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bytes_0 = b"\xaaL^"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    str_0 = "9BT%v#cz%9~7/Fv$q"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    float_0 = 1577.1
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    int_0 = 2
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_822():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_823():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"G\xf4\x0f-\x19\x92\xc2\x98\x860\xf6Re\x80B\xed\x1c\x89"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    str_0 = "lE9sCOMv6DaM"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_827():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_829():
    int_0 = 2
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_831():
    module_0.Runner()


def test_case_832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_833():
    str_0 = "EdMi[*`m'\x0bKrC\nW"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_835():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "1N"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -929
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bytes_0 = b"+\xa1$"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_841():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_842():
    bytes_0 = b"\xe8\xd2\rB\x80\xb6\xfd\x82\xb0\x90Y"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_844():
    object_0 = module_1.object()
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "qblcT"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_847():
    str_0 = "\n        Dictionary of parameters that should be set for the Pig job.\n        Ex:\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        "
    list_0 = [str_0, str_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bytes_0 = b"\xd9D%"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    str_0 = "mrrunner"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    int_0 = 192
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    int_0 = 2784
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_855():
    bytes_0 = b"\x80\x9az\x92mj{\xe2Ys\x8a\xb3\x13\x0b\xbd\xc4"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_858():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    bytes_0 = b"\xb2M\x18\x8d\x87\\\xcc\xee\xe85\xc4\xe7"
    module_0.print_exception(bytes_0)


def test_case_860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_861():
    str_0 = "qUt\x0bG'c-"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_865():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    str_0 = "4\\{N"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_868():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = -937
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    float_0 = -1498.385
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b"\xf4\x9c\x08\r\x86j,X\xb9\x85\x94[aU"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_876():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    complex_0 = 2576.8 + 2850.0306j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_881():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = -1327
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_884():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_887():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_889():
    str_0 = "mrrunner"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_891():
    int_0 = 996
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    str_0 = "LF1Y(k)g"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_895():
    bytes_0 = b"r\xbe\x01\xf9\x8e\xb6UA\xf8n\x11_\x13|8\xe2"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_897():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_898():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_899():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = ">qFu>Ij$Qk&*-8"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_903():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"q0\xf9\x99\xe9\nI}\xe1"
    set_0 = {bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_908():
    pass


@pytest.mark.xfail(strict=True)
def test_case_909():
    bytes_0 = b"\x07\xd8\xd6Z\xf2B/\x7fd"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"e\xa4E\xcb\x07\xc2z\x937\t\x12"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    float_0 = 1845.5
    module_0.print_exception(float_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bytes_0 = b"N_\x07\x17y\x9c\x11:\xd2\x05G,"
    module_0.print_exception(bytes_0)


def test_case_916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_917():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_918():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_919():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    str_0 = "'ur+Xv\\-7"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_923():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.Runner(object_1)


@pytest.mark.xfail(strict=True)
def test_case_924():
    str_0 = "__main__"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    str_0 = "\n        Override to return the load path.\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, str_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_927():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_928():
    str_0 = "aby$\n|L"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


def test_case_930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_931():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_932():
    str_0 = "Tv>>7d6a@lC5YX9"
    module_0.print_exception(str_0)


def test_case_933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_934():
    str_0 = "xEKd1,"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bytes_0 = b"F\xfc\x8d\x83\x1a\xbav\xe3\x9a\xb1\x84\x81"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_937():
    int_0 = -4098
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    int_0 = 1741
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    set_0 = set()
    module_0.print_exception(set_0)


def test_case_940():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_941():
    bool_0 = False
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_943():
    none_type_0 = None
    str_0 = "&\x0bu6hgdi[=FDu(*',5/3"
    str_1 = "Fh("
    str_2 = "mrrunner"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_946():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_947():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_948():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_949():
    int_0 = 3619
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    str_0 = "x\x0cSf/BfZ\x0c"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_955():
    float_0 = -541.60658
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    dict_0 = {}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    complex_0 = 1903 - 1476j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_960():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    int_0 = -1045
    list_0 = [int_0]
    module_0.print_exception(list_0)


def test_case_962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_963():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    bytes_0 = b"\x16-\x8b\t\x99\xbc\x9b\x0eW\x9d\xbek9\xd4\xe1#\x0e\\V"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    float_0 = 1693.364
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_967():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_968():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_972():
    int_0 = -1981
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    bytes_0 = b"rn\xf4\xda"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    int_0 = -727
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    float_0 = -4202.7617
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_979():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_981():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = ":V4fp]$"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_984():
    bytes_0 = b"\xd8>"
    module_0.print_exception(bytes_0)


def test_case_985():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_986():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b"\xd1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    complex_0 = -2003.719 - 46j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"\xe0\x93\xf5W\t"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bytes_0 = b"\xdc\xf2\xb9\xd8\xabmX\x91cX\x9fH\xd4\xa3\x86\x84"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    str_0 = "hP{,'KBpRA7~}HR?"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_997():
    int_0 = 3071
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    bytes_0 = b"bI6\xf81\xbdz&\xe37jG5\xd3?"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = 'UUf66"5m%LL'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = 0
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    float_0 = 128.7134
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1004():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1005():
    int_0 = 1095
    module_0.print_exception(int_0)


def test_case_1006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1009():
    float_0 = -188.8
    bytes_0 = b"\xf4\xc3\x8b]pD"
    tuple_0 = (float_0, bytes_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    float_0 = -2255.9
    list_0 = [float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = -246
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1018():
    complex_0 = -1341.346 - 2970.74j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    str_0 = "pCC%\\"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    int_0 = 3206
    str_0 = "C\t#Ji]y;DbaeA%#TtmF"
    str_1 = "\tp9PvaFt4KH"
    dict_0 = {str_0: int_0, str_1: str_1}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    float_0 = -2658.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bytes_0 = b"\xd2\xcd\x8fl=\xccgM\xbfg\x83iOe~"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    int_0 = 21
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "-C"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    float_0 = 96.93
    list_0 = [float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bytes_0 = b"\x1f\xcc@\x16\x18q\x90\xa9\xd8q"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    int_0 = 1557
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    str_0 = "-^[!!Gw\\3T<`$DQt^k'<"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = "l"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


def test_case_1037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1038():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    int_0 = 412
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1041():
    int_0 = 50
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_1 = [list_0, list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    str_0 = "__main__"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    str_0 = "Location:"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b"\x06!\xdd<t\x95\xb1\x0f\x95\xb6\x9am\xc7\xf9\xd6\x83\xc2T\x84\xeb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1053():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    complex_0 = -1626.840189 + 2280.67j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    int_0 = 1384
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    float_0 = 10000000000.0
    list_0 = []
    list_1 = [float_0, list_0]
    str_0 = "`2KjV2RI[~(tGl-wGG@1"
    str_1 = ".|&Um"
    dict_0 = {str_0: list_0, str_0: str_0, str_1: float_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    bytes_0 = b"1v-"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1060():
    str_0 = "<s\ne"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bytes_0 = b"\x9c\xde\xdah\x91"
    module_0.Runner(bytes_0)


def test_case_1062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1063():
    module_0.Runner()


def test_case_1064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = False
    set_0 = {tuple_0, tuple_0, bool_0, bool_1}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "__main__"
    bytes_0 = b"zA\x9d0"
    list_0 = [str_0, str_0, tuple_0, bytes_0]
    tuple_1 = (tuple_0, list_0, bool_0)
    module_0.Runner(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    bytes_0 = b"\x03\xec\xa2#!"
    module_0.print_exception(bytes_0)


def test_case_1068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1069():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    str_0 = "a^1"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    float_0 = -2023.744483
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = "mrrunner"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, str_0]
    list_2 = [list_1, list_1, list_1, list_0]
    module_0.Runner(list_2)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1075():
    int_0 = -2807
    module_0.print_exception(int_0)


def test_case_1076():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1077():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1078():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    object_1 = module_1.object()
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    int_0 = 4203
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bool_0 = False
    int_0 = 1615
    dict_0 = {bool_0: int_0, int_0: int_0, int_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    module_0.Runner()


def test_case_1083():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1084():
    int_0 = 1024
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1086():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bytes_0 = b"\x19\xba\xb0\t\xdb`(<\xb3 \x99K\xe86\x08"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    complex_0 = 1179.72164 + 3812.3928j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    int_0 = 10
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bytes_0 = b"\xad\xa8\xe2\xcd\x85\x8f\xa0Gb\xfc\xcb-\x8d\xe1[8"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1092():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1094():
    int_0 = -3127
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    float_0 = 2665.4235
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    str_0 = 'Z"'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    float_0 = 3376.0
    set_0 = {float_0, float_0}
    module_0.Runner(set_0)


def test_case_1098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1099():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1100():
    str_0 = "22"
    list_0 = [str_0, str_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_1102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1103():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bytes_0 = b"\n\xd2v*\xc8\xd9\xab\xa1\x1f\x14'"
    tuple_0 = (bytes_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1106():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bytes_0 = b"\xc7\xa0\xe1*\xe3Y\xba\xa1O\x88a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1109():
    object_0 = module_1.object()
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1111():
    str_0 = "2cT'Qet.8j^1].{9\rMZ"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    int_0 = 864
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"\x02\xa6\xfc\x03\xc6`uA\r"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bool_0 = False
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1117():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1118():
    int_0 = 8
    bool_0 = True
    tuple_0 = (int_0, bool_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1120():
    str_0 = "__main__"
    module_0.print_exception(str_0)


def test_case_1121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    complex_0 = 983.101737 - 2637.73734j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    str_0 = "5!D"
    tuple_0 = (str_0, str_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    bool_0 = False
    float_0 = 1871.573939
    dict_0 = {bool_0: float_0, bool_0: bool_0, float_0: float_0, float_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    str_0 = "l"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    int_0 = 9200
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bytes_0 = b"B\x04\x0c\x03\x15\xc7\xf1\xd3\xb0\x84\xa9\x9c3t+P\x1f+9>"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    float_0 = -1666.6
    list_0 = [float_0, float_0, float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"L\xcbB)\xc8=\xb2(\xac\xc2\xd3\x88"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    str_0 = "g^Z"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    complex_0 = -2255.94 + 2130.2j
    set_0 = {complex_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1143():
    str_0 = "C=H!9d!"
    module_0.print_exception(str_0)


def test_case_1144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1145():
    bytes_0 = b"\xa0e\xf7$\xde\xe26*\xeb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bytes_0 = b"\xf7\x02*'\x00\xd8\x89\xcb=\xbf\x1d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1149():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    bytes_0 = b"\x8b\xc51\xf7]\xbf\xb9f\xce0\xc3\x10\x0f\xf0T\x13^"
    list_0 = [bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    int_0 = 1495
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1155():
    str_0 = "2%x5|8V@"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1157():
    int_0 = 776
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1159():
    str_0 = "z5\r5?\n4p49mfh\x0b;;ehl"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    float_0 = 4256.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1168():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


def test_case_1171():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1172():
    float_0 = 191.14012
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    complex_0 = -2397.92445 - 3023.72j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1175():
    str_0 = ""
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    int_0 = 1138
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = "__main__"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    int_0 = -996
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "?q\\ByzozF"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    str_0 = "9\r"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"\x1c4\x14\xc6\xe8W\xec[\x95,\x00\xea7\xf9\xfc_\x02\x7f\xb0"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bytes_0 = b"\x03\xea\x95\xd4?\xa7\x001\xee\xf6fz\x8a\xa0\x90\xae0_"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1187():
    bytes_0 = b"\x97\xb3\xbb\xcb\xefkj"
    list_0 = [bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    float_0 = 1458.5
    tuple_0 = (float_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    list_0 = []
    str_0 = "YW 'S"
    str_1 = "%J=/`ND jHN"
    dict_0 = {str_0: list_0, str_1: str_0, str_0: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bytes_0 = b"\x96\xe37\xc9*\xb2p\xc4\xe6/\x9d\xb4g"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    float_0 = -1113.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    float_0 = 2960.617
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1196():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = 2009
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1199():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1201():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    int_0 = 2745
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    module_0.Runner()


def test_case_1204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1205():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1206():
    int_0 = 704
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bytes_0 = b"\x1f\x16\xb0\xb2q\xddB\x16"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    float_0 = 528.55717
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1214():
    int_0 = 616
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    bytes_0 = b"\xad\xa0\x9a\xd9\xdb\xcc\x85\xa6\xf3"
    module_0.print_exception(bytes_0)


def test_case_1216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1217():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bytes_0 = b"\x1fx}\x15\x9e"
    module_0.print_exception(bytes_0)


def test_case_1219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = -897
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1222():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1223():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1226():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = True
    list_0 = [bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    int_0 = 269
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1233():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1234():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1236():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1237():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    str_0 = "E#"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    float_0 = -4095.419
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    str_0 = "scalding-core-"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1243():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    str_0 = "rl<N\\hh"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    complex_0 = -593.3139 - 1562.94975j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bool_0 = True
    int_0 = -2095
    tuple_0 = (bool_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1248():
    str_0 = "#\x0cZCZ\ri"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1250():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1251():
    float_0 = -3056.7
    list_0 = [float_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1254():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1256():
    complex_0 = -5363.681 - 163.157j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bytes_0 = b"\xa0\xfe\x9bx\xf6"
    module_0.print_exception(bytes_0)


def test_case_1259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1260():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_1262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = 3229
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1265():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1266():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    set_0 = set()
    tuple_0 = (dict_0, list_0, set_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    complex_0 = -1422.6015 + 946.20248j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    int_0 = 2000
    module_0.Runner(int_0)


def test_case_1270():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1271():
    bytes_0 = b"q\xe0a(\xc9\xbd\xa4\x1b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1273():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bytes_0 = b"\x8b\xab\xdc\xa9\xa5e\x1a\xb1\x1ey\x12D\xf58"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1276():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1277():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1278():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\x00_"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    int_0 = 345
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1285():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    str_0 = ">+U2EFZy]\\\rX/"
    set_0 = {str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1288():
    bytes_0 = b"\x1d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1290():
    str_0 = "mrrunner"
    set_0 = {str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    int_0 = 2654
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    float_0 = -548.06681
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    bool_0 = False
    str_0 = "L[AjRZs<g6PuMQ7El\\5"
    bytes_0 = b" \xd5f\x87g\xf7P\xfb\xee\xe8*"
    tuple_0 = (bool_0, str_0, bytes_0, bool_0)
    list_0 = [tuple_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    str_0 = "__main__"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    float_0 = 742.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    object_0 = module_1.object()
    tuple_0 = ()
    dict_0 = {}
    bool_0 = True
    list_0 = [bool_0, dict_0, object_0]
    tuple_1 = (object_0, tuple_0, dict_0, list_0)
    module_0.print_exception(tuple_1)


def test_case_1300():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1301():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = 1024
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0, bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bytes_0 = b"\x1a\xf3\xaf\xe0'\x00\xc1y\xef"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    float_0 = 4268.678
    module_0.print_exception(float_0)


def test_case_1308():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1309():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    str_0 = "Z{c3~OglL\nMKe\n"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    int_0 = -187
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    float_0 = 4550.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1316():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1318():
    float_0 = 10000000000.0
    dict_0 = {float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    str_0 = "Truncating table %s"
    str_1 = "=s'l71p\t1YG2"
    str_2 = "{2]u !!ej"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    str_0 = "+r+"
    str_1 = "3[R\\\n4\\b|chBIOePU@"
    str_2 = "mrrunner"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bool_0 = True
    list_0 = [bool_0]
    module_0.print_exception(list_0)


def test_case_1322():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1323():
    int_0 = -1210
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bytes_0 = b"7\xf9\x907\x19t\x0f6[\x93r\xb3\xb8\x93W\xa5\xd0\xd1\xe5\xa5"
    set_0 = set()
    bool_0 = False
    tuple_0 = (bytes_0, set_0, bytes_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    int_0 = 4320
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    set_0 = set()
    list_0 = [set_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    str_0 = "NIVw\r* \"|:'u0"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    int_0 = 610
    set_0 = {int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    dict_0 = {}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    float_0 = 3286.469
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    str_0 = "__main__"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    float_0 = 1698.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


def test_case_1338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1339():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1340():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1341():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1342():
    int_0 = 1556
    list_0 = [int_0, int_0, int_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = 1135
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"\xe5W"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    str_0 = "\n    Task to run a hive query.\n    "
    set_0 = {str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "target_index"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1349():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "+]{n'o<a_4}pQC"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.Runner(set_0)


def test_case_1352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1353():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1354():
    int_0 = 2845
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1356():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1357():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1358():
    str_0 = "5lxtO5\x0bWom#[d/`a"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    int_0 = 8
    list_0 = [int_0, int_0]
    tuple_0 = (list_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1361():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1362():
    str_0 = ";F2Q~.'G9=uK"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    str_0 = "asHQxR=l.CA"
    module_0.print_exception(str_0)


def test_case_1364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    int_0 = 1162
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    float_0 = 10000000000.0
    set_0 = {float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bytes_0 = b""
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"k'm"
    module_0.print_exception(bytes_0)


def test_case_1370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1371():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    str_0 = "k4CH.\tB\t;eAU;4 a;)a"
    int_0 = 0
    set_0 = {str_0, str_0, int_0, int_0}
    float_0 = 10000000000.0
    dict_0 = {str_0: set_0, str_0: set_0, int_0: int_0, float_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    int_0 = -592
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bool_0 = False
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = 2316
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = "m[W228"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1384():
    int_0 = 21
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1388():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1392():
    dict_0 = {}
    module_0.print_exception(dict_0)


def test_case_1393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1394():
    module_0.Runner()


def test_case_1395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1396():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"\xf4\x17},8\x9cP8lp\xd3cke\xff"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    str_0 = "H2dniEpB+8\x0bxE*kx1lL"
    bool_0 = False
    tuple_0 = (str_0, bool_0, str_0)
    module_0.Runner(tuple_0)


def test_case_1400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1401():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    int_0 = 10
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = -1410
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1406():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bytes_0 = b"\xeb\x81\x82\xf8\xc1l'\xa4\xe2\xef\xfd\x92\x8b\xc4\xfb\xd70\x84\xb8"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    str_0 = '5mJ"JVt^G>'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    module_0.Runner()


def test_case_1411():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1412():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1414():
    str_0 = " 2O{Sn&"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1416():
    int_0 = 2
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1418():
    bytes_0 = b"\xa8\xf8|\x87*?bLp\x8c\x030\xf9"
    set_0 = {bytes_0}
    module_0.print_exception(set_0)


def test_case_1419():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1420():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1424():
    tuple_0 = ()
    int_0 = -182
    list_0 = [tuple_0, tuple_0, tuple_0, int_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bytes_0 = b"\xce\x7f\xba\xd6\x9eQ#\xcc\xb4\xba/E\x9b\xbb\xd8\xd9\xf8\xfa\xf0\x1b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = "'TEw]d87(~Q[v"
    str_1 = "`dIG8"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    int_0 = 2391
    bool_0 = False
    bool_1 = False
    str_0 = " Qc:lQ)p\\\rAP"
    tuple_0 = (int_0, bool_0, bool_1, str_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    str_0 = ".2`]=\x0cPF#6Q{KK8Gg"
    set_0 = {str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    str_0 = "\\S"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    float_0 = -4568.72
    list_0 = [float_0, float_0, float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1433():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1434():
    str_0 = "Gy\rK3cxr"
    str_1 = "mrrunner"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    int_0 = 423
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1439():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    complex_0 = -399 - 655.3666j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    int_0 = -1225
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = -1176
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, object_0: int_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1448():
    int_0 = 8
    bytes_0 = b"\xb1\r1Jt"
    dict_0 = {int_0: int_0}
    tuple_0 = (bytes_0, dict_0)
    tuple_1 = (int_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bytes_0 = b"\xcd\xcd\xea\xff\xc1!S\x98\x9fs\x1f\xf5\xad#"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1452():
    float_0 = -852.49
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    object_0 = module_1.object()
    int_0 = 811
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    int_0 = -1416
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = -1109
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = 489
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = -2059
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0, dict_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1460():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    int_0 = -2751
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = "`\r}~kZ[Zx@V.TMmv"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    tuple_0 = ()
    str_0 = "9/bF\\9"
    dict_0 = {}
    float_0 = 37.47335
    tuple_1 = (tuple_0, str_0, dict_0, float_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    bytes_0 = b"0T\xb7"
    int_0 = -377
    dict_0 = {bytes_0: bytes_0, int_0: int_0, bytes_0: bytes_0, bytes_0: int_0}
    tuple_0 = (bytes_0, dict_0, bytes_0, int_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1473():
    str_0 = "hUb1<z)(jjvxT?<DX"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Runner(dict_0)


def test_case_1474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    str_0 = "__main__"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bytes_0 = b"\xfdX\x8a\x13pu\xfb\x04\xd8\xb6b\xc9\xa39\x1eHm"
    bool_0 = False
    bool_1 = True
    list_0 = [bytes_0, bytes_0, bool_1]
    int_0 = 4
    tuple_0 = (bytes_0, bool_0, list_0, int_0)
    list_1 = [tuple_0, bool_0, bytes_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_1]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    float_0 = -12.769
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -2195
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bytes_0 = b"\x0b\x94\x12\xe4^\xb7\xb7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    float_0 = 1527.83
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bytes_0 = b'\x94\xb7K2\x92\xbc\xc3q\xcd\x1d\x9b4g\xee+"]'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bool_0 = True
    str_0 = ">@sEQdtF8"
    tuple_0 = (bool_0, str_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    str_0 = "0JenqCUY^b%"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = 2985
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b'\xb3x\x13XD\xae\x96\xc0~\xc4\xcd\xf6\xfa\xa9"n\\\xa4n#'
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    str_0 = ":$2(=l\nqq4\x0bqZ"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1497():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1500():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1502():
    int_0 = 2023
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1504():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = -266
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1507():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    float_0 = 2563.1
    list_0 = [float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    int_0 = -458
    set_0 = {int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bytes_0 = b"h\x0e\xb9\xdb\x01\xa4H\x1a$\xd6\x18"
    tuple_0 = (bytes_0, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1516():
    float_0 = -164.536795
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1519():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1520():
    module_0.Runner()


def test_case_1521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1522():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bytes_0 = b"~\xaa\xd2\x11\x1c\xbe\xbc\x91i\x03\xe0\x81\x86\xbal\xad9\x08\x8b\xf3"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    int_0 = 1202
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bytes_0 = b"\x97\x0c\x1f@\x1d\x9c!@\x1e"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    module_0.Runner()


def test_case_1533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1534():
    float_0 = -256.3459
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1536():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    complex_0 = 309.3 + 2213.279312j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bytes_0 = b"\xe0\xea\x94\xdd?[\x07\xdc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bytes_0 = b"\x87K"
    set_0 = {bytes_0}
    bool_0 = True
    str_0 = "_1;sdcN \t+Ypo&\x0c"
    tuple_0 = (bytes_0, set_0, bool_0, str_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bytes_0 = b"\xfd\x924\x031\x7f\xb4u\xf8P\x03$"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1543():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bytes_0 = b"\xab>;^\xcc\x9e\x0f\x02\x90\x05\x91n\x93"
    module_0.Runner(bytes_0)


def test_case_1545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bytes_0 = b"\xe3j\xb2\xb8\xe4\xf8\xe4e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    complex_0 = -2051.3226 - 795.3354j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.print_exception(set_0)


def test_case_1549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1550():
    complex_0 = 2172.377 + 1642.25401j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1552():
    int_0 = 24
    int_1 = 347
    tuple_0 = (int_0, int_0, int_1)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1554():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1555():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = '/w\t}Po>+%GuO"D64,V'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b"\xd0\xc4C^\xb4+n\xe2\xdb]\x88"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1562():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bytes_0 = b"1AI\xdf\xc7\x8e\xcf\x8a\x81{\x0bN\x8b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = -749
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    int_0 = -760
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    int_0 = 2717
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1579():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bytes_0 = b"\xc3s.S\xa0g\xb7\xe5Q\x1b\xe6P=\xaf\x1dw0\xfb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1582():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bytes_0 = b"]S\xaa$"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    bytes_0 = b"\xb3}\xb7\xe2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    int_0 = -2801
    list_0 = [int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1591():
    str_0 = "-,"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "aJsl?PM_@t9"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    int_0 = -1690
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = "\n        Returns an array of args to pass to the job.\n        "
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1600():
    int_0 = -2317
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bytes_0 = b"\x06\tH\xe3\x02"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bytes_0 = b"\xe2\xef|:\xf4\xe6\xbf9\x06\xb9"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1605():
    module_0.Runner()


def test_case_1606():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    str_0 = "\r7p?KQR_}p"
    set_0 = {str_0, str_0, str_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    int_0 = -2341
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    int_0 = 1618
    module_0.print_exception(int_0)


def test_case_1611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1612():
    object_0 = module_1.object()
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bytes_0 = b"\xf2<\x04\n\xf7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    complex_0 = -4286.88719 - 321.348j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1618():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    int_0 = 2704
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = 3365
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    complex_0 = -3410.117 + 851.8j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bytes_0 = b"\xfd\x9c\xd6\xd2\xf0`\x0fT"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    int_0 = -2324
    module_0.print_exception(int_0)


def test_case_1625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1626():
    complex_0 = -201.903 + 2404.9j
    int_0 = -2088
    set_0 = {complex_0, complex_0, complex_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1628():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1629():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1630():
    float_0 = -804.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    str_0 = "s(_H^>`0]S&e2mr"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "sdoT\rN20eG03jcQ:9"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bytes_0 = b"\xdb\xa2y\x8b\xa8\xef+\xeb\x89\x84\xacb\xb2\xa6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1637():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bytes_0 = b"b\x87\x9b\xe4/95\x01\xa9\x94^\x17\xef\x9fB\x8b0\xc8"
    dict_0 = {bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b"\xe1\xde\xfbD\x1at,`\xa1\x9d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bytes_0 = b",l\x10T\x08\x13\x08"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1647():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1649():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bytes_0 = b"r\x819g\x9d*Z\xb7\xeb"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1652():
    int_0 = -2896
    set_0 = {int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1654():
    float_0 = 988.2
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1656():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    int_0 = -2022
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    int_0 = 512
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    complex_0 = 12.4 - 2776j
    list_0 = [complex_0, complex_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1663():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1665():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1666():
    int_0 = 2731
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1669():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1670():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1671():
    module_0.Runner()


def test_case_1672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1673():
    str_0 = ";l4LYdm5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"]eI\t\x85\xe8\x05\xdf\x02\xdf\xa9\xa8C\x07\xf5\xb6e\xfe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = -1186
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1677():
    str_0 = "y"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    int_0 = 4542
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1681():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1682():
    int_0 = -631
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    int_0 = 131
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bytes_0 = b"\x8a\xa5\x07\xc2\x1b!vS\x9d<\x1f\xd2\x83h"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bytes_0 = b"\x10\xcf\xa5\x1c\xf4\xda\x01\xc7|\xf5\xc9.\xe1\xe4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 507
    tuple_0 = (dict_0, int_0, dict_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1687():
    str_0 = "~teA3CN"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1689():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bytes_0 = b"]k\xceY\xef"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    float_0 = 1447.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bytes_0 = b"\xe2\x10\xecU"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    complex_0 = 254.816865 - 628.4097j
    complex_1 = -1125.088 - 747.471401j
    dict_0 = {complex_0: complex_0, complex_1: complex_1, complex_0: complex_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, object_0, list_0]
    list_2 = [list_1, object_0]
    module_0.print_exception(list_2)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    complex_0 = 541.9 - 6517.1j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = -2368
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1699():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bytes_0 = b"\xdfY\x18@"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = 450
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    module_0.Runner()


def test_case_1704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1705():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "8:H"
    str_1 = "I$n}xo,5q)ifC`N;"
    str_2 = "iq@"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    str_0 = 'e"_\\'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1710():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1711():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1712():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = 'lBU" 1}_p,">Z'
    str_1 = "n;\x0bI4C=]5"
    str_2 = "vyiL&Kbdwo(+71+"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1715():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1717():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1718():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1719():
    complex_0 = -798.92247 + 4781.0823j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    int_0 = 1
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    float_0 = 1844.613
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1725():
    int_0 = 2587
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bytes_0 = b"\xc0Uk\xcc"
    list_0 = [bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"\x92\xe2\x16\xa9\xe9\xef\x92$"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "I.#'4-Oet#y^l"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bytes_0 = b"RD6g%\x02_\x03\xa0\xcf\xed]\x00\xc2\xbc\x8c\xf7\x8eF"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    int_0 = 2957
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    int_0 = 436
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    float_0 = 1970.79
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    int_0 = -80
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"\xf4\x8f"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    int_0 = -247
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    str_0 = "?^%xOxenVb<WKjX:D_x"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    complex_0 = -1843.91329 + 1482.329375j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"\n PR8=\xfe\xe2\x9a\x1f"
    module_0.print_exception(bytes_0)


def test_case_1750():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bytes_0 = b"Mi\x93\xef6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bytes_0 = b"c8\xf80\xf6\x01\xbdP'In60\xf5K\xf8"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    float_0 = -312.221449
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    complex_0 = -2426.589 + 4149j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    str_0 = ",o!V\r1)epijj1M"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    int_0 = -83
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    int_0 = -4814
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1759():
    float_0 = 1666.87
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1761():
    float_0 = 1482.645
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bytes_0 = b"s\x13u\x91Y\xd1s0\x08\x9a\xc16\x95X\x1b\xdcs1"
    module_0.print_exception(bytes_0)


def test_case_1765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1766():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1767():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1768():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1769():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1770():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1771():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1773():
    str_0 = "\n6 "
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    int_0 = 1690
    set_0 = {int_0}
    module_0.print_exception(set_0)


def test_case_1776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1777():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "mM},\x0c?@'18c*|L\x0cfXA"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_1781():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1782():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1783():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    complex_0 = -2708.7782 - 1490.68851j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1787():
    int_0 = -1881
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = "flt|/*\x0c|V^p\\<Xz@q"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = 93
    module_0.print_exception(int_0)


def test_case_1790():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1791():
    int_0 = -1115
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = "R*BW3F:0Vbub-BKRG"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1795():
    str_0 = "Q!0R)?{dV*ayfR"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bytes_0 = b"\xa3\x1b\xdc\xc5\xea\x99R\xecy9e)\xcfV\xe1\x1d"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    str_0 = "_6Xdd\x0c"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    float_0 = 1394.528506
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "k}\x0b-,V"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1804():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "E\x0cDv/|\x0b~]"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    bytes_0 = b"\xae\xb6\xe8\xacJ<\xf9\xa4w"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1812():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1813():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    str_0 = "k#JM =|"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bytes_0 = b"a\xae/\x1e\x06\xc1\x08\xaa'\xaf\x7f"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    str_0 = ")*_B19P?QRv]t"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    complex_0 = -2040.2643 + 257j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bytes_0 = b"\xd5\x8fx5\xae\r\xd7]\xa9\xc8\x11J\x06V;uLY\xc9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    bytes_0 = b'\x11\x02G\xe87\x11\x98|\x06L\x84\x97]^"\xaf\x99\xb8'
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1827():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = -4107
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    int_0 = 100
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bytes_0 = b"\x04\x9e\xdb\xa2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1834():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bytes_0 = b"\xb1\x87\x8a\x04"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1837():
    complex_0 = -4415.28 + 1312.58636j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    float_0 = 2456.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    int_0 = -410
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"\x1b\x92\xa3\x04\x0f\xe0\xc4\x1fx"
    set_0 = {bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bytes_0 = b"2<y\xc7H\xb8%\x01\xf1\x120"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    float_0 = 10000000000.0
    dict_0 = {}
    tuple_0 = (float_0, dict_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    int_0 = 1068
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    complex_0 = 904.0904 + 528.883j
    dict_0 = {complex_0: complex_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    int_0 = -2116
    module_0.print_exception(int_0)


def test_case_1853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1854():
    int_0 = -4378
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    float_0 = 2321.618834
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    str_0 = "|}T&l"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b"tq\xd4\xc9\xfb\x813\xbeI8\x17\x1du\xdc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1859():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1860():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1861():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    bytes_0 = b"\xe5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    int_0 = -1337
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    int_0 = -3256
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bool_0 = True
    list_0 = [bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    module_0.Runner()


def test_case_1869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1870():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    float_0 = -836.69316
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bool_0 = False
    list_0 = [bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    float_0 = -204.5
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1879():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1880():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1881():
    float_0 = 551.81854
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    str_0 = "yF@%q"
    str_1 = "open() is not supported for HivePartitionTarget"
    str_2 = "J/tZJ:Y#+sq'9&jQjn"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    int_0 = 4
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1886():
    complex_0 = 299.838946 + 913.487146j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1889():
    str_0 = "3"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    float_0 = -2444.77
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bytes_0 = b"'\x1c\xa1\xea\xcfD2"
    module_0.print_exception(bytes_0)


def test_case_1892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1893():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = 340
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, set_0)
    list_0 = [bool_0, set_0, tuple_0]
    tuple_1 = (bool_0, tuple_0, list_0)
    module_0.Runner(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    str_0 = "PGeJFM%'m}en\nO"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    module_0.print_exception(list_1)


def test_case_1897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1898():
    complex_0 = -258.33 + 2944j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    str_0 = "scp"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1901():
    float_0 = 426.7
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    complex_0 = -52.87289 - 372.925695j
    str_0 = "QQ]?L|@691$ZK;x<C>A"
    bytes_0 = b"\xe7\x99a]\xa7\xc4\x87c\x92\xab@\x0f\xe2M"
    tuple_0 = (complex_0, str_0, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    int_0 = 3067
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bytes_0 = b"I\xca\xf8\x145\xb6;\xa6E\x88\xc9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    complex_0 = -924.3 - 1226.17j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1907():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = -2664
    module_0.Runner(int_0)


def test_case_1909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1910():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1911():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    complex_0 = -3926.073 - 4913.7j
    set_0 = {complex_0, complex_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    str_0 = "b&\x0bY|@`_e1|Fg]xb"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    int_0 = -2101
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    float_0 = 642.12687
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    none_type_0 = None
    module_0.Runner(none_type_0)


def test_case_1917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1918():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bytes_0 = b"\xc2>8\xb8\xfa\x04\xd1\x90\xd2\x11\n"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    str_0 = 'g2X"\n`.@=vsfqCzQ5'
    list_0 = [str_0, str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1923():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bytes_0 = b"\x1a\xb1\xd5\xa9\xbd)\x83\x96\xba!\x07\x1b>"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_1927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1928():
    int_0 = -730
    module_0.Runner(int_0)


def test_case_1929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1930():
    str_0 = ":a*2B7AMO&z"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    float_0 = -860.9
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    str_0 = "{aoZ14M,iH9"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1934():
    str_0 = "}"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bytes_0 = b"%i{\x07Sd \x13\xb9\xcePF\xe3\x8c\xa2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bytes_0 = b"\x98\xc0\xcd\x0e\xe0"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1938():
    int_0 = 127
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    int_0 = 5
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    float_0 = -2359.906
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    int_0 = 5000
    bool_0 = False
    bytes_0 = b"@\xb6\xb1\x9d\xc4r\x02<\x1c\xf7\xcf\xbfr\x99\xe0R\xc4"
    tuple_0 = (int_0, bool_0, bytes_0, int_0)
    dict_0 = {tuple_0: tuple_0, int_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    bytes_0 = b"\xdfi"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = -146
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    int_0 = -321
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    int_0 = -77
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = -455
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1950():
    float_0 = 1387.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1952():
    int_0 = 1549
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    str_0 = "zUu{a2"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    float_0 = -1479.08832
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1956():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    int_0 = 3726
    bytes_0 = b"\x9d\xc1`\x14e-\x1b\xe6\xcd"
    list_0 = [bytes_0, int_0, bytes_0, bytes_0]
    tuple_0 = (int_0, bytes_0, list_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = 24
    tuple_0 = (set_0, int_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1960():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1961():
    int_0 = 408
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    bytes_0 = b"Xs\x88<"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    float_0 = -1587.0
    set_0 = {float_0, float_0, float_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    int_0 = -4988
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bytes_0 = b"%\xedw\x8c\x14\x89\xa7\x13\x0c\xd9c\x9e\xdb\x81\x96\xce\xc2\x0e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    module_0.Runner()


def test_case_1971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1972():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    complex_0 = 1228.35225 + 633.21j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    str_0 = ":op<d:t"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    tuple_0 = ()
    int_0 = 650
    str_0 = "yp3s9r5A-Hna"
    tuple_1 = (tuple_0, int_0, str_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    int_0 = 5000
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1980():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bytes_0 = b"\xda\xb9"
    list_0 = [bytes_0]
    str_0 = "J7*K{MeL`"
    float_0 = 10000000000.0
    str_1 = "("
    str_2 = "["
    dict_0 = {str_0: float_0, str_1: float_0, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    module_0.Runner()


def test_case_1983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1984():
    bool_0 = True
    str_0 = "-.#"
    int_0 = 1196
    set_0 = {bool_0, int_0, bool_0}
    tuple_0 = (bool_0, str_0, set_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    str_0 = ")8R/J;vl\x0b&v\nRBU~"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_1987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1988():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1990():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1991():
    object_0 = module_1.object()
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_1992():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1993():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1994():
    float_0 = -890.781
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = 4
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    int_0 = 1
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    object_0 = module_1.object()
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    module_0.Runner()


def test_case_2001():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2002():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2003():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2004():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2005():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2006():
    int_0 = -2311
    module_0.Runner(int_0)


def test_case_2007():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "E>x-"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2011():
    int_0 = 484
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2013():
    complex_0 = -3417 - 1868j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2015():
    object_0 = module_1.object()
    complex_0 = -1538.7 - 1542.98j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bytes_0 = b"\xe7\xf2\x07Q(\xd1\xf9\xfe\x92"
    set_0 = {bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    str_0 = "ZSEPK"
    dict_0 = {}
    complex_0 = -2305 + 2759.2j
    tuple_0 = (str_0, str_0, dict_0, complex_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    str_0 = "S\x0c'aLH0xmO:O"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    int_0 = -2245
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    int_0 = 2359
    float_0 = -2705.53
    dict_0 = {int_0: int_0, int_0: float_0, float_0: int_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bytes_0 = b"\xdaG\x06\x03\xc7\xa9\x18\xb6#D\x83\xf2\x89\xf0\x12\xdc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    str_0 = "}M{aSd:vZ wfx8\nR?D"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    str_0 = "Uc/tukM6<"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2026():
    tuple_0 = ()
    bool_0 = True
    str_0 = "__main__"
    tuple_1 = (tuple_0, bool_0, str_0, bool_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    str_0 = "3.z$PT"
    list_0 = [str_0, str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bytes_0 = b"!W=\x94Zc\xa2c\x02\xc6\x8d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    float_0 = -1249.3
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2032():
    str_0 = "mrrunner"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2035():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = -2769
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bytes_0 = b"VB\x86\xf4/\x9flW"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    module_0.Runner()


def test_case_2041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2042():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\xbbi\xed\xb9Y"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2047():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    str_0 = ")5g?.\\+"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    module_0.Runner()


def test_case_2050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bytes_0 = b"\xbcV\x17"
    module_0.print_exception(bytes_0)


def test_case_2052():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2053():
    str_0 = "|7"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    complex_0 = 2856 - 947j
    list_0 = [complex_0, complex_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2056():
    complex_0 = -245.497 + 2127.6601j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    bytes_0 = b"F\xdb\x0f\x0f\x9e\x8c\xf8\x81p?*\xae6K\xcb\r\x85\x0c\x99"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2059():
    str_0 = "\n        Remove the temporary directory.\n        "
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2061():
    int_0 = 5
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2063():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2064():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2065():
    complex_0 = -706.5 + 1607.189j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    int_0 = 1627
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b"\x13\x03\x99\xfac\xc3Q\n[P\xdeLp\xfe"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = -523
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    float_0 = 10000000000.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    str_0 = "Document must be either JSON strings or dict."
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b"K\xda\xf3Z\xdf\xd1fBN\x91o\xc9P\x9b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = -2234
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2079():
    int_0 = -3625
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bytes_0 = b"\xea\xd6\xcf\x8dE\x03U\xa6y3\x00"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    float_0 = -439.962
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    module_0.Runner()


def test_case_2083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2084():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2085():
    int_0 = -865
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"\x94\xdd\xef\xfdMeW\xe3\\\x12\x96WJ\x07u"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2088():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    bytes_0 = b"q;\xd3\x17z\xbd\xedh/\xcf\xdb}\x07\xaa"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bytes_0 = b"\x1d\xd5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2094():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    str_0 = "{II\x0bS6jD@"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    str_0 = "dnmGR@"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bytes_0 = b"\xac\xc3\xae$\nAU\xdb\x12\xbf\n\xdb\xf1i\x7fv\x11\x95c"
    module_0.print_exception(bytes_0)


def test_case_2098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bool_0 = True
    list_0 = [bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\xd8\x8b9\xf19\x01"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2103():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    str_0 = "dJ\x0coA-AEV1>kny\x0cJ@*j"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bytes_0 = b"\x1cO\x88B\x02\xe8r\xbe{\x0b\xbd\x87\xa8z\xea\x9d\x06\x94"
    module_0.print_exception(bytes_0)


def test_case_2106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2107():
    float_0 = 210.89
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2109():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2110():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2113():
    str_0 = "Running task copy to table for update id %s for table %s"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    bytes_0 = b"\xe0\xe9\xe9\x7f\r\x9eu5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    str_0 = "\x0bFi0|\\/U!+1/[7i-"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    float_0 = 998.1053
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bytes_0 = b"\xc0\x9f\x1f\xa0` f\x0c\xf6sh\x1e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2120():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    int_0 = 1511
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_2126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2127():
    int_0 = -2659
    module_0.Runner(int_0)


def test_case_2128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = -1829
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    str_0 = "k?z"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bool_0 = False
    set_0 = {bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = -885
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2138():
    int_0 = -173
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2140():
    str_0 = "ox\t)&ij^"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    complex_0 = 4944.321 - 1342j
    module_0.print_exception(complex_0)


def test_case_2142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    str_0 = "jwRQ0,"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2148():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    float_0 = 2401.2
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bytes_0 = b"\x991\x7f\xaf`\x0cgC\x0e|<\xf9ENJ\x96<"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2156():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2157():
    float_0 = 836.17872
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_2159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2160():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2161():
    int_0 = -863
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bytes_0 = b"\xda$\xd9\x87\xb2B\xb3\xbe\x9d\xbf\x06\x936#\xaa\xe5n"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2165():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2166():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "]CL\rm"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = -638
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    str_0 = "#'=(pZ:U"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2173():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bytes_0 = b"\x02"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    bytes_0 = b"j\x02<\xa1\x8e\\\x99\xd4s"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2180():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = " 0;-4D<!_F"
    str_1 = "I5\tDZ6"
    str_2 = "mrrunner"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_1}
    module_1.object(**dict_0)


def test_case_2182():
    pass


def test_case_2183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2184():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    int_0 = 1582
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2187():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bytes_0 = b"\xe5o\xc2\x8a\xf2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2191():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bytes_0 = b"\nG$~f1\xdd\xa9\xb1[\xc5\xdf\xb9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2196():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2198():
    object_0 = module_1.object()
    int_0 = 5
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


def test_case_2200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2201():
    bytes_0 = b"\x80\xfbk\xdb\xeb-A\xaf\xd3% \xfd\x82\xe1\x81\x04\xe3"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    float_0 = 60.52
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2204():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2206():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2207():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2208():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2209():
    module_0.Runner()


def test_case_2210():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = 171
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bytes_0 = b"\xca\xed\xcb9&\x94\x91\x80\x00g2\xe3\xdb"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2214():
    int_0 = -3123
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    module_0.Runner()


def test_case_2216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2217():
    int_0 = -3032
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = 938
    module_1.object(*int_0)


def test_case_2219():
    pass


def test_case_2220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2221():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2222():
    bytes_0 = b"\xeb\xa8V\xcf\x9d\xd7d\xda\x8b\x8d\xbd\xfa"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2224():
    int_0 = 2
    set_0 = {int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2226():
    float_0 = 611.19
    str_0 = "A"
    dict_0 = {str_0: float_0, str_0: str_0}
    tuple_0 = (float_0, str_0, str_0, dict_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    float_0 = 2541.95233
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2229():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "kc`Z"
    int_0 = 21
    dict_0 = {str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bytes_0 = b">\x1e\x90\x00\xf1|}rE\xcf\xc6\x05"
    module_0.print_exception(bytes_0)


def test_case_2231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2232():
    bool_0 = False
    module_0.print_exception(bool_0)


def test_case_2233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bytes_0 = b"%'\x86\x8a\x14*\x80V\n\x06~\x0b\xae\x8e\xc2\xfe~\xb2\xe4\xb3"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2238():
    int_0 = -1056
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2241():
    str_0 = "lWs3E'j\t[G%\r"
    str_1 = "Kiz+"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2243():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2246():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2247():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    float_0 = -328.2056
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    int_0 = 1017
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    int_0 = 537
    module_0.print_exception(int_0)


def test_case_2251():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xec\n\x06\xb53\xe2"
    module_0.print_exception(bytes_0)


def test_case_2253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2254():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2255():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2256():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    str_0 = "__main__"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


def test_case_2259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2260():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2261():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    str_0 = "O<A&7q$<*]<L(sq"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2264():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bytes_0 = b""
    str_0 = "fWzz!VjBy"
    tuple_0 = (bytes_0, bytes_0, str_0)
    list_0 = [tuple_0, bytes_0, tuple_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bytes_0 = b"\xd1L\x98\xbe:"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    int_0 = 2931
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2272():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2274():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    float_0 = 247.3569
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = 491
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    str_0 = "k\r7h+"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = "P>$j|xIS\n>\x0c"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2282():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2283():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bool_0 = True
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bytes_0 = b"bL\x0c\xc9<C\t\xa5"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    bool_0 = True
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    int_0 = 3306
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2291():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2292():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2293():
    complex_0 = -1134.13369 - 3161.9j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    int_0 = 1024
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2297():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2298():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2299():
    float_0 = 834.8
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2301():
    float_0 = -46.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = 50
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bytes_0 = b"K\xdf\xe2\xd5]\x93\xf3\xaeF\xee\x82\xfb\xad"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"*]4Z'\xeaD\x00\xc5\xea\xee\x99\x9e\xb1c\x13\rL\xc9`"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2306():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2307():
    float_0 = -1764.728
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    int_0 = 905
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2314():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bytes_0 = b"\xa0\x13\xbd\xa3\x9b\xf7\xf9\xa1\x7f\x0c\xb3\xa0\xe48\xce$\xd4\x11"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2317():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2318():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    list_0 = []
    list_1 = [list_0]
    module_0.print_exception(list_1)


def test_case_2320():
    pass


def test_case_2321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2322():
    float_0 = -2473.300503
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2325():
    bytes_0 = b"z\xca\xfb\x13>\xa1\x82\x99\xc0\xec\xdc\xa4\x80t\x14\xb7\x1e\xbf\x83"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    float_0 = -212.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    complex_0 = 560.60022 - 1742.34j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    complex_0 = -1527.9179 + 3949.307j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    float_0 = -31.4765
    dict_0 = {float_0: float_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = 1
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\xd6`[a\xa2\n\xa6\xa9~\x86\xe6]\n\x9e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2333():
    float_0 = -2083.46
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bytes_0 = b"\xd46\x88~\xe9e\xa7\x97\xa9\xd5e\xe7\x18\xf4|"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = 5
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    int_0 = 1004
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = 1869
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"\xc2\xb1\x7f\x1d\xc2\xdah\x8c\xd9\xa7\xe6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bytes_0 = b"\xb2\x112\xab[\x0f"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2345():
    str_0 = "#!'h+lQ*VGZyLx>]"
    int_0 = 24
    set_0 = {str_0, int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bytes_0 = b"\xd0\x08\x8a\xb6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    float_0 = 812.752
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2350():
    module_0.Runner()


def test_case_2351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2352():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    int_0 = -4584
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bytes_0 = b""
    bytes_1 = b"\xad\x8d\x818\x7fR"
    set_0 = {bytes_0, bytes_1, bytes_1, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2356():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2357():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2358():
    complex_0 = -3150 + 1590j
    set_0 = set()
    tuple_0 = (complex_0, set_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bytes_0 = b"\xc2\x99\xde\x1ey\xcc\x81~\x97\xcdg"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bytes_0 = b"s\xb85"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = "\x0bY\x0c"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bytes_0 = b"\xc8\x9bT\xd6\xebd\xd3\xee\xda\x13\x85A\x9c\x9d\xd5\xf4\xf6\xd9l\xef"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    object_0 = module_1.object()
    module_0.Runner()


def test_case_2365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2366():
    complex_0 = 582.853 + 650.67988j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2368():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2369():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    int_0 = 9200
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    str_0 = "V~D kY=<6({Xu[73"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    bytes_0 = b"!\x15p\x8e\x83k\xea\x93\x08\x8c\xa5\xa2\xf3Ic\x9f\xbe\xc5\x0c\x87"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2377():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2378():
    module_0.Runner()


def test_case_2379():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = ()
    module_1.object(*list_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    bytes_0 = b"I\xae\xde3\x18p\xa5\xb9\xcf1\xc3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    float_0 = -1790.487
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    complex_0 = 14 - 1769.380164j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2386():
    str_0 = "]ed_p'ugdNYSsw:vjgq"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    bytes_0 = b"\xef\xa1z\x82\xd6\x83e\xfct:3!\xc7\xa0\xc5'\x85Z\x18"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2390():
    int_0 = 4
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    bytes_0 = b"&*\xbd\xa6.U\xb5\xbb\t\xaa\xd8\xcc\xa1\xc43\xebJ"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


def test_case_2392():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2393():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bytes_0 = b"GA\x11\xb7!\xa2(\x0e9\xc8p\t{\xd8eW"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2397():
    int_0 = 9200
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b"\xa5*\x1b\xf1\xda\xdex\x8d\xc6\x10"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    bytes_0 = b"\xe0\xe5\x13\xa9~"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"\xf7\xd62V\x82.0\xe6\xfaR\xf1#\x10i<\x84]\x8cz\xd5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bytes_0 = b"\xcbowE\x92u\x9d]\xb2\xf7\xfb\xba"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2405():
    float_0 = 3100.42
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2408():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2409():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2410():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2411():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bytes_0 = b"\xbb\xf3\xdc \x03\x18D>\x96"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2414():
    int_0 = 494
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bytes_0 = b"e\x84K\xcc$\xa2\xf8\xbc\xdf\xd5\xf7\x86\xc6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    str_0 = "0;"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    int_0 = 530
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2421():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bytes_0 = b"\x90\xa6\xb7\xaa@1\x83"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2424():
    int_0 = 10
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    bytes_0 = b"ko\x81\xc4o"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    str_0 = "?\\\\\n^ Zn4"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    float_0 = -3144.032147
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    str_0 = "/xeex9N+S"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = "<j!py7\rF\x0b&i"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    float_0 = 291.842
    set_0 = {float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = -1003
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [int_0, int_0, list_0, int_0]
    module_0.Runner(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2434():
    float_0 = -4364.7454
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2437():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2438():
    str_0 = '"kill %s"'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2440():
    complex_0 = 368 - 920.570398j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    complex_0 = 328.077 + 723.7904j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b"~"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2444():
    complex_0 = 1620.48431 + 2801.207712j
    set_0 = {complex_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2446():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    bytes_0 = b"\xc6\xd8\xcf\xf1\xbc \x80"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bytes_0 = b"\x07f\x90}\x11"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    bytes_0 = b"\xaaz\\\x87\x04\x9c\x1b\xb5X\xee\x15\x81\xfe\xd6G\xc6G5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    float_0 = 52.384
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"\xd5"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    int_0 = -304
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    complex_0 = 4247.48 - 3060.47j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bytes_0 = b"\xbd|e0\x8fn\xbb_"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2458():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2459():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2460():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    bytes_0 = b"\xe0L="
    module_0.print_exception(bytes_0)


def test_case_2462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2463():
    int_0 = -2182
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2465():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2466():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    str_0 = "\n8\r1a"
    str_1 = "t\x0bi0jzazxAcJX\x0c@5pQgK"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2469():
    float_0 = -2468.112
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    complex_0 = -2326.062 - 651.875j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    str_0 = "FE8^c\x0b.O*C"
    str_1 = "<wW,k]$xn6\x0c8y/g\tyj\\}"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"F\xb3\x9b\x0e\xbf"
    tuple_0 = (bytes_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    complex_0 = 5712.64 - 5392.98j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    complex_0 = -242.86962 - 1153.81958j
    dict_0 = {complex_0: complex_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    int_0 = -2588
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    object_0 = module_1.object()
    module_0.Runner()


def test_case_2479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2480():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    object_0 = module_1.object()
    module_0.Runner(object_0)


def test_case_2483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2484():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    float_0 = -2796.3
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    int_0 = -974
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    bytes_0 = b"\x174!Bx\x02S\xcfT1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2490():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2492():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2493():
    str_0 = "hadoop"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    int_0 = 3065
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    str_0 = 'wffpNRoNcV_("LG6)'
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    object_0 = module_1.object()
    str_0 = "tBS)X\n'_\n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    complex_0 = 3038.4784 + 398.46299j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_2500():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2501():
    module_0.Runner()


def test_case_2502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "\nSupport for Elasticsearch (1.0.0 or newer).\n\nProvides an `ElasticsearchTarget` and a `CopyToIndex` template task.\n\nModeled after `luigi.contrib.rdbms.CopyToTable`.\n\nA minimal example (assuming elasticsearch is running on localhost:9200):\n\n.. code-block:: python\n\n    class ExampleIndex(CopyToIndex):\n        index = 'example'\n\n        def docs(self):\n            return [{'_id': 1, 'title': 'An example document.'}]\n\n    if __name__ == '__main__':\n        task = ExampleIndex()\n        luigi.build([task], local_scheduler=True)\n\nAll options:\n\n.. code-block:: python\n\n    class ExampleIndex(CopyToIndex):\n        host = 'localhost'\n        port = 9200\n        index = 'example'\n        doc_type = 'default'\n        purge_existing_index = True\n        marker_index_hist_size = 1\n\n        def docs(self):\n            return [{'_id': 1, 'title': 'An example document.'}]\n\n    if __name__ == '__main__':\n        task = ExampleIndex()\n        luigi.build([task], local_scheduler=True)\n\n`Host`, `port`, `index`, `doc_type` parameters are standard elasticsearch.\n\n`purge_existing_index` will delete the index, whenever an update is required.\nThis is useful, when one deals with \"dumps\" that represent the whole data, not just updates.\n\n`marker_index_hist_size` sets the maximum number of entries in the 'marker'\nindex:\n\n* 0 (default) keeps all updates,\n* 1 to only remember the most recent update to the index.\n\nThis can be useful, if an index needs to recreated, even though\nthe corresponding indexing task has been run sometime in the past - but\na later indexing task might have altered the index in the meantime.\n\nThere are a two luigi `client.cfg` configuration options:\n\n.. code-block:: ini\n\n    [elasticsearch]\n\n    marker-index = update_log\n    marker-doc-type = entry\n\n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xc1\xc2\x1cU7\xc0\x86G\x8c\x11\xd4`\xf7"
    module_0.print_exception(bytes_0)


def test_case_2507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2508():
    float_0 = -1166.58
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2511():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2512():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2513():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2514():
    int_0 = 1225
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    int_0 = 0
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2518():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bytes_0 = b"i\xc3\xd8FQ\xbf\x19q\x8c\xbf{\xd41\x80M\xc1\x0c\xd1C\xbd"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2521():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2522():
    int_0 = -4517
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    bytes_0 = b"\x15E\x92\xe3KJ\x9a[\xb6\xbd"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    complex_0 = -490.1401 - 3374j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    int_0 = -2619
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    int_0 = 1488
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bytes_0 = b"p#\x84\xc7`\xacQ\xc8\xe8e\xc6\xd3"
    list_0 = [bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    int_0 = -1752
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    int_0 = 4766
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    bytes_0 = b"\x01`@\xba\xe9\xa9\xd20\n\x99\xad\x04\xf5\x0e\xdco\xd72\xf0\xec"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    str_0 = "uBV,]4v|4J'Tjh"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    str_0 = "+K=/gB')8M=r(q]\"a"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2536():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2537():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bytes_0 = b"\xa1i\xae!\x06\x12"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    str_0 = "|z~g-F'!%=!&:"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2541():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_1, tuple_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    bytes_0 = b"\x17!f\xa3\xc3\x92\x8a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "mrrunner"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2545():
    str_0 = 'FhA"'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    complex_0 = 2817.15462 + 5172.303j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2548():
    int_0 = -2543
    module_0.print_exception(int_0)


def test_case_2549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2550():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2551():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


def test_case_2552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2553():
    int_0 = 11
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2555():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    str_0 = "#wg<5;"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    bytes_0 = b'\xd7"\xacI\x94\xf6\xba\x0ez~6\x19\xf26'
    tuple_0 = (bytes_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = 1465.462151
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2565():
    complex_0 = -679.17 + 103.2j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    float_0 = -2151.681
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2571():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    list_0 = [set_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    float_0 = 10000000000.0
    module_0.Runner(float_0)


def test_case_2574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2575():
    str_0 = "55"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bytes_0 = b"B?+\xb8B\x87w_"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    complex_0 = -1152.80176 + 905.93796j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2579():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    str_0 = "SM_^\x0b\r"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bytes_0 = b"\x91\x9aC\xe5\xe5$F\xdb\x84E\xfb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bytes_0 = b"1z|?\x13\xb2\x7f\xfd"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    int_0 = 2000
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    int_0 = -987
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    int_0 = -1442
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = "HEs"
    dict_0 = {str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bytes_0 = b"\xd2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bytes_0 = b",\xe8b\xbdI\xb6\xd3X\xed\xb2\x11\x92\xd9E."
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bytes_0 = b"\xfb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    object_0 = module_1.object()
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    float_0 = 10000000000.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    list_0 = []
    module_0.Runner(list_0)


def test_case_2600():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2601():
    int_0 = -260
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    str_0 = "mt%\n'KQu.-aX"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bytes_0 = b"\x18%\xe3\xb5\x936JzB*\xe6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    str_0 = '~"36kL\tN\x0bWzGW%X>\r\x0cr'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    tuple_0 = (list_0, list_0, bool_1)
    tuple_1 = (tuple_0,)
    str_0 = '_X>8y r~!l"'
    bytes_0 = b"J\x98\xda"
    tuple_2 = (tuple_1, bool_1, str_0, bytes_0)
    module_0.print_exception(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    str_0 = 'Z`)\r;U],Fg2A}"&~!":\r'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    module_0.Runner()


def test_case_2608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"[l\xd6(\x1d/"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    int_0 = 1262
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2614():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2615():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2616():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2617():
    str_0 = "2GAz"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = 2159
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2621():
    str_0 = "?.1e^z`IMGl9>t7#XsX{"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2623():
    bool_0 = False
    int_0 = 2
    bool_1 = False
    bytes_0 = b"\x07\x1c\xaa\xa5\xf4\x85X\x18\xdc\xab\x06\x10\x8c?\xf7"
    tuple_0 = (bool_0, int_0, bool_1, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    int_0 = -47
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    str_0 = "'\\A^\"_UVJ!e"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    complex_0 = 1187.8 - 1401.515755j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    float_0 = -2028.34938
    bool_0 = False
    set_0 = {float_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2631():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0, set_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    int_0 = -1805
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bytes_0 = b"\xac2y\xc1\x96\x0b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = -2882.21
    set_0 = {float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    int_0 = 1273
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    complex_0 = -1073.9 - 188.356974j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2641():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2642():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    str_0 = "\niFl[Pg4Y/>"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, set_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    str_0 = 'X3HHy<5",RN;8ryka'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2647():
    object_0 = module_1.object()
    bytes_0 = b'\x03\xf3\x1a"\x15'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    float_0 = 10000000000.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bool_0 = False
    int_0 = 9200
    tuple_0 = (bool_0, int_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    complex_0 = -147.6 - 937.447311j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    float_0 = 4825.0
    set_0 = {float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    str_0 = "nIZC,0P]A=lnFG"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    none_type_0 = None
    module_0.Runner(none_type_0)


def test_case_2656():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2657():
    bool_0 = True
    list_0 = [bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = "E:J\tBmS{N.woFaP]r_"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    float_0 = -692.374852
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    int_0 = 4700
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2662():
    int_0 = -1800
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    int_0 = 2050
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    float_0 = -254.56
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    bytes_0 = b"R+\xfdKUb\xc2\xbf\x96\x9f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 1659
    str_0 = "mrrunner"
    str_1 = ">\x0c`xR;h8bNZ\n."
    tuple_0 = (dict_0, int_0, str_0, str_1)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    module_0.Runner()


def test_case_2672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2673():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2675():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = 128
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    str_0 = "<oC"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bytes_0 = b"[\xec\xb0Fy\xa3\xea\xa6Cf\xc6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    int_0 = 2050
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2683():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2684():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bytes_0 = b"}\x07x%BH\x18*\xce\x01\xb8\x19\xf0\xa6"
    tuple_0 = (bytes_0,)
    module_0.print_exception(tuple_0)


def test_case_2686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2687():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bytes_0 = b"1I\xe8\xe5\x81\xa5\x94\x1c?\x85\x8di\xedi\xa9\xec"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


def test_case_2689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2690():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bytes_0 = b"\x13\x8dt0\xb2\xce\x98\xb3\xbch\xa8\x13\xf5\xb9\xf1A"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    int_0 = -1916
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = "DH~uGD!KWtSD"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2695():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    complex_0 = -1618.259 - 4396.9j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    str_0 = "mrrunner"
    none_type_0 = None
    str_1 = "ROeH/*2rt38\\"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2700():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2701():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2702():
    int_0 = 3306
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"\xf8\x98\x81"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    float_0 = 27.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    str_0 = "u"
    str_1 = "0cHPq^z\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    module_0.Runner()


def test_case_2712():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bytes_0 = b"\x08\xe2\xe8\xe2IH\xe1\xa1\t<\x06\x8c\x9fC\xda\xdd\xeb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    float_0 = 957.37
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2718():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    bytes_0 = b"(\xd5iir\xc7H\xfc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    str_0 = "RZCAE]G\t6$P`RX$w}"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bool_0 = False
    module_0.print_exception(bool_0)


def test_case_2726():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2727():
    tuple_0 = ()
    float_0 = 1281.0
    str_0 = "+e7eUJ\\\rB+_X"
    tuple_1 = (tuple_0, float_0, str_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2730():
    str_0 = "BT1"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    bytes_0 = b"+grR\xd2\x87\xf1h^\xbfrqK\xef\x1c\xf7v0"
    dict_0 = {bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = ':\x0czlalwMBLy"4V;\x0bu(\x0b'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    str_0 = "__main__"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_0: str_0, object_0: object_0, object_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    module_0.Runner()


def test_case_2736():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"N\x91{\xec\xc4t\x9e\x87k\x1bj_\xd3@"
    list_0 = [bytes_0, bytes_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    bytes_0 = b"\x91}\xbb"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_0}
    module_0.Runner(dict_0)


def test_case_2739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2740():
    str_0 = '&";2blq'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    str_0 = "O@\n3s[BjH"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2743():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    object_0 = module_1.object()
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2747():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    int_0 = -1385
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    bytes_0 = b"\xf1\r\xc3v\x92\x96\x8d\xfac\xd0"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    int_0 = 1289
    dict_0 = {int_0: int_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    int_0 = -2739
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bytes_0 = b"\xe8\xc0LR\x0eIf\x0fj"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    int_0 = 1693
    module_0.print_exception(int_0)


def test_case_2755():
    pass


def test_case_2756():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = -978
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    str_0 = "3&U,mJ"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    str_0 = '"@eU}m_&u|Rx,Ei'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    bytes_0 = b"\x17\n>\xbdF\x15\xb7\xb8\xf6\xc8\xc26\xb0CU\xba"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    bytes_0 = b"\x0c\t\xff?\x8f\x89M\xac\x97\xa0\xdd\xa0\x98\xc9\xb7?\xf5)Z"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    float_0 = -89.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bytes_0 = b"0\xc0\n\xb5n\xfe \xdb\xbb\xe3"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bytes_0 = b"-L"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -2683
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2771():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2772():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2774():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2775():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2776():
    object_0 = module_1.object()
    str_0 = "aw.#vK Vq\tm)C"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    str_0 = "95JU1DL)Dk}i{tmQ6xoY"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bytes_0 = b"\x85\x95\xd7\xf3\xe4z\x0bE\xca\xb2\x8a"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    none_type_0 = None
    module_0.Runner(none_type_0)


def test_case_2783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2784():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2785():
    int_0 = 8
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"\x07)\x8c=\xbe.\x18"
    list_0 = [bytes_0, bytes_0, int_0]
    bool_0 = True
    tuple_0 = (dict_0, bytes_0, list_0, bool_0)
    tuple_1 = (int_0, dict_0, dict_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = -4495
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    int_0 = 842
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"(\xd9ur=`\xb7a\xe4{\xbao(e"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"\xa7\xfa\xd0f\xc0\xfc\x94K"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2792():
    int_0 = 128
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    int_0 = 3049
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2795():
    float_0 = -58.337109
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2797():
    int_0 = 2214
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    module_0.Runner()


def test_case_2799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2800():
    str_0 = "\"sq9U7&='>w35p%m%k+)"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2802():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2803():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2806():
    int_0 = 2313
    set_0 = {int_0}
    list_0 = [set_0]
    int_1 = 2050
    tuple_0 = (list_0, int_1, int_0)
    module_0.print_exception(tuple_0)


def test_case_2807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2808():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2809():
    int_0 = -68
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2811():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    int_0 = 621
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    int_0 = -5250
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bytes_0 = b"p\xf4\xb8\xf5\xefH]\xb1\xa2\x9e\x8b\x94&\r"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    str_0 = "This method must be overridden"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2820():
    complex_0 = -526.3 - 2131.17233j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    list_1 = [set_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2824():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    int_0 = 835
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bytes_0 = b"\x9c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    str_0 = "]aA[~"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    str_0 = "}?&V[EDVDF(K[P3R9"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    str_0 = "LzBP\nxI|fWe=8D'XL%i"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = 1701
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2833():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2835():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2837():
    int_0 = -4206
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bool_0 = False
    bytes_0 = b"PQ\x01k\xe2\x89\x15"
    int_0 = 5000
    tuple_0 = (bool_0, bytes_0, int_0)
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    list_1 = [tuple_1, tuple_1]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    bytes_0 = b"\xdb-\xea"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    bytes_0 = b"'!aJ\xfe\xeaL\xdf\xf8\xdd\xb8Rr\xde\xd9m="
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    int_0 = 1840
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    float_0 = -731.609
    module_0.print_exception(float_0)


def test_case_2843():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    int_0 = 1476
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    module_0.Runner()


def test_case_2847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2848():
    float_0 = -2417.9972
    list_0 = [float_0]
    list_1 = [list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    str_0 = "_TNaRy_]5(iwZ4@&nOb9"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2851():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2852():
    complex_0 = 3257.76664 - 1072j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    str_0 = "U>y\tZ<As5"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2857():
    str_0 = ":6H"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2859():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bytes_0 = b"\xe4!\xca#|7\x93.\xb9\xaa\xa0P"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bytes_0 = b"\x9d\xed\x16"
    set_0 = {bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    str_0 = "Job completed successfully!"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2866():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    module_0.Runner()


def test_case_2868():
    pass


def test_case_2869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2870():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_2871():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2872():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2873():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2874():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2875():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    int_0 = -103
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    str_0 = "g"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    bytes_0 = b"\x90\x0c.\xfa"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bytes_0 = b"\xd9ls\xd5\xbb\xbb\xa3\xe1[\x92\xf6H *\x01\x8d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = 1569
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    int_0 = -165
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2887():
    bytes_0 = b"\xb6\x9c6\xc2\xf4w"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    str_0 = "?m?{u#"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 2802
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2892():
    float_0 = -1479.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bytes_0 = b"\t"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bytes_0 = b"\x97\xf5\x80\xd2\xfcb\xa8]"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    int_0 = -474
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    float_0 = 794.0
    module_0.print_exception(float_0)


def test_case_2898():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = ">fFp+s@`VK8"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    module_0.Runner()


def test_case_2901():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2902():
    bytes_0 = b"\xf7\r\xf2\x0f\xa2\xe2\xc8\xa5\xe0\xfdr"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2904():
    int_0 = 2785
    module_0.print_exception(int_0)


def test_case_2905():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2906():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2907():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2908():
    str_0 = "C~r9(I4`R\x0c[=m^ \rs"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    int_0 = 24
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "`+g\x0bua"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = -43
    set_0 = {int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bytes_0 = b"\x83I\xa4\n\xd5\xc9\x9e\xd4\x08b\x04c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bool_0 = False
    int_0 = -2398
    tuple_0 = (bool_0, bool_0, int_0)
    set_0 = {tuple_0, int_0}
    module_0.print_exception(set_0)


def test_case_2916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2917():
    str_0 = '\n        This method does the actual insertion of the rows of data given by ins_rows into the\n        database. A task that needs row updates instead of insertions should overload this method.\n        :param conn: The sqlalchemy connection object\n        :param ins_rows: The dictionary of rows with the keys in the format _<column_name>. For example\n        if you have a table with a column name "property", then the key in the dictionary\n        would be "_property". This format is consistent with the bindparam usage in sqlalchemy.\n        :param table_bound: The object referring to the table\n        :return:\n        '
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bytes_0 = b";\x0b\xba\xb2e\x87.\xe9\x95}\xae\x17\xec6(\x88"
    module_0.print_exception(bytes_0)


def test_case_2919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bytes_0 = b"\xc6\xecz}\x9bl\xe6"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    int_0 = 1222
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    int_0 = -1386
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    float_0 = 2102.61395
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    int_0 = -4256
    bool_0 = True
    set_0 = {int_0, bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    str_0 = "W~ehP1]>"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "y=B\tLQ`:H!Ua,=Vu=BC"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2930():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "\n        Path to the jar file for this Scalding Job\n\n        Either one of source() or jar() must be specified.\n        "
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2933():
    float_0 = -2199.321841
    bool_0 = True
    dict_0 = {}
    bool_1 = True
    bool_2 = True
    tuple_0 = (dict_0, bool_1, bool_2)
    tuple_1 = (float_0, bool_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    complex_0 = 3493.96798 + 1984.42j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bytes_0 = b"\xaf\xfc\xbbkr0%\xcd\xcb\x1c\xd8\x88\n\x88\xb7a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bytes_0 = b"\x9fw`\x93T\x85Z\xfd\xad$\x8b}\x0c\xe3"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    int_0 = 339
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    float_0 = 822.086032
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


def test_case_2941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2942():
    str_0 = "m yx`y"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bool_0 = False
    module_0.print_exception(bool_0)


def test_case_2944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2945():
    int_0 = 5
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    int_0 = 2959
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    complex_0 = 923.324356 - 3213j
    set_0 = {complex_0, complex_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bytes_0 = b"\xe4\x9d\x86w\xdb"
    module_0.print_exception(bytes_0)


def test_case_2953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = 1
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    int_0 = 1861
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    str_0 = "\x0cw'go?r"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    int_0 = -451
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bytes_0 = b"O\xe5\xc1\x96\xb3l*C"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    int_0 = 2427
    module_0.print_exception(int_0)


def test_case_2962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2963():
    complex_0 = -3935.024001 - 116.95j
    module_0.print_exception(complex_0)


def test_case_2964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2965():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = 99
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_1, int_0, tuple_1}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bytes_0 = b"\xb1\x1b\x01p\xf8\xa4\x9f\xbcNi\x9e\xa3++\xa8.\xf4\x03L2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    str_0 = 'k%5PZe"FJMv'
    bool_0 = True
    set_0 = {str_0, str_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    float_0 = -1353.571
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    object_0 = module_1.object()
    bool_0 = True
    bytes_0 = b"y#e"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_2974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2975():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2976():
    int_0 = 50
    set_0 = {int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    int_0 = 100
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    int_0 = 386
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    complex_0 = 1909.45 - 172.89793j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    complex_0 = -446 - 2545.4j
    module_0.print_exception(complex_0)


def test_case_2982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b"\x80\xeap\xbe\xf6}\x83\xb7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = -1075
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    str_0 = "Inserting file: %s"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    str_0 = "76LI"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    bytes_0 = b"\x05\xd3\xdb\xe0\x9f\xc2\x84"
    module_0.Runner(bytes_0)


def test_case_2990():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2991():
    module_0.Runner()


def test_case_2992():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bytes_0 = b"\xdeD"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    int_0 = -3072
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    int_0 = -2483
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bytes_0 = b"\xbe\xee\xcc\xc0\xad?I\xe3\xd0\x81x\x1c\x8fEq\x19F\x8a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b":\xcf\xd1x\x9d\xe9\x11\xfe\xc21\x87\xfe\xb3\xd3i"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3002():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3003():
    str_0 = "JYFUO(\"qMA%'W p"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    float_0 = -3995.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


def test_case_3008():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3009():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3011():
    float_0 = -1281.878146
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3014():
    int_0 = 1141
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    float_0 = -5034.029
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bytes_0 = b"\xb1\x8b\xf6\x0b/\xaep\x85\xc6\xc6\xcf`\xf7\xe5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    complex_0 = 2861.573656 - 1128j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = -1528
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3023():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3024():
    str_0 = "Rn\r[i<"
    dict_0 = {str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3026():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    module_0.Runner()


def test_case_3028():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3029():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3030():
    str_0 = "E-'.G^z,FK/q"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = 1507
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3035():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3036():
    bytes_0 = b"\x85n\xc7\xe30`\xb1\x0f\x02\r\xca\xd9jWl\x07\xba\x18\xc5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bytes_0 = b'"m\xfb\xf3\xcaN\x8c~\x0f/X\x90\x8b\xf0Y\xc7]'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    float_0 = 896.853449
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3042():
    int_0 = -2960
    module_0.print_exception(int_0)


def test_case_3043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3044():
    int_0 = 5
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3047():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    int_0 = -1947
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3050():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3051():
    int_0 = -298
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    int_0 = -3247
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3055():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3056():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3057():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    float_0 = -1430.0
    list_0 = []
    dict_0 = {float_0: float_0, float_0: float_0, float_0: list_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    complex_0 = -2635.8 - 98.45432j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3062():
    int_0 = 1350
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    str_0 = "File does not exist: "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3066():
    complex_0 = -993.2 - 1402.18j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    int_0 = 996
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    int_0 = 803
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3070():
    float_0 = 1935.928258
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    complex_0 = 2482.111415 + 216.9j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3073():
    module_0.Runner()


def test_case_3074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3075():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    str_0 = "KtHjyJ>'k~&)g\t]1Y\x0b"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    int_0 = 1037
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = "D"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3080():
    str_0 = "MbQ+h"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    str_0 = "__main__"
    list_0 = [str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bool_0 = False
    complex_0 = 1667.38034 - 1759j
    set_0 = {bool_0, bool_0, complex_0}
    list_0 = [set_0, bool_0, complex_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    complex_0 = 2015.77 - 1655.9j
    str_0 = "|9dRkl*qa\t'8S$\r7"
    dict_0 = {complex_0: str_0, complex_0: complex_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    str_0 = "$C*YIg%ti%1,c'_Mhz]"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3091():
    str_0 = "*A8M5sb+_1\\@poG[a0"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    bytes_0 = b"{\x8eeN\x87[\xe3\xf9E\xdb/9\x83\xc29*K\xe2\xd9\x1e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = "&t$ev])q2^c?=0ZAP"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3096():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bytes_0 = b"Z\xb1\xbf\xe3\x08\xf0\x8d\\\x80"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "\x0cE~S>T,lRn"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    str_0 = "gu!Wg"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3101():
    tuple_0 = ()
    module_0.Runner(tuple_0)


def test_case_3102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = -903
    set_0 = {int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = 10
    bytes_0 = b"AF{\x92\xaa"
    str_0 = "gLS\\h``k4OW"
    tuple_0 = (int_0, bytes_0, int_0, str_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    int_0 = 1527
    module_0.print_exception(int_0)


def test_case_3106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3107():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3108():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bytes_0 = b"\x8bk\xed\x1b\xec\xad\xd4\xfb\x08\xfc\x0ebJK5v"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


def test_case_3110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bytes_0 = b"oV"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3114():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3115():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    complex_0 = 944.355433 + 1713.894j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3118():
    str_0 = "\n        Close/commit the file if there are no exception\n        Upload file to ftp\n        "
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3120():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3121():
    complex_0 = -1915 - 1434.0115j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bytes_0 = b"\xee\x11b\x8b\xf0\x8a\xbf\x06K\x91\xbd"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    float_0 = 205.248
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bytes_0 = b"\x8f!p\x8f\xfelD\xc5\xb1J\t\xa7\xccw ]lT\x04\x1b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    complex_0 = 1881.5767 + 1342.6205j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bytes_0 = b"\xd2f\xf7\x85\xf0;N"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bytes_0 = b'\xe5\x90} \xe4\x15>\xfa\x98\x8b\t\xe23\xda\x98\xea\xa4\xb4"'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    int_0 = -2366
    str_0 = "n\tiH\x0c.>cPrt? )U\t,VH"
    list_0 = [int_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bytes_0 = b"W\x0b\x91p\x14kAV\x95\xf2\xd9j\x1c\x80\xaau~"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    str_0 = "P~"
    module_0.print_exception(str_0)


def test_case_3135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3136():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "<u@}9a {j`rNUF"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xd2\xa2|\x84\x86y\x07Mh:\x12\x99\x8c\xda\xd1q\r\xca"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.Runner(list_0)


def test_case_3139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3140():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    str_0 = "BhLB-\x0c,$CQf`;x)\n"
    module_0.Runner(str_0)


def test_case_3142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3143():
    int_0 = 484
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bytes_0 = b"\xc3\x0f\xbf\xcf@<\xcc\xf7\xcd?L\xd0\xec\x8aP\x9bf"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    str_0 = 'Y0C2/eiLv3"Q9?S\\'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, tuple_0, tuple_0]
    set_0 = {bool_0, bool_0, tuple_0, bool_0}
    tuple_1 = (list_0, set_0, set_0)
    int_0 = -316
    tuple_2 = (tuple_1, set_0, int_0, list_0)
    module_0.print_exception(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3150():
    int_0 = -791
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    bytes_0 = b"\x1b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    str_0 = "fawD"
    set_0 = {str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    int_0 = 2323
    module_0.print_exception(int_0)


def test_case_3154():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3157():
    str_0 = "3^Q\x0cte\nvv"
    set_0 = {str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = -194
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"\x02Q\xeb\x97\xc4g3\x1a\xbe"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    module_0.Runner()


def test_case_3163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3164():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3165():
    int_0 = -2867
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    module_0.Runner()


def test_case_3168():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3169():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3171():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3173():
    int_0 = -2712
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3175():
    complex_0 = 2158.02726 - 1329.608465j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3178():
    float_0 = 579.20147
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    object_0 = module_1.object()
    bytes_0 = b"\x02\xc3"
    list_0 = [bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    str_0 = "ZF+MBeqE#yO5zdjW*ea"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    int_0 = 390
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = -656
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    int_0 = -1290
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3185():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3186():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bytes_0 = b"]{\xd6`\xffp\xf5\x17:6\x8f\xbf\x0b hwK"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3190():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3191():
    int_0 = 1206
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bytes_0 = b"^\xbfEDu=C\x85\xbe\xdc\xd7\xcc\x91U\x9a\x98"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3198():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    str_0 = "echo -n ready && cat"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3202():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3203():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = -19
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b"\xa5\xac[\x93v^M\x8f,\xb6\xd3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bytes_0 = b"\xcd59\x10>\xd1\xf7\xec\x02"
    bytes_1 = b"Bw\xc1\xc53\xa5\x06R\x1c\x87)T)o\x95\xd9z"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_1}
    list_0 = [set_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    str_0 = '{st94c=7"^(7'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    complex_0 = -177.37429 + 491j
    module_0.print_exception(complex_0)


def test_case_3213():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3214():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    float_0 = -1731.075591
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    float_0 = -731.5
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    bytes_0 = b"q0\xc6q2\xe7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    str_0 = "Running task copy to table for update id %s for table %s"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3224():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3225():
    int_0 = 8
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3233():
    bytes_0 = b"\xaf\xf1E\xbaad\xe7\xfa\xcf^`}\xf7\x8f\xa5"
    set_0 = {bytes_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    float_0 = -2186.7
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3237():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3238():
    int_0 = -1307
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = b'\x05!\x9c\x1b"e\xf4\xb04'
    module_0.print_exception(bytes_0)


def test_case_3240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3241():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    int_0 = -3125
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    int_0 = -3277
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = 9200
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    int_0 = -65
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b"\xb0\xaa\xf4;\tV\x16XIX\xdc\xcd$}\xef\x02"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_3250():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = 2000
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3253():
    int_0 = -5644
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3255():
    str_0 = "v+xF"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = 'x9yTt\r>X"dcw\x0bi'
    module_0.print_exception(str_0)


def test_case_3257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3258():
    int_0 = 702
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    bytes_0 = b"'\xb9\xef\xa7\xe3\xa1\xef\x99\x94\x04\x87\x9e\xd8\xaa\x98\x1b\xfa"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = '?*L:k#skuD"4{0%b:'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    str_0 = ",AB=o=G\x0b\r(:n"
    none_type_0 = None
    str_1 = "Pig script failed with return value: %s"
    str_2 = "6Y`l\rs9mvW)l8\x0c"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    str_0 = '0I"7O]~T'
    bool_0 = True
    list_0 = [str_0, str_0, str_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3264():
    float_0 = 3475.6
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3267():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    int_0 = 1146
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bytes_0 = b"\xa5\x9d\xb4^"
    str_0 = "AAvU>mI"
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    int_0 = 3772
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3272():
    module_0.Runner()


def test_case_3273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    module_0.Runner()


def test_case_3276():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    str_0 = "0fJ#l\\'O`x\\3O}X)"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    complex_0 = -3016.365 - 4189.188869j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b"\xb8~7eN\x92\xf2\x14Kvb\x0c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3283():
    int_0 = 750
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "\n        The target doc_type.\n        "
    dict_0 = {str_0: list_0, str_0: str_0, str_0: list_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3285():
    int_0 = -1818
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bytes_0 = b"\xb8]\xd3\xa8$\xd2B\xbe"
    str_0 = ")z;8-AZH;o/6i{\x0bw;?b"
    list_0 = [bytes_0, bytes_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    str_0 = "J{\rg%JX"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    str_0 = '"Zm-uWR<A~i'
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = 24
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b"\xaa\xc3"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "E<2v1\\2 vz!\t;.DWi`\t"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    bytes_0 = b"\xcbU\x1f\xdcK\x1d\xeb\xc1\x87\x85\xba\ns"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3297():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bytes_0 = b"fN\x81\xf6P\xb1\x8a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    module_0.Runner()


def test_case_3300():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3301():
    float_0 = -4360.688838
    tuple_0 = (float_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3304():
    complex_0 = 626.91 + 726.269j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3306():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3308():
    bytes_0 = b"p\xa8\x83\xf3\xb5\x0e\x13ei::'\x13D"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0, bytes_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    float_0 = 415.087372
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bytes_0 = b"\x14s\x01\x87\nC\xeb\xc6\x94q"
    module_0.print_exception(bytes_0)


def test_case_3311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = 939
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    module_0.Runner()


def test_case_3317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3318():
    float_0 = 1178.6
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = 2050
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "03O"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    float_0 = 4145.035
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bytes_0 = b"\x8dN\x13\xca"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    str_0 = "mu/yR#r"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"\x8c\xb3\xd3p\x93\xb1\xe6XQ\xe29\xb74#\xb1/2"
    tuple_0 = (bytes_0, bytes_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = "}HO-&Kmaiv3 ba|/0"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    complex_0 = 3084.6197 - 2221.6003j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    bytes_0 = b"D\xbcC\x1f\xdb0[@~\xb3\x91M\x1d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, set_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3334():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3335():
    set_0 = set()
    module_0.print_exception(set_0)


def test_case_3336():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3337():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3338():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3339():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bytes_0 = b"\xed\x190g\xd9?L\x94\x11A"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    str_0 = ",Vkv0CWICem9 S&:nI"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3344():
    str_0 = "K-!f8+,\x0bLH!5$sZFB"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    float_0 = -930.923
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    complex_0 = 1479.844 + 728.28j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3349():
    str_0 = "Z%o\x0cE^<\x0bS+*P\x0c'F"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    int_0 = -605
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    int_0 = -1420
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    object_0 = module_1.object()
    module_1.object(*object_0)


def test_case_3353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    int_0 = 1063
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bool_0 = False
    int_0 = 1446
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    complex_0 = -1719.06 - 596.6009j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = -734
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    str_0 = "S@IW?K5>YJnd\x0c"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    int_0 = -2812
    module_0.print_exception(int_0)


def test_case_3364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3365():
    int_0 = -2327
    list_0 = [int_0, int_0, int_0]
    int_1 = 348
    list_1 = [list_0, int_1, int_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3367():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3369():
    complex_0 = 815.290027 - 1001.5103j
    set_0 = {complex_0, complex_0, complex_0}
    list_0 = [complex_0, set_0]
    list_1 = [set_0, list_0]
    module_0.Runner(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    str_0 = "r\\T\\u(\x0b&9"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3372():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3373():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_3374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3375():
    float_0 = 2885.2126
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    str_0 = "Srd8k"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = -2541
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    float_0 = -378.75135
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bool_0 = True
    float_0 = 1703.0
    set_0 = {bool_0, bool_0, bool_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    float_0 = 10000000000.0
    list_0 = [float_0, float_0, float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    str_0 = "Document must be either JSON strings or dict."
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    float_0 = -5.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    int_0 = 1111
    bool_0 = True
    set_0 = {int_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bytes_0 = b"\x9a\x1dY\x9c \xbc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3387():
    int_0 = -1460
    list_0 = [int_0, int_0]
    module_0.print_exception(list_0)


def test_case_3388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3389():
    int_0 = 916
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    str_0 = "__main__"
    none_type_0 = None
    str_1 = "Af0=Li}"
    str_2 = "entry"
    str_3 = "mrrunner"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    complex_0 = -425.06 + 805.454239j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    bytes_0 = b"F|\x07\xdb\x93\xf8T\n\x88\xc3$\x15\x03]8"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    complex_0 = 881.1992 - 2446.240002j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3397():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3399():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "Y)|YN0(*H\n;H'+;:2p"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3404():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    bytes_0 = b"\x18"
    bytes_1 = b"L\xfa[\x82\xb7A"
    list_0 = [bytes_0, bytes_0, bytes_1]
    tuple_0 = (bytes_0, list_0, list_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    bytes_0 = b"c\x13A\x17\xab\xca[\xa8z4\xaf3&\n\xb6{8\x0e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    complex_0 = -2031.15 - 676.78j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    float_0 = 14.026
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    complex_0 = -670.1 + 3926.982545j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3411():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"h\x1e "
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    str_0 = "table need to be specified"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3415():
    str_0 = "__main__"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    int_0 = -1063
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {bool_0: set_0, bool_0: bool_0}
    tuple_0 = (set_0, dict_0, set_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    bytes_0 = b"\xfd\x80\x15\xb0~\xb4.`\xfa\xbd\xf0h"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = "RITfmJ\n$\t,!HpUH:KnbX"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    bytes_0 = b"\x98\x06q\x05\xf8\x89"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    int_0 = -62
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3424():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3425():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3426():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = -2060
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = -686
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    int_0 = -1180
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    bool_0 = False
    object_0 = module_1.object()
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3434():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    str_0 = "s{uiR*%@vbX\x0b7b9o"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = 2774
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    int_0 = 887
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    str_0 = "g7MbQDd#E"
    module_0.Runner(str_0)


def test_case_3439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3440():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3441():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3442():
    int_0 = 808
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    int_0 = 100
    tuple_0 = (int_0, int_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    complex_0 = 1338.48347 - 404.96903j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bool_0 = True
    int_0 = -1035
    list_0 = [bool_0, int_0, int_0, int_0]
    str_0 = "T"
    str_1 = "mrrunner"
    bool_1 = False
    str_2 = "\x0b\x0c7y3C`z(p;U=EjYp2"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: bool_1, str_2: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    object_0 = module_1.object()
    float_0 = 1222.76637
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3452():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_3453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3458():
    object_0 = module_1.object()
    str_0 = "xO)`FM@6TH}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3460():
    str_0 = "Q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    int_0 = 2719
    dict_0 = {int_0: int_0}
    set_0 = set()
    tuple_0 = (int_0, dict_0, set_0, set_0)
    list_0 = [tuple_0]
    bytes_0 = b"\xdf\xb1 \x96Jk@\x8ee%w\xa7#\xfc\xa2!\xa0\nX\xdb"
    tuple_1 = (list_0, bytes_0, int_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    bytes_0 = b"\xcb\x1f\x88\xbf\xd5\r\xd5\xe2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3466():
    float_0 = 1602.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bytes_0 = b"p\x0c\xcb\x0e)\x85\xb3"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = 3306
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    float_0 = 684.484001
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0, dict_0]
    tuple_0 = (dict_0, list_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3473():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3474():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3475():
    int_0 = -2313
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3477():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3478():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    int_0 = 726
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    complex_0 = -1001.9 + 884.87342j
    module_0.print_exception(complex_0)


def test_case_3481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3482():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bytes_0 = b"\x05\x8d\x93\x86\xdbh\x1c\x16\xcb_N\\I \x85"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    bytes_0 = b"\x1b\xf4`;"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    int_0 = 688
    module_0.print_exception(int_0)


def test_case_3486():
    pass


def test_case_3487():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3488():
    float_0 = 639.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    bytes_0 = b"\xd8l\xe5\xf0\x96p\xcc\xb5\xe4\x15"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = 'lwsw(c?,XN\nP"G\td['
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bytes_0 = b"\xb7`"
    module_0.print_exception(bytes_0)


def test_case_3495():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3496():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    str_0 = "G\\jKu)2mO`"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bytes_0 = b""
    module_0.Runner(bytes_0)


def test_case_3500():
    pass


def test_case_3501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3502():
    int_0 = -2208
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


def test_case_3504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3505():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3506():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    str_0 = "8Vc\\l"
    complex_0 = -817.691569 - 1262.8j
    int_0 = -4167
    tuple_0 = (str_0, complex_0, int_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3509():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = 2050
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    str_0 = "mrrunner"
    set_0 = {str_0, str_0, str_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = "aRzdk\x0c\x0bp"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3518():
    int_0 = 3882
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = "=rN"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3521():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    float_0 = 684.214
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    float_0 = 4191.51371
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    int_0 = 4
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = -506
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3528():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    str_0 = "I~Z)wA^~ys=dlY3o\tN"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bytes_0 = b"\x16\xce1K\x1e"
    tuple_0 = (bytes_0, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3533():
    str_0 = "5%SJ"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    int_0 = 1233
    module_0.Runner(int_0)


def test_case_3536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    int_0 = 1659
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    complex_0 = -234.32 - 3663.3j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bytes_0 = b"\x8f\xb2\xb80\x1a?"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    str_0 = "GZtnf"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    bytes_0 = b"S\xe6n2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3546():
    int_0 = 24
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    list_0 = []
    object_0 = module_1.object(*list_0)
    tuple_0 = (object_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (bool_0, bool_0, tuple_0, bool_1)
    module_0.Runner(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    set_0 = set()
    list_0 = [set_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = 21
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    bytes_0 = b"(\xb7c\x16^\x1c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3557():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3559():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bytes_0 = b"\xd5\x1dH<z^\x8d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    int_0 = -480
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3564():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3565():
    str_0 = "HxN<U_^[JgC3ZVh9*"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3567():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    str_0 = 'N\n-m\tYM\x0c\n{\t0"h5>TFqz'
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    str_0 = "__main__"
    list_0 = [str_0, str_0, str_0]
    list_1 = [str_0, str_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3573():
    str_0 = '3rJpWqGp@V>.p_Cg"'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3575():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = 'Oyg>$\x0bK\x0c"'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 193
    tuple_0 = (bool_0, list_0, bool_0, int_0)
    tuple_1 = (tuple_0, list_0, int_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bytes_0 = b"\xe2\xfb\xd3\x1dhD\x93\xb2\xffs\xbfp\xb4"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bytes_0 = b"\xc6\\?\xbdzG\xd72\x0e\xe7\xe1\xcf.p\x8e\xa6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3582():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3583():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bytes_0 = b"u\xe4\x1d\xe5\xa7\x95\x9f\xe6D\x9djd%\x19PPH"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3586():
    str_0 = "ww.%;|Tua"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, str_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3588():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3589():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = "b}cAZ/fX5?CFNJ"
    int_0 = 1890
    list_0 = [str_0, int_0, int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    complex_0 = 794.83448 + 1420.9j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    bool_0 = True
    str_0 = "}RA4h7g=Zh!"
    tuple_0 = (bool_0, str_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    int_0 = -552
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3599():
    set_0 = set()
    bytes_0 = b"t"
    str_0 = ""
    tuple_0 = (set_0, bytes_0, str_0)
    module_0.print_exception(tuple_0)


def test_case_3600():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3601():
    int_0 = 2170
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"R\xc8\x07\xaf*\x15I\x9bz\xe7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3604():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    module_0.Runner()


def test_case_3608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3609():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bytes_0 = b"\x13\xc6\xb5\x12G\xc2\xe5_\xd8k<\x03\xac? \x807\xfe"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3613():
    str_0 = "x\r\rC>JPoI(YJ^"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bytes_0 = b"`\x96b<\xe9Y\x1a\xdeb7\x11=9_s(\xb3\x10\xaf"
    module_0.print_exception(bytes_0)


def test_case_3617():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3618():
    int_0 = -5063
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3620():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3621():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3622():
    int_0 = 3567
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    int_0 = 3013
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    int_0 = -996
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bool_0 = True
    set_0 = {bool_0}
    dict_0 = {bool_0: set_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    complex_0 = -1057.69 - 621.5673j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    object_0 = module_1.object()
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    bytes_0 = b"\x13E\xc2\xc5E\xb7\t\xff\xbf\x8b~\x07\xaa"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, list_0, list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    float_0 = 124.941659
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3635():
    complex_0 = -487.679789 - 1356j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3637():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    int_0 = -772
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    float_0 = -2576.6479
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = 419
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    module_0.Runner()


def test_case_3642():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3643():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b"\xba\x16\x94\xba\x9e\xbd\xd7X\xe5\x1bES\tb\xa4\x0b\x96w\x16\x9a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3646():
    module_0.Runner()


def test_case_3647():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3648():
    str_0 = "SPARK_JAR"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bool_0 = False
    int_0 = 3210
    list_0 = [bool_0, bool_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    float_0 = -910.961
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    int_0 = 0
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3656():
    int_0 = 120
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = 651
    set_0 = {int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    int_0 = 189
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    float_0 = 122.8672
    module_0.print_exception(float_0)


def test_case_3664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3665():
    bytes_0 = b"\xc3GUC"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3668():
    float_0 = -606.6
    tuple_0 = (float_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3670():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3671():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3672():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3673():
    str_0 = "7[\x0b{L"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bytes_0 = b"\\\xf4L\xcf\xe0 \x9b\xbf\xe3\xfe+"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    str_0 = "q`|v|bQof7"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    bytes_0 = b"sx\xc4\x00w\x89\xa3\xbele\xecF?\x99"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    bytes_0 = b'"VL\xe2sw\\/y\xb8\xa89`'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3679():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    str_0 = ","
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    str_0 = 'M|P\t\n:RD4C="lFvH\x0cM+'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3684():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    str_0 = "u\\Uc"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3688():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    str_0 = "ZN;\x0bofK/\r]78Oc"
    list_0 = [str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bool_0 = False
    module_0.print_exception(bool_0)


def test_case_3692():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3693():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3694():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3695():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3696():
    str_0 = "rMSfNn\tAK')"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    str_0 = "YK\t'z;r\n}2|3$]c>V"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3699():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3700():
    int_0 = 558
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3702():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3703():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3704():
    complex_0 = 2641.184749 - 14.49809j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3706():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    str_0 = "("
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3710():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3711():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3712():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3713():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3715():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = -3586
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"\x90\xec\xda\x95"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = 875
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    float_0 = -609.541
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3722():
    str_0 = "DL/jf+\x0b"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    int_0 = 21
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    module_0.Runner()


def test_case_3725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3726():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b" C\x12\xa7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    str_0 = "q"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    float_0 = 794.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    object_0 = module_1.object()
    tuple_0 = (object_0, object_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    bytes_0 = b"M\xda)1\xcb8#\x97\xd2\xd6\t\xfdYghP\xa4\xdc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    bytes_0 = b"\x1e3\xb5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    float_0 = 3464.7835
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bytes_0 = b"xm?\x98\xc0\xbdf\x8c\xbd\x05\xe4\xa7\xd5\x0e\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\x87\x89\xa4!\xfd\\\xd9\x14"
    tuple_0 = (bytes_0, dict_0, bytes_1)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0, bytes_0, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    str_0 = "*!N7|5"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    complex_0 = -670 - 118.559482j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    int_0 = -2219
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    int_0 = 434
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = -1787
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    bytes_0 = b"\xba\x8f\xa2\xc0\x15\x14w\x1d),\xed\xb6\x03\xc7e^_Vt"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    bytes_0 = b"\xf6\xf1<?$K\x8e24\x9d\xd3\xf6\x1c\x01I\xf7"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    int_0 = 2488
    list_0 = [int_0, int_0, int_0, int_0]
    dict_0 = {int_0: int_0, int_0: list_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"Q\x9f\xb1\xd1\x05\xd23\x9e\xec\xdf2\xafm"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"\xa9\xaes-]\xf9\x88\x0bT\xdc\xfe)G\x00"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    str_0 = "__main__"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bytes_0 = b"B\x06>"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    int_0 = -1168
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    int_0 = 8
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    int_0 = -980
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    bytes_0 = b'\x82\xd4t,<q\xaf]\x08J\xdf`\xc7vHS\xaeE"'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3765():
    str_0 = "__main__"
    module_0.print_exception(str_0)


def test_case_3766():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"Md<\xca\xfb\r"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3769():
    str_0 = "q\x0cV/%"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    int_0 = -545
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = 794
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3773():
    str_0 = "Oe\\0T/F'da#/)\rE"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    bytes_0 = b"\xc9A\xec\x07\xca\x85\xe9\x0f"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    str_0 = "y&A"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    int_0 = 3003
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    bytes_0 = b"\xe1\x9a\xb8\xab\x16*c\x0e\xbd\xb7$hH\xebd!\xb1\x82"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, tuple_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = 9200
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3783():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3784():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = 913
    dict_0 = {int_0: int_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    float_0 = -1682.1583
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3789():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3790():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3791():
    float_0 = 1951.58
    set_0 = {float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    float_0 = -932.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    none_type_0 = None
    module_0.Runner(none_type_0)


def test_case_3794():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3795():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3797():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3798():
    str_0 = "\rCi\x0b_7|YrGiyFHmH8W6"
    module_0.print_exception(str_0)


def test_case_3799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3800():
    complex_0 = 502.55 - 1052.998357j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    str_0 = ";\nL7PI"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bytes_0 = b"\x0b\x08\xf9\x7f\x83%\x07]"
    module_0.print_exception(bytes_0)


def test_case_3804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = " {UoAcD{qblv`WP<"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    int_0 = 1538
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3811():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    object_0 = module_1.object()
    module_0.Runner()


def test_case_3813():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3814():
    str_0 = "<H&j1!/:"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = "CE89e JRk"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    str_0 = "\x0bNk7BYTV"
    complex_0 = 414.373 - 1940.005j
    int_0 = 1987
    tuple_0 = (str_0, complex_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = 2974
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    float_0 = -2055.65
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "QbP"
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (str_0, bool_0, set_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    int_0 = -680
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    bytes_0 = b"\xfd\xa1\xdeY8c\xaa\xc947"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    complex_0 = -4399.57702 + 1811.1282j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    int_0 = 794
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3829():
    complex_0 = -463.815112 - 796.888j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    str_0 = "mrrunner"
    none_type_0 = None
    str_1 = "6UwdMz-Rix:<~sPi"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    object_0 = module_1.object()
    bytes_0 = b"\xa1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3833():
    int_0 = 55
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3835():
    int_0 = -2135
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    int_0 = 931
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    str_0 = '>"=y O;o'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    str_0 = "mrrunner"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3842():
    int_0 = 2955
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bytes_0 = b"][\x98\x8dd\xe0iS\xd6'\r$"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bytes_0 = b"\xd2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = -1476
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    bytes_0 = b"7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3853():
    str_0 = "BJW#"
    dict_0 = {}
    str_1 = "\rq}"
    str_2 = "Y{Ah9M\\\tHJ05&"
    dict_1 = {str_0: dict_0, str_1: dict_0, str_0: str_1, str_2: str_1}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    int_0 = 12
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bytes_0 = b'"\x19\xc5\xc5\x07\xc4\x04O6\xf8b'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = -1434
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3860():
    int_0 = -1370
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = "H"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    module_0.Runner()


def test_case_3864():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3865():
    object_0 = module_1.object()
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    bytes_0 = b"\x0e\xef\xce\xa9\x80\xe4\xc0\x827\xda\x1d\xa1\n\xd8\x9b\x10\xd6\xb0\xb3"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -448
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    int_0 = 21
    list_0 = [int_0, int_0]
    module_0.Runner(list_0)


def test_case_3869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3870():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3871():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3872():
    bytes_0 = b"\xf6\x9d\xc3\xc7\x86[\x83\x0eb\x93\xc4Z\xdb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    module_0.Runner()


def test_case_3874():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3875():
    str_0 = " {lkY8uVl(uO]0Y*<\x0b"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.Runner()


def test_case_3877():
    pass


def test_case_3878():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3879():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    str_0 = "&"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    module_0.Runner()


def test_case_3882():
    pass


def test_case_3883():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = -1800.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    float_0 = 722.622
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    int_0 = -358
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3890():
    str_0 = "-S"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    object_0 = module_1.object()
    int_0 = -1098
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    int_0 = -1038
    bytes_0 = b"\x0fN\x99Db\xdb\xcc\x19n"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    float_0 = -2107.09
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bytes_0 = b"\x82\x1b\x0e"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    float_0 = 1088.065
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"%\x967\xfa\x9c\x18\xec\x1650\x92\x1b(;ey"
    set_0 = {bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3900():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3901():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_3904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bytes_0 = b"\x13$\x17\xba[\xab8\x8a\xac\xd3\x88\x85\x0f\xc1\x15\xc5}\x9c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    str_0 = "W\x0cK"
    str_1 = "W];9"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    float_0 = -1700.96349
    dict_0 = {float_0: float_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 1178
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    float_0 = -3204.92
    module_0.Runner(float_0)


def test_case_3911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bytes_0 = b"\x0f\x0f\xc7!n\xf2S\xa3cQ\xf0p\xa0\xb8\x8d!S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = 2
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = -388
    str_0 = "X,>e[nM\x0c"
    dict_0 = {}
    tuple_0 = (int_0, str_0, dict_0, str_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bytes_0 = b"\xae\xd6\xb5"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bytes_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    int_0 = 24
    set_0 = {int_0, int_0, int_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    float_0 = 10000000000.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    float_0 = 1470.141917
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    bytes_0 = b"|+\x10\x8d\x8c[\xd5/wG\xd5k\xb5\x10"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    bytes_0 = b"U%\xff\xbc\xa1\xa0M\x92[\xdc\x9b\x8d\x8f\x98"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3929():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3930():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    complex_0 = -1735.1632 - 1582.966j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    bytes_0 = b"\x84\xba\xbf\x12\x95bU\x14G\xa0\xa5\xa3\xf7"
    list_0 = [complex_0, dict_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    int_0 = 1535
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3935():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = -1181
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3939():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3941():
    int_0 = 417
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3944():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    object_0 = module_1.object()
    bytes_0 = b"t\x08\x0f\x0b\xbe3"
    list_0 = [bytes_0]
    list_1 = [list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = ".!?"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"\xb8\x9d\\\xcbmC\x04\x18iyX\xaf\xa5\x1b\xabR>"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    int_0 = 10
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    bytes_0 = b"6\xaf2\xf3h\x9d\x1bAk\x15\xc4Z"
    int_0 = -3833
    bool_0 = False
    bytes_1 = b"\xd9\x8e\x1cr\x1a\x87y\x97r|\xc4\r\xaf\xfd"
    tuple_0 = (bytes_0, int_0, bool_0, bytes_1)
    list_0 = [tuple_0, tuple_0, int_0, bytes_1]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3953():
    complex_0 = -1184.86 - 517j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3955():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3956():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3957():
    int_0 = 2472
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    str_0 = "!J/\t*9nh:"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    float_0 = 2577.93593
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bytes_0 = b'\xa2\xa8\xa5^"'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    complex_0 = -1938.3792 + 1654j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    complex_0 = 2294.8631 - 1317.8042j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3971():
    int_0 = -1620
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"\x17x\x0e\x13"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    str_0 = 'UAt\n"'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bytes_0 = b"{g"
    module_0.print_exception(bytes_0)


def test_case_3978():
    pass


def test_case_3979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3980():
    int_0 = -558
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    int_0 = 1848
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    dict_0 = {}
    bool_0 = False
    int_0 = 5749
    tuple_0 = (int_0,)
    tuple_1 = (dict_0, dict_0, bool_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    complex_0 = -924.6 + 911.768426j
    module_0.print_exception(complex_0)


def test_case_3987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3988():
    bytes_0 = b"\xf0"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = -470
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    bytes_0 = b"L\xff"
    list_0 = []
    bool_0 = False
    tuple_0 = (bytes_0, list_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3994():
    str_0 = "STOR %s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    int_0 = 1024
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_3997():
    module_0.Runner()


def test_case_3998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3999():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    float_0 = 1758.71
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4003():
    float_0 = -238.087262
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4005():
    tuple_0 = ()
    set_0 = {tuple_0}
    bool_0 = False
    bytes_0 = b"&\xb2"
    tuple_1 = (set_0, bool_0, set_0, bytes_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    float_0 = 1627.658326
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    set_0 = set()
    module_0.Runner(set_0)


def test_case_4008():
    object_0 = module_1.object()


def test_case_4009():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = -564
    list_0 = [int_0, int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = "2O*\t$onLP\r2IPf>S"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    bytes_0 = b"\x98\xab\xd2P\x00;5Bw(\x90`\x9d1\xdb\xb7!\xfe\xc9\xd1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = 4375
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4018():
    float_0 = -2810.344308
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    float_0 = 1800.194951
    list_0 = [float_0, float_0, float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4021():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    bytes_0 = b"\xd9\xe9\x92%iD"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    bytes_0 = b"\xe0\xb0\xe5J\t\x8a\xca\x19:k\xf5\x1f"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = 1612.0
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bytes_0 = b"\x86\xf8\x03\xb3\xa6\x98\xe6\x9dN\xb9\xdb\xb3"
    dict_0 = {bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bytes_0 = b"Z\x96\x9a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    bytes_0 = b"V\xfe\x9d\x9c\xc6\x04'1"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4032():
    int_0 = 0
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4034():
    int_0 = -577
    list_0 = [int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    str_0 = '\x0cah"\tb>\rm!z'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    str_0 = "EOF"
    module_0.print_exception(str_0)


def test_case_4037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4038():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"\xa8Qv\xb3,>\xd6\xa7\xc2\xdb\xa6;B\xa8\xaanm\x94\x18"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bool_0 = True
    bytes_0 = b"\xd8\x7fb\xef2$\x01\xe1 \xe39\xd9\xfe\xa0\xa8%\x8e"
    tuple_0 = (bool_0, bytes_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = -136
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    int_0 = -914
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    int_0 = 100
    list_0 = []
    tuple_0 = (int_0, list_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    str_0 = "zr3h6r_9vlo:4s"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    str_0 = "XK~IgV'l"
    int_0 = -1113
    list_0 = [str_0, str_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4052():
    module_0.Runner()


def test_case_4053():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4054():
    str_0 = "t~\x0b8mjv"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    int_0 = -786
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4057():
    int_0 = 1112
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    bytes_0 = b"^7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    int_0 = 3306
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4061():
    str_0 = "2"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    bytes_0 = b"U\n\xe2`6\xad\xc9%G"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\x17\x12\x84\x83@\xdff"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4065():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0]
    module_0.Runner(list_1)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    str_0 = "Tj}yO:m\x0bfCH\nKZyPkzM"
    bool_0 = False
    set_0 = {str_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bytes_0 = b"\xdb=3Q\x11\x1cW\x08|0\xed"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4072():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bytes_0 = b"H\x1aO\x82\xdf\xd4\xc6\xa1\x7f\xf3v\xb5"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    str_0 = "Z\x0c3`H78u1N1U1s"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b"\xd9x\xc1\xf0\xca\xd6\x1e\xe8\xba\x8b\xb30\x05"
    dict_0 = {bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    int_0 = -1922
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    float_0 = 10000000000.0
    set_0 = {float_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    int_0 = 1828
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    str_0 = "_A6f)|_x&l,E;"
    int_0 = 0
    set_0 = {str_0, int_0, int_0}
    tuple_0 = (set_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = 'd-=y5Cmsp"%"B'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    module_0.Runner()


def test_case_4084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4085():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4086():
    int_0 = 3128
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    bytes_0 = b"3+"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bytes_0 = b"\x94\xaf\x87\xf1"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    str_0 = "j*El!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


def test_case_4091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4092():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4096():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4097():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4100():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = " MfWYF/=t\\"
    dict_0 = {str_0: str_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4104():
    int_0 = -1209
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = 128
    float_0 = 10000000000.0
    tuple_0 = (int_0, float_0, float_0)
    tuple_1 = (int_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    complex_0 = -20.3 + 512.572523j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4112():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4113():
    str_0 = "<\r:&'qtBn-R 9"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    str_0 = 'Yi}Zv4\x0b#/"s^W!'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    str_0 = "CE\n>@=jvDMl'cja"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    int_0 = -153
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4120():
    float_0 = -4122.31717
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    int_0 = 60
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    str_0 = "iHt"
    str_1 = "XJ>j_]x*Y'>,1t#-s*$*"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b"\xe5!\xf4\xd9\xa3\x16\xc4\x9e\xc9\x82\x8d{__"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4127():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = -448
    tuple_0 = (int_0,)
    module_0.print_exception(tuple_0)


def test_case_4129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4130():
    str_0 = 'O"@yiRRI@998D7<d\x0bV_'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    complex_0 = -359.8783 + 1303.1j
    dict_0 = {}
    list_0 = [complex_0, dict_0, complex_0]
    tuple_0 = (list_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    str_0 = "Y1MS>r{@"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4135():
    str_0 = "Location:"
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"\xd5\x1c[K\xefvL\x0b\xd6\xfe(\xd5\x02/\xe7\xf8\xb7\xdc"
    module_0.print_exception(bytes_0)


def test_case_4139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4140():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    module_0.Runner()


def test_case_4142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4143():
    bytes_0 = b"\xf0\x83\xee\xaf`l\xef\xf0\x88\xb7G\x87j\xcb\x97d\xe4^\x03\xb7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4145():
    bytes_0 = b"\n\x0cD\x98L\xf63\x15\x9d\x1e!\xef\xad"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    str_0 = "X2D!bs\rk'.\rk]"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    int_0 = 598
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4152():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


def test_case_4153():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bytes_0 = b")Ka[\xf2S\xfaa\x92\xc4vnZ\xb4\xaaX\x0e\xdb\xef"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    float_0 = -1295.87175
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    float_0 = -2856.96602
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    bytes_0 = b"\x02\\\x82\xc0"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4160():
    complex_0 = -1928.8 - 1470.68j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = "RjK<yp)lP kMEOkrB\n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    str_0 = "__main__"
    module_0.Runner(str_0)


def test_case_4167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4170():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4171():
    float_0 = 1004.691175
    list_0 = [float_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    str_0 = ")t"
    set_0 = {str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"E\xc4\xff\xdeir*"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    tuple_0 = ()
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4177():
    str_0 = "j^(o{G\n2D"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    complex_0 = -1563.98311 + 1850.3j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4181():
    int_0 = -1651
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bytes_0 = b"\x9f\xdf\x8e\tw\xf6\x16\x1f\xc6\x01\x10v\x05\x19\xd3\xe8U-\xf7\x8b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    str_0 = ""
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4187():
    int_0 = -37
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4189():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    module_0.Runner()


def test_case_4191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4192():
    bytes_0 = b"\xcb\xf8\xafB\xdc{5\xcb1\xcb\x92\xed\xab\xb8\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    str_0 = '3"/Xn_4 k%8)1/T/o%jl'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4196():
    complex_0 = -196.44348 - 1921.273277j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    complex_0 = 1503 + 712.382j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    str_0 = "QXt\x0cbt"
    list_0 = [str_0, str_0, str_0]
    str_1 = '@"C<FhFM/m6}EPA\r\\.-Z'
    dict_0 = {str_1: str_1, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


def test_case_4201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4202():
    object_0 = module_1.object()
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = 60
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    bytes_0 = b'\x02"u'
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4208():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4209():
    complex_0 = -540.5067 + 4078.1292j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    float_0 = -966.9216
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    str_0 = "&}\x0cpIp,MgiCRL"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    int_0 = -1057
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    bytes_0 = b"\xce\x94\x82K\xfe\xd8\xa5\xe8\xa7\x85\xed\xf6d\xc6\xd8\xff\xe8K"
    set_0 = {bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    int_0 = 1864
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    str_0 = "mrrunner"
    list_0 = [str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    float_0 = -515.524672
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    str_0 = "-r"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    bytes_0 = b"\x9a\x95\xc5-p\xeco\xde\x82T\xa9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bytes_0 = b"\xc0\xb7\x01Qz3\xd0\x8cZ\x04"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    int_0 = 941
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    module_0.Runner()


def test_case_4228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 8
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4231():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    int_0 = -4123
    bool_0 = False
    set_0 = {int_0, int_0, bool_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4234():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    float_0 = 473.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    object_0 = module_1.object()
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bytes_0 = b"\xdd\xe4\xa1\xa6?u"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    int_0 = 8
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = 313
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    bytes_0 = b"\xd2\x03\x06\xc6\xf3X"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    int_0 = -329
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    str_0 = "OQufq="
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b"\x12L_A\xdf\x8an\\\x16\xa2\xcd\x15\x99"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    str_0 = "F\rk-^G~-{7`j#Vz4h2KP"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4248():
    str_0 = "mrrunner"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bytes_0 = b"\x03y>\x06*\xe2~P\xa4`\xa0\xb2:\xda\x8c0\x1dd\x81"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4253():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4254():
    float_0 = 276.5
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    int_0 = -429
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = "I _?V-=K^4@9nj&\tB(;"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    float_0 = -2410.97
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bytes_0 = b"\xd1\x9d\xfe\xe9[\x0e\xe5\xc2\x80\x0bjV[Lf\x9b\xa7;\xb7"
    tuple_0 = (bytes_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b"\xb2o"
    str_0 = 'eoXbB"#KV'
    dict_0 = {str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4263():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4264():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = -905
    int_1 = 392
    str_0 = ")"
    tuple_0 = (int_0, int_1, int_1, str_0)
    set_0 = {tuple_0, str_0}
    list_0 = [set_0, int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    str_0 = "0h2V\ryi"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    float_0 = 2056.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "|:Ix\n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = -176
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    str_0 = "scala-library.jar"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4272():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4274():
    bool_0 = True
    module_0.Runner(bool_0)


def test_case_4275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4278():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4279():
    int_0 = -918
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    complex_0 = 2557.2 + 113.331j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    int_0 = 132
    list_0 = [int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4289():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bytes_0 = b"J\x8f7-\xd0u\xaa\x9c\xa6\xfb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    float_0 = -4196.0296
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    str_0 = "gN2FCl\tn}KErViG"
    none_type_0 = None
    str_1 = "_ct\x0cdV+5GNU"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4297():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4299():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4300():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4301():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    str_0 = "AbC;4Va\x0bh?H{"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    str_0 = "t<l]n&"
    module_0.print_exception(str_0)


def test_case_4304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4305():
    complex_0 = 1293.397546 - 4302.409j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    int_0 = 128
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4308():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4309():
    int_0 = 4254
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    int_0 = -1458
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4312():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = 2212
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    bytes_0 = b"-\xeb\x8c,\x92\xd9\xed\x01\xfa\x0f\xa7"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    int_0 = -1327
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    str_0 = "{jg3h\rS&;e:R]"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bytes_0 = b"\xeb.\xb9\xc0\x99\xbd\xa8\xa3a\n\xe6\xdd\x9d\x11\xd3?\xc4\xa2\xb3\x13"
    bytes_1 = b"\x00\x85"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_1}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    float_0 = -89.85
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    str_0 = "0\\vz:[zb#c+r"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "8~UG|>F_[/o3kJna1P=3"
    list_0 = [str_0, str_0, str_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    int_0 = 2195
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4325():
    int_0 = 1118
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4327():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4328():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4329():
    bytes_0 = b"\x01"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    float_0 = 10000000000.0
    list_0 = [float_0, float_0, float_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    float_0 = -5187.398794
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = -1384
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    int_0 = 3943
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4336():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bytes_0 = b"m\t\xce_\x87\xd5\xc9I"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    bytes_0 = b"\xc0\x9b\xf4\x92W"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4340():
    bool_0 = False
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    str_0 = '3q"\rnv\r\x0c/?\x0bQ:{q|'
    str_1 = "__main__"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    float_0 = 1781.099
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    bytes_0 = b"\x86\x83\xbdG\x82\xbc\xc2b\x85\x1a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bytes_0 = b"\xa4b\x84\xb9\x06\x00\xdet9Qu\x04&\\r\x81H\xa4&\x0f"
    tuple_0 = (bytes_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bool_0 = True
    complex_0 = -1215.111 - 80.29876j
    dict_0 = {complex_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, complex_0, dict_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    str_0 = "J*I%PTuMrX"
    tuple_0 = (str_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    int_0 = 8
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bytes_0 = b"\xb3\xe4\xee4\x83\xd0]v\xde\x94\xa7\xb6y"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    float_0 = -188.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    int_0 = 205
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4354():
    bytes_0 = b"\xaaeS\\\xf1\x06\xd1\x00DO?T^9\xb1\x07\xb7|"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    complex_0 = 1486.1761 - 879.72j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    str_0 = "9P*Nw\rr\rWZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    str_0 = "\n\\"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4362():
    int_0 = -1816
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    str_0 = "metastore_port"
    tuple_0 = (str_0, str_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bytes_0 = b"\x12\x04\x15]\x8c\x8ch\x8d3S\xeb!\xf4_2K"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.print_exception(dict_0)


def test_case_4366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4367():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4368():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4369():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bool_0 = False
    int_0 = -2517
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    bytes_0 = b"0w\xbd\x1d\xe5\xe2\xb4R\x01\xc3\x96\xea\xb4\xe9H|"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4373():
    float_0 = 10000000000.0
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0, float_0: bool_0, bool_0: float_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    str_0 = "select 1 as table_exists from pg_table_def where tablename = %s limit 1"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    str_0 = "rp\nEp=b-r,<jY"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    float_0 = -352.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    int_0 = 2013
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "rG-Ba {=ge"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bytes_0 = b".\xd5\xda\xbf"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    int_0 = -863
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    int_0 = -1372
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = 3000
    module_0.print_exception(int_0)


def test_case_4384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4385():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4386():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4387():
    int_0 = -535
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    bytes_0 = b"\xa1\xa9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4390():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4391():
    int_0 = 21
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    float_0 = -2308.487267
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    complex_0 = -317 + 3000.49801j
    module_0.print_exception(complex_0)


def test_case_4395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4396():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_4398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = 1902
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4401():
    str_0 = "__main__"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4403():
    int_0 = -3633
    dict_0 = {int_0: int_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    float_0 = -447.0
    module_0.Runner(float_0)


def test_case_4405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4406():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4407():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bytes_0 = b"\xb9\x0c\nB\x96\xdc\xc6\x0c\x96\x9b6X"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4410():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4411():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    float_0 = -2789.558
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4415():
    str_0 = ".\\c"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "&Wp"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    complex_0 = 641.8158 - 1569.824198j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4420():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4421():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4422():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    int_0 = 1902
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    str_0 = "'$l{i3:}1^\"p-=Sy\x0bd~c"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "y=m)1=WI#5ge"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    module_0.Runner()


def test_case_4427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    int_0 = 1769
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    str_0 = "4cMe\x0cG<Y"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"O\xe2\xb0"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    set_0 = set()
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    int_0 = 3149
    list_0 = [int_0, int_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4436():
    complex_0 = -1640.7 - 982.576j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    str_0 = "8!5}\x0cR\x0c;3w."
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "kTu9V"
    str_1 = "'NNqbww\x0bhlmUW"
    dict_0 = {str_0: list_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    str_0 = "8*\r_^'pLz6wGq"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    float_0 = 3388.22148
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4445():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    bytes_0 = b"\x94\xa7\xcc\xd1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    int_0 = -134
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_4449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4450():
    bytes_0 = b"W<"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4452():
    bytes_0 = b"\xa2\x05\x17\x88\x10x/hz\xcb\xa2=a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bytes_0 = b"P\x9c\x80D\xc1\x0b\xae\xad=&P\x18\x06\xd6"
    complex_0 = 839.2195 + 573.41858j
    tuple_0 = (bytes_0, bytes_0, complex_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4455():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4457():
    int_0 = 732
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    int_0 = 2585
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4460():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4461():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = 100
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4465():
    float_0 = -1331.8934
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"\x11\xbeQ\\/\x01ICsx\xd3c-"
    module_0.Runner(bytes_0)


def test_case_4469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4470():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4471():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4472():
    str_0 = "p{BNaS\n+:"
    module_1.object(**str_0)


def test_case_4473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = 1101
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4476():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4477():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4478():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    int_0 = -1158
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = -1314
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    str_0 = 'V`"4\x0bjy]\\V:j~]|!v_.'
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    int_0 = -1148
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    bytes_0 = b"\ruig\xab\xf2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4485():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4486():
    int_0 = 1187
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    complex_0 = 1415.281781 + 235.74163j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    float_0 = -2603.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = 1331
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4495():
    int_0 = 470
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4497():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4498():
    float_0 = 10000000000.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    int_0 = 128
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    int_0 = -1519
    str_0 = "UP\r\x0c{>$9:DH?"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: str_0, str_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    object_0 = module_1.object()
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = "v0`YCdJB_!UFi\x0c3<]\x0c"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    str_0 = "50H"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    bytes_0 = b"\x1e\xfa\xc8\x87Zd\xe7\x0f\x05\x17"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    float_0 = -2371.9244
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    bytes_0 = b"u\xe7\xa2\xe7c}\xf1\r!\xa9\xf8;\xb4~\xa7R"
    tuple_0 = ()
    set_0 = {bytes_0, bytes_0, bytes_0, tuple_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bytes_0 = b"\x83\xd6?\xdf\x1d2`\x88K"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    str_0 = "\rA8{s9(\rE.\nq$ =}?&g"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bytes_0 = b"\x0e\xcbe\xd6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    int_0 = -606
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.print_exception(list_0)


def test_case_4518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4519():
    int_0 = 21
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    complex_0 = -3081.6403 - 4499.6116j
    dict_0 = {complex_0: complex_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4522():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = 291.2619
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    module_0.Runner()


def test_case_4525():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4526():
    module_0.Runner()


def test_case_4527():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"Q\x0c\xc8>5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4530():
    int_0 = 3491
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: int_0, bool_1: bool_1, bool_0: bool_0}
    tuple_0 = (int_0, bool_0, dict_0)
    list_0 = [tuple_0, dict_0, bool_1]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    int_0 = -3416
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4533():
    str_0 = "a\"'2RkX"
    set_0 = {str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    int_0 = 2170
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    complex_0 = -2543 + 98j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4539():
    int_0 = 85
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, list_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    bytes_0 = b"\x12\x8b4\x91\xd5vL\x92"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    module_0.Runner()


def test_case_4542():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4543():
    int_0 = -1076
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4545():
    none_type_0 = None
    str_0 = "s.\x0be2nXnBl"
    str_1 = "mv"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    float_0 = -503.0
    bool_0 = False
    set_0 = {float_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bytes_0 = b"C\x88\xb0\x8f\x9b\xbd\xa5\xdd\x03"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bytes_0 = b"\x98(\x13\x1c\xc2|\xa5B\x18\xca\x1a\xd0\x01X-f\x0f5\xde"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4554():
    int_0 = 128
    set_0 = set()
    tuple_0 = (int_0, set_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "job jar does not exist"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    float_0 = -765.76
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4563():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4564():
    object_0 = module_1.object()
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bool_0 = True
    tuple_0 = ()
    bytes_0 = b"+4\xdfvL"
    dict_0 = {bool_0: tuple_0, bool_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bytes_0 = b"\t\xa2\xf5\xd2\x17YW>)\xac"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    int_0 = -3814
    set_0 = {int_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    int_0 = 170
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    bytes_0 = b"\xd0G\xe7\x1e`\xe4\x0cy\x17\xfe\xb7G\x16\xe9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    str_0 = "extent to which contiguousness is to be assured into future, in hours from current time. Prevents infinite loop when stop is none"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    str_0 = "A*O+xKZB\n"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"{dv\xeb \xf2b\xf8"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4580():
    int_0 = 728
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    bytes_0 = b"\x7f\xc5.\x87\\$\xf8\x0c56B\xc4\t\x03\x81"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    set_0 = set()
    module_0.print_exception(set_0)


def test_case_4583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4584():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4585():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4587():
    int_0 = 3456
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4589():
    object_0 = module_1.object()
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_4590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4591():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4593():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4594():
    module_0.Runner()


def test_case_4595():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4596():
    str_0 = "Actually checking if range %s of %s is complete"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    str_0 = "--executor-cores"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    int_0 = -208
    str_0 = "P"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: str_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bytes_0 = b"\xab3\xb9,\xc9\xd0\x8e4p\xe2\xbd\xa7\x97\xc5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    str_0 = "QEEN5&sZ"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4604():
    float_0 = -2089.85553
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bytes_0 = b"\xde\x1b!\xe5\r|\xf5,gn\xb2bA&\xe6\xf6"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4607():
    int_0 = -2189
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4609():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4610():
    str_0 = "}]+<-c'cu[:L%SiLObW"
    list_0 = []
    str_1 = "mrrunner"
    dict_0 = {str_0: list_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"3;~3\x05\xf8\x87\xb6\x9f"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    int_0 = -3217
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4614():
    int_0 = 889
    tuple_0 = (int_0,)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    object_0 = module_1.object()
    int_0 = -174
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bytes_0 = b"3ZC\x0b\xf3-:$y\xe3"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4620():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4621():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4622():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4623():
    str_0 = "B|&><e"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bytes_0 = b"\xa7#\xc5t\xc6\xaey8D,J\xd5\xbc\xb5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"\x8a\x17\x0e\x99yq\xce<^S\xa5\x19\x1a"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bytes_0 = b"\x86\x02\x03\x8d$\xd5\x00\xcd\xde?\xfb\xbf\xd94/"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    bytes_0 = b"DF\x8d\xc7\xe5\x16M\xa9\n\r\xcf^0="
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bytes_0 = b"k\xf8\xfae\x99\xca_\x87\xe4\xd5!\x06\xcb\x1a\xaa\xb3\xe5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    complex_0 = 931.387 - 1386j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    list_0 = []
    module_0.print_exception(list_0)


def test_case_4633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4634():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -1327
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    str_0 = "o'hG<g]J1"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = "SW5fI'&Z/GOy"
    int_0 = 21
    tuple_0 = (bool_0, int_0)
    tuple_1 = (bool_0, set_0, str_0, tuple_0)
    module_0.print_exception(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4640():
    complex_0 = 2507.9035 + 4309j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.print_exception(list_0)


def test_case_4642():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4643():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    complex_0 = -620.48438 + 532.355j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4646():
    float_0 = -2813.12
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4648():
    int_0 = 5
    tuple_0 = (int_0, int_0, int_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    int_0 = 1104
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    bytes_0 = b",\xfa9\xa1\xb8\x88\xa0"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    object_0 = module_1.object()
    bytes_0 = b"a\xc7S;\x07P"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    str_0 = "[j`$.#%sXP\rY\x0bq_c@xG"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4657():
    int_0 = -1158
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -1012
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bytes_0 = b"\x84\x0c>"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4662():
    str_0 = "__main__"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    int_0 = -349
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bytes_0 = b"%\x84\xb5W.=\x0f\xa2"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bool_0 = True
    int_0 = 50
    tuple_0 = (bool_0, bool_0, int_0)
    list_0 = [tuple_0, bool_0, bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    float_0 = 874.99
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    str_0 = "hqM_"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    int_0 = -675
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4674():
    int_0 = 10
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    str_0 = "RF=r\x0cma?Pf"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4678():
    str_0 = "[)!Z\x0cs{|V33$~Q\r>pM"
    list_0 = []
    tuple_0 = (str_0, list_0, list_0, list_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4680():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4681():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = 1755
    bytes_0 = b"x_\xb8\x9b'\xa8\xf5E4\xa8\xedx\xa6\x88=*\x14\xdcX"
    str_0 = "W&A.(GvPVBq]*"
    dict_0 = {str_0: str_0}
    tuple_0 = (int_0, bytes_0, str_0, dict_0)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bytes_0 = b'a\xf8\xa2X\x8d~\x98^}-"\x81\xc1\x0er_\xba'
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4685():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_4686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4687():
    complex_0 = -210.04 + 2518.32j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    int_0 = 1012
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4690():
    bytes_0 = b"\xec\x1a\x1d\xef\xe6\xd3\x9aIoW\xafS\x10W\xa3\xbd"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    int_0 = -2015
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    int_0 = 3799
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    bytes_0 = b"\xc6\xf1\x10|\x8d\xc6\xb6\xf0\xf0R\x06\xae\xacR\xa7\x1eW\xd3"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    set_0 = set()
    module_0.print_exception(set_0)


def test_case_4696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4697():
    str_0 = "select pg_terminate_backend(process) from STV_SESSIONS where db_name=%s and user_name != 'rdsdb' and process != pg_backend_pid()"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = -1786
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    str_0 = "dGP\x0caG"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4703():
    module_0.Runner()


def test_case_4704():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4705():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    int_0 = -696
    set_0 = {int_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.print_exception(dict_0)


def test_case_4708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4709():
    complex_0 = -91.268 + 683.57011j
    module_0.Runner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4714():
    str_0 = "4D5bqX-J1)E\n{Re$LL"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    float_0 = -1305.0
    set_0 = {float_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4718():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = 1875
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    float_0 = -621.0353
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    str_0 = "\n        Remove file or directory at location ``path``.\n\n        :param path: a path within the FileSystem to remove.\n        :type path: str\n        :param recursive: if the path is a directory, recursively remove the directory and\n                          all of its descendants. Defaults to ``True``.\n        :type recursive: bool\n        "
    set_0 = {str_0, str_0, str_0}
    module_0.Runner(set_0)


def test_case_4722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4723():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4725():
    str_0 = "x-"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_1]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4729():
    float_0 = 5119.43
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "DhcZH%M"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = -5003
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4733():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = 60
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    bytes_0 = b"\\\x05\xf8\x97\x89\xdf\x95\xf9\xef\xaf"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4737():
    float_0 = 37.2
    int_0 = -674
    dict_0 = {float_0: float_0, int_0: int_0, float_0: int_0, int_0: int_0}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    list_0 = []
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    int_0 = -2617
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    float_0 = 10000000000.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    int_0 = 921
    module_0.print_exception(int_0)


def test_case_4743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4744():
    float_0 = 621.239
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"d\nS\x0e!H\x9b\x89b7\x91\xb3G4\x8d\x83@\xfc"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4747():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "\n        Turns a dict into the a Hive partition specification string.\n        "
    bool_0 = True
    list_0 = [str_0, str_0, bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    float_0 = 513.812
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4753():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    str_0 = "y5r/CErbTUU681\x0b\x0cB"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bool_0 = True
    int_0 = 403
    dict_0 = {bool_0: int_0, int_0: bool_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bytes_0 = b">\x91\x9c\n%\xceH\xd2X5\xb9\xdd\xa9"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bytes_0 = b""
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    bool_0 = True
    module_0.print_exception(bool_0)


def test_case_4761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4762():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = "\x0b"
    none_type_0 = None
    str_1 = "OTL+"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4765():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4766():
    complex_0 = 113.90893 + 1170.17j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4768():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4771():
    int_0 = 990
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bytes_0 = b"\x15\x9f^\xc0\xd2\xe0<\xc1\xf1."
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    str_0 = "e&l2"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    float_0 = 1050.78
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4777():
    complex_0 = 2197.298 - 3475.3j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    list_0 = []
    str_0 = "Running task copy to table for update id %s for table %s"
    tuple_0 = (list_0, str_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4780():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4781():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4784():
    str_0 = "At least one of start and stop needs to be specified"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b",2}\xe8\xcb4\x9a\x85\xab\xd6\n4\xe0\xec\xcb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    dict_0 = {}
    module_0.Runner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    bool_0 = False
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    bytes_0 = b"\xca\x87\x8d\xba\xa4IK$\xfd\xf3"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    bytes_0 = b"\xd8m"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "1;;tdwml"
    module_0.print_exception(str_0)


def test_case_4795():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4796():
    tuple_0 = ()
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4799():
    float_0 = 5232.0
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bytes_0 = b"\xa1\xd7&\xac\xf6\x1c\xb7\xb0\x9c\xb8\x8c\xad!\xd6\x11\xa1\xf6\xfdm"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4803():
    bytes_0 = b"\xa2"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 128
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    float_0 = -1985.86973
    list_0 = [float_0]
    list_1 = [list_0, float_0, float_0, float_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4807():
    int_0 = -370
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4809():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"L\xffw|6\xb6\xec\xf4\xa1\xb5"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bytes_0 = b"!\x8c\xd5\xb9\xad\xe2\xff\x90\xb4~\x90>\xa0\xe6\xa6\x89K\xc7"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4815():
    list_0 = []
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bool_0 = False
    list_0 = [bool_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = 'E"CZQRi[O'
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    bytes_0 = b"\x93n\xad\xbcS\\\xcc\x16\xa7\xf5\xcb\xcaz\xdcD\x8c\xe2\xfa"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4821():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4822():
    bytes_0 = b"<\x87)\xb8g\xb1\xf2c\xbf\xc3\x9d\x145\xa1\x8fW\xceS"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    float_0 = 4677.1
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    float_0 = -987.90504
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"\xf3R\xa7|\x9d\xd4\nm\x88\xa1\r\xf6\x8e\xdcM\xb2\x8dM"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    str_0 = "1GO~[sFc}p;!?a}/+{"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    bytes_0 = b"N\xe7\xef\xdaT\x86m\x14"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bytes_0 = b"\xa8\x037\x01\x1d"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "OdUm=7|$c"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4834():
    list_0 = []
    list_1 = [list_0]
    module_0.print_exception(list_1)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.print_exception(list_0)


def test_case_4836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bytes_0 = b"R\x056\x1b\x1f\xf3\x93ZJm\x92\x93\xc2&X\xb0\x16\xa2j"
    module_0.print_exception(bytes_0)


def test_case_4838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4839():
    int_0 = 698
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    str_0 = "4T3"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4842():
    complex_0 = 2569.5 - 599.184j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    int_0 = -1510
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    bytes_0 = b"\x99\xa8\xf7\xed9\xf65\x1a1\x03v"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "F"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4847():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    float_0 = 2642.8
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    str_0 = "a0!dHaR,#`\x0b %4xpcz"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = "1U,\x0bDP)\t<"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4852():
    str_0 = "~u;hkWr!^pO\x0c"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "--"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    int_0 = 5690
    bool_0 = True
    str_0 = "}+"
    tuple_0 = (int_0, bool_0, str_0, bool_0)
    module_0.Runner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4856():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4857():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4862():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4863():
    module_0.Runner()


def test_case_4864():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4865():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4866():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.Runner(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4868():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    float_0 = 2572.37922
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    set_0 = set()
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    complex_0 = 2585.3 + 1281.707918j
    list_0 = [complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    bytes_0 = b"h"
    module_0.Runner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    str_0 = 'piK+"t'
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = -748
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.print_exception(list_1)


def test_case_4877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4878():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.print_exception(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    int_0 = 100
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = 1272
    dict_0 = {tuple_0: tuple_0, bool_0: int_0}
    tuple_1 = (bool_0, bool_0, tuple_0, dict_0)
    list_0 = [tuple_1, dict_0, tuple_1]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bytes_0 = b"B\xf0_\xc2\x12$~\x06\x89\xc1_\xb7aHk\x8db\x04"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    str_0 = "8"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"\xe0I\xa0\x91\xfb"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    float_0 = 690.7
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4889():
    str_0 = "|?ehD0f"
    str_1 = "mrrunner"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4892():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4894():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bytes_0 = b"\xc7\x84\xc3\xd2\x88/BM?$Q#\xbf\xd9\xa4\xfd\xdb\xa4\xdc"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.print_exception(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    bytes_0 = b"\x8a\xc2\xdc\xc1J]\x7f"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = "<1na"
    module_0.Runner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bytes_0 = b"\xfb1T\xa3I\x95"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4902():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4904():
    int_0 = 60
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    int_0 = 2996
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    list_0 = []
    module_0.print_exception(list_0)


def test_case_4907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4908():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.print_exception(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4911():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    str_0 = "!RAzuqyIHZg+BV"
    str_1 = "RYs![,!DQqhd.3iI:"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4914():
    object_0 = module_1.object()
    dict_0 = {}
    object_1 = module_1.object(**dict_0)
    module_0.Runner(object_1)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4917():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    int_0 = 1024
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    float_0 = 598.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    str_0 = "-iBLMGZM"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bool_0 = True
    module_0.Runner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bytes_0 = b"\x11\xcf\xd4F\xee\xca\x11`\xf8j"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b"\x99\x9aW[\x1d#\xd1Q\xad\x1c\xab"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    float_0 = 10000000000.0
    set_0 = {float_0, float_0, float_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4930():
    bool_0 = False
    module_0.print_exception(bool_0)


def test_case_4931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4932():
    float_0 = 10000000000.0
    module_0.Runner(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    str_0 = "xo2"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4935():
    int_0 = 60
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    object_0 = module_1.object()
    int_0 = -3740
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    str_0 = ",bFS%7Z/\x0cdn"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    int_0 = -436
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    complex_0 = 869.4 - 47.72j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    complex_0 = 5027.2182 + 495.67018j
    module_0.print_exception(complex_0)


def test_case_4941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4942():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    complex_0 = -1313.3161 + 972.4j
    module_0.print_exception(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    str_0 = "\x0c0zBM'"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    bool_0 = False
    set_0 = {bool_0}
    module_0.Runner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4947():
    int_0 = 100
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    str_0 = "SO,kTI"
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bytes_0 = b"\xbbP\xb8r\x96\x7fB\xe6\x05><\xcb\x97\xa3\xac\xfe\x13\x0c"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    none_type_0 = None
    module_0.Runner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    float_0 = -205.16333
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = 1
    module_0.Runner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = ""
    module_0.print_exception(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bytes_0 = b"\x95\xfdrC"
    module_0.print_exception(bytes_0)


def test_case_4956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4957():
    bool_0 = True
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    bytes_0 = b"\xdc\x86\x1f![8*{\th\xdb\x97\x93"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    bytes_0 = b"\xa7\xbah\xf6\x13!\xbe\xca\x184\xa7;'\xa7\x16Y6\xdc\x17b"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bytes_0 = b"\xb6\xc0\xce#\xde\x17\xb8\x94\xa7o\xcf^q\xfbZr\xc1"
    module_0.print_exception(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4963():
    dict_0 = {}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4965():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bytes_0 = b"\x146\xc3\x8e\xc4\xde\x14r\xae\xe6\xa5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    none_type_0 = None
    module_0.print_exception(none_type_0)


def test_case_4968():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4969():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    int_0 = -1010
    module_0.print_exception(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    float_0 = 840.729
    module_0.print_exception(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bool_0 = False
    module_0.print_exception(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    float_0 = -2341.63624
    dict_0 = {float_0: float_0}
    module_0.print_exception(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.Runner(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bool_0 = True
    set_0 = {bool_0}
    module_0.print_exception(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    none_type_0 = None
    module_0.print_exception(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    module_0.Runner()


@pytest.mark.xfail(strict=True)
def test_case_4978():
    float_0 = 400.494
    module_0.print_exception(float_0)
